<?xml version="1.0" encoding="utf-8" standalone="no"?>
<pkg:Library
  xsi:schemaLocation="urn:schemas-www-wisware.nl-scriptingpackages ../XmlSchemas.Common.XmlScript/XMLScripting.Packages.xsd"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="urn:schemas-www-wisware.nl-xmlscripting"
  xmlns:ado="urn:schemas-www-wisware.nl-xmlscripting-ado"
  xmlns:fil="urn:schemas-www-wisware.nl-xmlscripting-filemanagement"
  xmlns:fwl="urn:schemas-www-wisware.nl-xmlscripting-windowsfirewall"
  xmlns:inx="urn:schemas-www-wisware.nl-xmlscripting-index"
  xmlns:lil="urn:schemas-www-wisware.nl-xmlscripting-linkedlist"
  xmlns:msx="urn:schemas-www-wisware.nl-xmlscripting-xml"
  xmlns:pkg="urn:schemas-www-wisware.nl-scriptingpackages"
  xmlns:reg="urn:schemas-www-wisware.nl-xmlscripting-registry"
  xmlns:rep="urn:schemas-www-wisware.nl-xmlscripting-report"
  xmlns:sts="urn:schemas-www-wisware.nl-xmlscripting-showstatus"
  xmlns:sys="urn:schemas-www-wisware.nl-xmlscripting"
  xmlns:syu="urn:schemas-www-wisware.nl-xmlscripting-sysutils"
  >
  <Uses>
    <Use Identifier="ElectronicUtils"/>
    <Use Identifier="BomStrings"/>
    <Use Identifier="BomClasses"/>
    <Use Identifier="ResistorClasses"/>
    <Use Identifier="CapacitorClasses"/>
    <Use Identifier="InductorClasses"/>
    <Use Identifier="ZenerDiodeClasses"/>
    <Use Identifier="ConnectorClasses"/>
    <Use Identifier="GenericComponentClasses"/>
  </Uses>
  <Type>
    <DataClass Identifier="TStockManager">
      <VirtualMethod Identifier="vmFinalize" IsFinalizer="true"/>
      <Field Identifier="Resistors" Type="TResistorCategory"/>
      <Field Identifier="Capacitors" Type="TCapacitorCategory"/>
      <Field Identifier="Inductors" Type="TInductorCategory"/>
      <Field Identifier="ZenerDiodes" Type="TZenerDiodeCategory"/>
      <Field Identifier="Connectors" Type="TConnectorCategory"/>
      <Field Identifier="GenericComponents" Type="TGenericComponentCategory"/>
    </DataClass>

  </Type>
  
  <Constants>
    <Constant Identifier="cLF" Type="string"  Expression="#13#10"/>
    <Constant Identifier="sqlParts" Type="string"  Expression="
      'SELECT prt.id' + cLF + 
      ', prt.category_id' + cLF + 
      ', prt.name' + cLF + 
      ', prt.stockLevel' + cLF + 
      ', loc.name  ''location''' + cLF + 
      ', foot.name ''footprint''' + cLF + 
      'FROM Part prt ' + cLF + 
      'LEFT JOIN StorageLocation loc ON (prt.storageLocation_id = loc.id) ' + cLF + 
      'LEFT JOIN Footprint foot ON (prt.footprint_id = foot.id) ' + cLF + 
      'ORDER BY prt.id'"/>
    <Constant Identifier="sqlPartParameters" Type="string"  Expression="'SELECT id, part_id, name, stringValue FROM PartParameter WHERE valueType = ''string'' ORDER BY part_id'"/>
  </Constants>
  
  <Procedures>

    <Constructor Identifier="TStockManager.Create">
      <Block>
        <Execute Statement="Resistors:= TResistorCategory.Create"/>
        <Execute Statement="Capacitors:= TCapacitorCategory.Create"/>
        <Execute Statement="Inductors:= TInductorCategory.Create"/>
        <Execute Statement="ZenerDiodes:= TZenerDiodeCategory.Create"/>
        <Execute Statement="Connectors:= TConnectorCategory.Create"/>
        <Execute Statement="GenericComponents:= TGenericComponentCategory.Create"/>
      </Block>
    </Constructor>

    <Procedure Identifier="TStockManager.Finalize" VirtualMethod="vmFinalize">
      <Block>
      </Block>
    </Procedure>

    <Procedure Identifier="TStockManager.LoadCategories">
      <Parameters>
        <Parameter Identifier="DBConnection" Type="Connection"/>
      </Parameters>
      <Variables>
        <Variable Identifier="Count" Type="Integer" Init="0"/>
      </Variables>
      <Procedures>
        <Procedure Identifier="ProcessStockComponent">
          <Parameters>
            <Parameter Identifier="StockComponent" Type="TStockComponent"/>
            <Parameter Identifier="ValueHead" Type="TComponentValue"/>
          </Parameters>
          <Variables>
            <Variable Identifier="RunningComponentValue" Type="TComponentValue" Init="ValueHead"/>
            <Variable Identifier="ReleaseComponentValue" Type="TComponentValue"/>
          </Variables>
          <Block>
            <rep:Reporter.Information Text="Format('%s (%d)', StockComponent.Name, StockComponent.ID)" Markup="Header3" Condition="IsVerbose"/>

            <WhileLoop Expression="Assigned(RunningComponentValue)">
              <rep:Reporter.Information Text="Format('%s=%s', RunningComponentValue.Name, RunningComponentValue.Value)" Condition="IsVerbose"/>
              <Execute Statement="RunningComponentValue:= RunningComponentValue.Next"/>
            </WhileLoop>

            <Execute Statement="Count:= Count + 1"/>
            <Choose>
              <When Expression="Resistors.ProcessStockComponent(StockComponent, ValueHead, Count)"/>
              <When Expression="Capacitors.ProcessStockComponent(StockComponent, ValueHead, Count)"/>
              <When Expression="Inductors.ProcessStockComponent(StockComponent, ValueHead, Count)"/>
              <When Expression="ZenerDiodes.ProcessStockComponent(StockComponent, ValueHead, Count)"/>
              <When Expression="Connectors.ProcessStockComponent(StockComponent, ValueHead, Count)"/>
              <When Expression="GenericComponents.ProcessStockComponent(StockComponent, ValueHead, Count)"/>
              <Otherwise>
                <rep:Reporter.Error Text="Format('Component %d werd niet herkend', StockComponent.ID)" Target="Errors"/>
              </Otherwise>
            </Choose>

            <Execute Statement="RunningComponentValue:= ValueHead"/>
            <WhileLoop Expression="Assigned(RunningComponentValue)">
              <Execute Statement="ReleaseComponentValue:= RunningComponentValue"/>
              <Execute Statement="RunningComponentValue:= RunningComponentValue.Next"/>
              <Free Expression="ReleaseComponentValue"/>
            </WhileLoop>
          </Block>
        </Procedure>
      </Procedures>
      <Variables>
        <Variable Identifier="ID"/>
        <Variable Identifier="PartID"/>
        <Variable Identifier="Name"/>
        <Variable Identifier="Value"/>
        <Variable Identifier="ParentID"/>
        <Variable Identifier="CategoryID"/>
        <Variable Identifier="Description"/>
        <Variable Identifier="Amount"/>
        <Variable Identifier="Location"/>
        <Variable Identifier="FootPrint"/>
        <Variable Identifier="ComponentSpec" Type="TComponentSpec"/>
        <Variable Identifier="StockComponent" Type="TStockComponent"/>
        <Variable Identifier="StockComponentDetached" Type="TStockComponent"/>
        <Variable Identifier="StockComponentHead" Type="TStockComponent" Init="ObjNil"/>
        <Variable Identifier="StockComponentTail" Type="TStockComponent" Init="ObjNil"/>
        <Variable Identifier="NewCategory" Type="TStockCategory" Init="TStockCategory.Create"/>
        <Variable Identifier="Category" Type="TStockCategory"/>
        <Variable Identifier="ParentCategory" Type="TStockCategory"/>
        <Variable Identifier="FoundCategory" Type="Boolean"/>
        <Variable Identifier="ComponentValueHead" Type="TComponentValue" Init="ObjNil"/>
        <Variable Identifier="ComponentValueTail" Type="TComponentValue" Init="ObjNil"/>
        <Variable Identifier="CurrentComponentValue" Type="TComponentValue"/>
        <Variable Identifier="PrevPartID" Type="Integer"/>
      </Variables>
      <Block>
        <Object.Use Identifier="SL" Type="TStringList" Expression="TStringList.Create">
          <Object.Use Identifier="KeyValues" Type="TStringList" Expression="TStringList.Create">
            <Object.Use Identifier="Ini" Type="TMemIniFile" Expression="TMemIniFile.Create('')">
              <Object.Use Identifier="CategoryIndex" Type="TMappingInt64ToObject" Expression="TMappingInt64ToObject.Create">
                <Object.Use Identifier="CategoryList" Type="TObjectList" Expression="TObjectList.Create(False)">
                  <Object.Use Identifier="PartList" Type="TObjectList" Expression="TObjectList.Create(False)">
                    <ado:Command.CreateBlock  CommandText="'SELECT id, name, parent_id, description FROM PartCategory'" CommandType="adCmdText" Connection="DBConnection">
                      <ado:Recordset.OpenBlock CursorType="adOpenForwardOnly" LockType="adLockReadOnly">
                        <ado:Recordset.Iterate>
                          <ado:Field.GetValue Index="0" Identifier="ID"/>
                          <ado:Field.GetValue Index="1" Identifier="Name"/>
                          <ado:Field.GetValue Index="2" Identifier="ParentID"/>
                          <ado:Field.GetValue Index="3" Identifier="Description"/>
                          <inx:Index.MapValue Index="CategoryIndex" Key="ID" Found="FoundCategory" Value="NewCategory" PreviousValue="Category" Flags="NoErrorOnExist DiscardOnExist" />
                          <Block Condition="not FoundCategory">
                            <Execute Statement="Category:= NewCategory"/>
                            <Execute Statement="NewCategory:= TStockCategory.Create"/>
                          </Block>
                          <Block Condition="not IsNullOrEmpty(ParentID)">
                            <inx:Index.MapValue Index="CategoryIndex" Key="ParentID" Found="FoundCategory" Value="NewCategory" PreviousValue="ParentCategory" Flags="NoErrorOnExist DiscardOnExist" />
                            <Block Condition="not FoundCategory">
                              <Execute Statement="ParentCategory:= NewCategory"/>
                              <Execute Statement="NewCategory:= TStockCategory.Create"/>
                            </Block>
                            <Execute Statement="Category.ParentCategory:= ParentCategory"/>
                          </Block>

                          <Execute Statement="SL.Text:= Description"/>
                          <Execute Statement="Ini.SetStrings(SL)"/>
                          <Execute Statement="ComponentSpec:= ObjNil"/>
                          <Choose>
                            <When Expression="Resistors.CanExtractTemplateFromIniFile(Ini, ComponentSpec)"/>
                            <When Expression="Capacitors.CanExtractTemplateFromIniFile(Ini, ComponentSpec)"/>
                            <When Expression="Inductors.CanExtractTemplateFromIniFile(Ini, ComponentSpec)"/>
                            <When Expression="ZenerDiodes.CanExtractTemplateFromIniFile(Ini, ComponentSpec)"/>
                            <When Expression="Connectors.CanExtractTemplateFromIniFile(Ini, ComponentSpec)"/>
                            <When Expression="GenericComponents.CanExtractTemplateFromIniFile(Ini, ComponentSpec)"/>
                          </Choose>
                          <Execute Statement="Category.Name:= Name"/>
                          <Execute Statement="Category.ComponentSpec:= ComponentSpec"/>
                          <Execute Statement="CategoryList.Add(Category)"/>
                        </ado:Recordset.Iterate>
                      </ado:Recordset.OpenBlock>
                    </ado:Command.CreateBlock>
                    <ForLoop Indexer="I" From="0" To="CategoryList.Count - 1">
                      <Execute Statement="TStockCategory(CategoryList[I]).AcquireSpecs"/>
                    </ForLoop>
                    <ado:Command.CreateBlock  CommandText="sqlParts" CommandType="adCmdText" Connection="DBConnection">
                      <ado:Recordset.OpenBlock CursorType="adOpenForwardOnly" LockType="adLockReadOnly">
                        <ado:Recordset.Iterate>
                          <ado:Field.GetValue Name="id" Identifier="ID"/>
                          <ado:Field.GetValue Name="category_id" Identifier="CategoryID"/>
                          <ado:Field.GetValue Name="name" Identifier="Name"/>
                          <ado:Field.GetValue Name="stockLevel" Identifier="Amount"/>
                          <ado:Field.GetValue Name="location" Identifier="Location"/>
                          <ado:Field.GetValue Name="footprint" Identifier="FootPrint"/>
                          <inx:Index.FindValue Index="CategoryIndex" Key="CategoryID" Value="Category"/>
                          <rep:Reporter.Information Text="Format('%s : %s', Name, Category.Name)" Condition="IsVerbose"/>
                          <Execute Statement="StockComponent:= TStockComponent.Create"/>
                          <Execute Statement="StockComponent.ID:= ID"/>
                          <Execute Statement="StockComponent.Name:= Name"/>
                          <Execute Statement="StockComponent.Amount:= Amount"/>
                          <Execute Statement="StockComponent.Location:= IfElse(IsNull(Location), '', Location)"/>
                          <Execute Statement="StockComponent.Footprint:= IfElse(IsNull(Footprint), '', Footprint)"/>
                          <Execute Statement="StockComponent.StockCategory:= Category"/>
                          <Choose>
                            <When Expression="Assigned(StockComponentHead)">
                              <Execute Statement="StockComponentTail.Next:= StockComponent"/>
                            </When>
                            <Otherwise>
                              <Execute Statement="StockComponentHead:= StockComponent"/>
                            </Otherwise>
                          </Choose>
                          <Execute Statement="StockComponentTail:= StockComponent"/>
                        </ado:Recordset.Iterate>
                      </ado:Recordset.OpenBlock>
                    </ado:Command.CreateBlock>

                    <Execute Statement="StockComponent:= StockComponentHead"/>
                    <ado:Command.CreateBlock  CommandText="sqlPartParameters" CommandType="adCmdText" Connection="DBConnection">
                      <ado:Recordset.OpenBlock CursorType="adOpenForwardOnly" LockType="adLockReadOnly">
                        <ado:Recordset.Iterate>
                          <!--<ado:Field.GetValue Index="0" Identifier="ID"/>-->
                          <ado:Field.GetValue Name="part_id" Identifier="PartID"/>
                          <ado:Field.GetValue Name="name" Identifier="Name"/>
                          <ado:Field.GetValue Name="stringValue" Identifier="Value"/>
                          <Choose>
                            <When Expression="IsEmpty(PrevPartID)">
                              <Execute Statement="CurrentComponentValue:= TComponentValue.Create(Name, Value)"/>
                              <!--<rep:Reporter.Information Text="Format('Recordset.Iterate - IsEmpty(PrevPartID) - %s=%s', Name, Value)" Condition="IsVerbose"/>-->
                              <Execute Statement="ComponentValueHead:= CurrentComponentValue"/>
                              <Execute Statement="ComponentValueTail:= CurrentComponentValue"/>
                            </When>
                            <When Expression="PartID = PrevPartID">
                              <Execute Statement="CurrentComponentValue:= TComponentValue.Create(Name, Value)"/>
                              <Execute Statement="ComponentValueTail.Next:= CurrentComponentValue"/>
                              <Execute Statement="ComponentValueTail:= CurrentComponentValue"/>
                              <!--<rep:Reporter.Information Text="Format('Recordset.Iterate - PartID = PrevPartID - %s=%s', Name, Value)" Condition="IsVerbose"/>-->
                            </When>
                            <When Expression="PartID &gt; PrevPartID">
                              <!-- all field gathered -->
                              <RepeatUntilLoop Expression="False">
                                <Raise Condition="not Assigned(StockComponent) or (StockComponent.ID &gt; PrevPartID)" Expression="Exception.Create('Missing component')"/>
                                <Break Condition="StockComponent.ID = PrevPartID"/>
                                <Execute Statement="StockComponentDetached:= StockComponent"/>
                                <Execute Statement="StockComponent:= StockComponent.Next"/>
                                <Execute Statement="StockComponentDetached.Next:= ObjNil"/>
                                <Execute Statement="ProcessStockComponent(StockComponentDetached, ObjNil)"/>
                              </RepeatUntilLoop>
                              <Execute Statement="StockComponentDetached:= StockComponent"/>
                              <Execute Statement="StockComponent:= StockComponent.Next"/>
                              <Execute Statement="StockComponentDetached.Next:= ObjNil"/>
                              <Execute Statement="ProcessStockComponent(StockComponentDetached, ComponentValueHead)"/>
                              <!--<rep:Reporter.Information Text="Format('Recordset.Iterate - PartID &gt; PrevPartID - %s=%s', Name, Value)" Condition="IsVerbose"/>-->
                              <Execute Statement="CurrentComponentValue:= TComponentValue.Create(Name, Value)"/>
                              <Execute Statement="ComponentValueHead:= CurrentComponentValue"/>
                              <Execute Statement="ComponentValueTail:= CurrentComponentValue"/>
                            </When>
                          </Choose>
                          <Execute Statement="PrevPartID:= PartID"/>
                        </ado:Recordset.Iterate>
                      </ado:Recordset.OpenBlock>
                    </ado:Command.CreateBlock>
                    <Choose>
                      <When Expression="IsEmpty(PrevPartID)">
                        <WhileLoop Expression="Assigned(StockComponent)">
                          <Execute Statement="StockComponentDetached:= StockComponent"/>
                          <Execute Statement="StockComponent:= StockComponent.Next"/>
                          <Execute Statement="StockComponentDetached.Next:= ObjNil"/>
                          <Execute Statement="ProcessStockComponent(StockComponentDetached, ObjNil)"/>
                        </WhileLoop>
                      </When>
                      <Otherwise>
                        <RepeatUntilLoop Expression="False">
                          <Raise Condition="not Assigned(StockComponent) or (StockComponent.ID &gt; PrevPartID)" Expression="Exception.Create('Missing component')"/>
                          <Break Condition="StockComponent.ID = PrevPartID"/>
                          <Execute Statement="StockComponentDetached:= StockComponent"/>
                          <Execute Statement="StockComponent:= StockComponent.Next"/>
                          <Execute Statement="StockComponentDetached.Next:= ObjNil"/>
                          <Execute Statement="ProcessStockComponent(StockComponentDetached, ObjNil)"/>
                        </RepeatUntilLoop>
                        <Execute Statement="ProcessStockComponent(StockComponent, ComponentValueHead)"/>
                        <Execute Statement="StockComponent:= StockComponent.Next"/>
                        <WhileLoop Expression="Assigned(StockComponent)">
                          <Execute Statement="StockComponentDetached:= StockComponent"/>
                          <Execute Statement="StockComponent:= StockComponent.Next"/>
                          <Execute Statement="StockComponentDetached.Next:= ObjNil"/>
                          <Execute Statement="ProcessStockComponent(StockComponentDetached, ObjNil)"/>
                        </WhileLoop>
                      </Otherwise>
                    </Choose>
                  </Object.Use>
                </Object.Use>
              </Object.Use>
            </Object.Use>
          </Object.Use>
        </Object.Use>
      </Block>
    </Procedure>

    <Procedure Identifier="TStockManager.LoadFromDB">
      <Parameters>
        <Parameter Identifier="ConnectionString" Type="string"/>
      </Parameters>
      <Block>
        <ado:Connection.OpenBlock ConnectionString="ConnectionString" Connection="DBConnection">
          <Execute Statement="LoadCategories(DBConnection)"/>
        </ado:Connection.OpenBlock>
      </Block>
    </Procedure>

    <Procedure Identifier="TStockManager.ConsolidateSpecifications">
      <Block>
        <Execute Statement="Resistors.ConsolidateSpecifications"/>
        <Execute Statement="Capacitors.ConsolidateSpecifications"/>
        <Execute Statement="Inductors.ConsolidateSpecifications"/>
        <Execute Statement="ZenerDiodes.ConsolidateSpecifications"/>
        <Execute Statement="Connectors.ConsolidateSpecifications"/>
        <Execute Statement="GenericComponents.ConsolidateSpecifications"/>
      </Block>
    </Procedure>

    <Procedure Identifier="TStockManager.Report">
      <Block>
        <rep:Reporter.Information Text="sStockHeader" Markup="Header1"/>
        <Execute Statement="Resistors.ReportStock"/>
        <Execute Statement="Capacitors.ReportStock"/>
        <Execute Statement="Inductors.ReportStock"/>
        <Execute Statement="ZenerDiodes.ReportStock"/>
        <Execute Statement="Connectors.ReportStock"/>
        <Execute Statement="GenericComponents.ReportStock"/>
      </Block>
    </Procedure>

  </Procedures>

</pkg:Library>