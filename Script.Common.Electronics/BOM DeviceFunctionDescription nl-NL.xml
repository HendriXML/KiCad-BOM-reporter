<?xml version="1.0" encoding="utf-8" standalone="no"?>
<pkg:Library
  xsi:schemaLocation="urn:schemas-www-wisware.nl-scriptingpackages ../XmlSchemas.Common.XmlScript/XMLScripting.Packages.xsd" 
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
  xmlns="urn:schemas-www-wisware.nl-xmlscripting" 
  xmlns:pkg="urn:schemas-www-wisware.nl-scriptingpackages"
  xmlns:sys="urn:schemas-www-wisware.nl-xmlscripting" 
  xmlns:ado="urn:schemas-www-wisware.nl-xmlscripting-ado" 
  xmlns:rep="urn:schemas-www-wisware.nl-xmlscripting-report" 
  xmlns:msx="urn:schemas-www-wisware.nl-xmlscripting-xml"
  xmlns:sts="urn:schemas-www-wisware.nl-xmlscripting-showstatus" 
  xmlns:inx="urn:schemas-www-wisware.nl-xmlscripting-index" 
  xmlns:reg="urn:schemas-www-wisware.nl-xmlscripting-registry" 
  xmlns:syu="urn:schemas-www-wisware.nl-xmlscripting-sysutils" 
  xmlns:sim="urn:schemas-www-wisware.nl-xmlscripting-simulateuserinput" 
  xmlns:fil="urn:schemas-www-wisware.nl-xmlscripting-filemanagement" 
  xmlns:fwl="urn:schemas-www-wisware.nl-xmlscripting-windowsfirewall" 
  xmlns:cod="urn:schemas-www-wisware.nl-xmlscripting-codeparser" 
  xmlns:lil="urn:schemas-www-wisware.nl-xmlscripting-linkedlist" 
  xmlns:div="urn:schemas-www-wisware.nl-xmlscripting-dividers" 
  xmlns:stm="urn:schemas-www-wisware.nl-xmlscripting-statemanagement" 
  >
  <Uses>
    <Use Identifier="DeviceFunctions"/>
  </Uses>
	<Procedures>

    <Function Identifier="GetCountPrefix" Type="string">
      <Parameters>
        <Parameter Identifier="Count" Type="Integer"/>
      </Parameters>
      <Block>
        <Case Expression="Count" Optimalisation="integermapping">
          <On Select="1">
            <Execute Statement="Result:= ''"/>
          </On>
          <On Select="2">
            <Execute Statement="Result:= 'dubbele '"/>
          </On>
          <On Select="3">
            <Execute Statement="Result:= 'drievoudige '"/>
          </On>
          <On Select="4">
            <Execute Statement="Result:= 'viervoudige '"/>
          </On>
          <On Select="5">
            <Execute Statement="Result:= 'vijfvoudige '"/>
          </On>
          <On Select="6">
            <Execute Statement="Result:= 'zesvoudige '"/>
          </On>
          <On Select="8">
            <Execute Statement="Result:= 'achtvoudige '"/>
          </On>
          <Otherwise>
            <Execute Statement="Result:= Format('%d x ', Count)"/>
          </Otherwise>
        </Case>
      </Block>
    </Function>


    <Function Identifier="GetDeviceFunctionDescription" Type="string">
			<Parameters>
				<Parameter Identifier="ImplementedFunction" Type="TBaseImplementedFunction"/>
			</Parameters>
      <Block>
        <Choose>
          <When Expression="ImplementedFunction.Count = 1">
            <Case Expression="ImplementedFunction.DeviceFunction" Optimalisation="integermapping">
              <On Select="TDeviceFunction.OpAmp">
                <Execute Statement="Result:= 'opamp'"/>
              </On>
              <On Select="TDeviceFunction.Comparator">
                <Execute Statement="Result:= 'comparator'"/>
              </On>
              <On Select="TDeviceFunction.SchmittTrigger">
                <Execute Statement="Result:= 'schmitt-trigger'"/>
              </On>
              <On Select="TDeviceFunction.Optocoupler">
                <Execute Statement="Result:= 'optocoupler'"/>
              </On>
              <On Select="TDeviceFunction.Timer">
                <Execute Statement="Result:= 'timer'"/>
              </On>
              <On Select="TDeviceFunction.AndGate">
                <Execute Statement="Result:= 'AND poort'"/>
              </On>
              <On Select="TDeviceFunction.OrGate">
                <Execute Statement="Result:= 'OR poort'"/>
              </On>
              <On Select="TDeviceFunction.XorGate">
                <Execute Statement="Result:= 'XOR poort'"/>
              </On>
              <On Select="TDeviceFunction.XnorGate">
                <Execute Statement="Result:= 'XNOR poort'"/>
              </On>
              <On Select="TDeviceFunction.NandGate">
                <Execute Statement="Result:= 'NAND poort'"/>
              </On>
              <On Select="TDeviceFunction.NorGate">
                <Execute Statement="Result:= 'NOR poort'"/>
              </On>
              <On Select="TDeviceFunction.NotGate">
                <Execute Statement="Result:= 'NOT poort'"/>
              </On>
              <On Select="TDeviceFunction.VRef">
                <Execute Statement="Result:= 'referentiespanning'"/>
              </On>
              <On Select="TDeviceFunction.TempSens">
                <Execute Statement="Result:= 'temperatuur sensor'"/>
              </On>
              <Otherwise>
                <Raise Expression="Exception.Create('Unsupported device function')"/>
              </Otherwise>
            </Case>
          </When>
          <Otherwise>
            <Case Expression="ImplementedFunction.DeviceFunction" Optimalisation="integermapping">
              <On Select="TDeviceFunction.OpAmp">
                <Execute Statement="Result:= Format('%d x opamps', ImplementedFunction.Count)"/>
              </On>
              <On Select="TDeviceFunction.Comparator">
                <Execute Statement="Result:= Format('%d x comparatoren', ImplementedFunction.Count)"/>
              </On>
              <On Select="TDeviceFunction.SchmittTrigger">
                <Execute Statement="Result:= Format('%d x schmitt-triggers', ImplementedFunction.Count)"/>
              </On>
              <On Select="TDeviceFunction.Optocoupler">
                <Execute Statement="Result:= Format('%d x optocouplers', ImplementedFunction.Count)"/>
              </On>
              <On Select="TDeviceFunction.Timer">
                <Execute Statement="Result:= Format('%d x timers', ImplementedFunction.Count)"/>
              </On>
              <On Select="TDeviceFunction.AndGate">
                <Execute Statement="Result:= Format('%d x AND poorten', ImplementedFunction.Count)"/>
              </On>
              <On Select="TDeviceFunction.OrGate">
                <Execute Statement="Result:= Format('%d x OR poorten', ImplementedFunction.Count)"/>
              </On>
              <On Select="TDeviceFunction.XorGate">
                <Execute Statement="Result:= Format('%d x XOR poorten', ImplementedFunction.Count)"/>
              </On>
              <On Select="TDeviceFunction.XnorGate">
                <Execute Statement="Result:= Format('%d x XNOR poorten', ImplementedFunction.Count)"/>
              </On>
              <On Select="TDeviceFunction.NandGate">
                <Execute Statement="Result:= Format('%d x NAND poorten', ImplementedFunction.Count)"/>
              </On>
              <On Select="TDeviceFunction.NorGate">
                <Execute Statement="Result:= Format('%d x NOR poorten', ImplementedFunction.Count)"/>
              </On>
              <On Select="TDeviceFunction.NotGate">
                <Execute Statement="Result:= Format('%d x NOT poorten', ImplementedFunction.Count)"/>
              </On>
              <On Select="TDeviceFunction.VRef">
                <Execute Statement="Result:= Format('%d x spanningsreferenties', ImplementedFunction.Count)"/>
              </On>
              <On Select="TDeviceFunction.TempSens">
                <Execute Statement="Result:= Format('%d x temperatuursensoren', ImplementedFunction.Count)"/>
              </On>
              <Otherwise>
                <Raise Expression="Exception.Create('Unsupported device function')"/>
              </Otherwise>
            </Case>
          </Otherwise>
        </Choose>
      </Block>
		</Function>
    
	</Procedures>
</pkg:Library>