<?xml version="1.0" encoding="utf-8" standalone="no"?>
<pkg:Library
  xsi:schemaLocation="urn:schemas-www-wisware.nl-scriptingpackages ../XmlSchemas.Common.XmlScript/XMLScripting.Packages.xsd"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="urn:schemas-www-wisware.nl-xmlscripting"
  xmlns:ado="urn:schemas-www-wisware.nl-xmlscripting-ado"
  xmlns:fil="urn:schemas-www-wisware.nl-xmlscripting-filemanagement"
  xmlns:fwl="urn:schemas-www-wisware.nl-xmlscripting-windowsfirewall"
  xmlns:inx="urn:schemas-www-wisware.nl-xmlscripting-index"
  xmlns:lil="urn:schemas-www-wisware.nl-xmlscripting-linkedlist"
  xmlns:msx="urn:schemas-www-wisware.nl-xmlscripting-xml"
  xmlns:pkg="urn:schemas-www-wisware.nl-scriptingpackages"
  xmlns:reg="urn:schemas-www-wisware.nl-xmlscripting-registry"
  xmlns:rep="urn:schemas-www-wisware.nl-xmlscripting-report"
  xmlns:sts="urn:schemas-www-wisware.nl-xmlscripting-showstatus"
  xmlns:sys="urn:schemas-www-wisware.nl-xmlscripting"
  xmlns:syu="urn:schemas-www-wisware.nl-xmlscripting-sysutils"
  >
  <Uses>
    <Use Identifier="ElectronicUtils"/>
    <Use Identifier="BomStrings"/>
    <Use Identifier="BomClasses"/>
    <Use Identifier="GenericComponentClasses"/>
  </Uses>
  <Type>
    <Enumeration Identifier="TBreakSpeed" Elements="VeryFast, Fast, Medium, Slow, VerySlow" LowAlias="Low" HighAlias="High"/>
    
    <DataClass Identifier="TFuseSpec" Inherit="TComponentSpec" DefaultConstructor="createonly">
      <VirtualMethod Identifier="vmHandleField" Override="true"/>
      <VirtualMethod Identifier="vmCheckComponentKind" Override="true"/>
      <VirtualMethod Identifier="vmSpecificationAsString" Override="true"/>
      <VirtualMethod Identifier="vmApplyTemplate" Override="true"/>
      <VirtualMethod Identifier="vmDoesMatchSpecification" Override="true"/>
      <VirtualMethod Identifier="vmCategoryMatchScore" Override="true"/>
      <Field Identifier="AmperageVT" Type="TValueType"/>
      <Field Identifier="Amperage" Type="Int64"/>
      <Field Identifier="ErrorAmperage" Type="string"/>
      
      <Field Identifier="VoltageRatingVT" Type="TValueType"/>
      <Field Identifier="VoltageRating" Type="Int64"/>
      <Field Identifier="ErrorVoltageRating" Type="string"/>
      
      <Field Identifier="BreakSpeedVT" Type="TValueType"/>
      <Field Identifier="BreakSpeed" Type="TBreakSpeed"/>
      <Field Identifier="ErrorBreakSpeed" Type="string"/>
      
      <Field Identifier="DimensionsVT" Type="TValueType"/>
      <Field Identifier="Dimensions" Type="string"/>
    </DataClass>

    <DataClass Identifier="TFuseCategory" Inherit="TComponentCategory">
      <VirtualMethod Identifier="vmCreateSpecification" Override="true"/>
      <VirtualMethod Identifier="vmIsValidSpecification" Override="true"/>
      <VirtualMethod Identifier="vmIndexSearchSpecifications" Override="true"/>
      <VirtualMethod Identifier="vmCompareSpecifications" Override="true"/>
      <VirtualMethod Identifier="vmLoadTemplatesFromIniFile" Override="true"/>
      <VirtualMethod Identifier="vmGetTemplate" Override="true"/>
      <VirtualMethod Identifier="vmCanExtractTemplateFromIniFile" Override="true"/>
      <Field Identifier="Template" Type="TFuseSpec"/>
    </DataClass>
  </Type>
  
  <Variables>
    <Variable Identifier="BreakSpeedIndex" Type="TMappingCaseInSensitiveUnicodeStringToInt64" Init="TMappingCaseInSensitiveUnicodeStringToInt64.Create"/>
    <Variable Identifier="FuseAmperageConv" Type="TUnitConvertor" Init="GetUnitConvertor(TConvertorKind.PicoAmp)"/>
    <Variable Identifier="FuseVoltageRatingConv" Type="TUnitConvertor" Init="GetUnitConvertor(TConvertorKind.PicoVolt)"/>
  </Variables>

  <Procedures>
    <Function Identifier="FuseBreakSpeedName" Type="string">
      <Parameters>
        <Parameter Identifier="BreakSpeed" Type="TBreakSpeed"/>
      </Parameters>
      <Block>
        <Case Expression="BreakSpeed" Optimalisation="integermapping">
          <On Select="TBreakSpeed.VeryFast">
            <Execute Statement="Result:= 'very fast'"/>
          </On>
          <On Select="TBreakSpeed.Fast">
            <Execute Statement="Result:= 'fast'"/>
          </On>
          <On Select="TBreakSpeed.Medium">
            <Execute Statement="Result:= 'medium'"/>
          </On>
          <On Select="TBreakSpeed.Slow">
            <Execute Statement="Result:= 'slow'"/>
          </On>
          <On Select="TBreakSpeed.VerySlow">
            <Execute Statement="Result:= 'very slow'"/>
          </On>
          <Otherwise>
            <Raise Expression="Exception.Create('Unmapped fuse speed')"/>
          </Otherwise>
        </Case>
      </Block>
    </Function>

    <Function Identifier="FuseSpeedDescription" Type="string">
      <Parameters>
        <Parameter Identifier="BreakSpeed" Type="TBreakSpeed"/>
      </Parameters>
      <Block>
        <Case Expression="BreakSpeed" Optimalisation="integermapping">
          <On Select="TBreakSpeed.VeryFast">
            <Execute Statement="Result:= sFuseSpeedVeryFast"/>
          </On>
          <On Select="TBreakSpeed.Fast">
            <Execute Statement="Result:= sFuseSpeedFast"/>
          </On>
          <On Select="TBreakSpeed.Medium">
            <Execute Statement="Result:= sFuseSpeedMedium"/>
          </On>
          <On Select="TBreakSpeed.Slow">
            <Execute Statement="Result:= sFuseSpeedSlow"/>
          </On>
          <On Select="TBreakSpeed.VerySlow">
            <Execute Statement="Result:= sFuseSpeedVerySlow"/>
          </On>
          <Otherwise>
            <Raise Expression="Exception.Create('Unmapped fuse speed')"/>
          </Otherwise>
        </Case>
      </Block>
    </Function>

    <Procedure Identifier="IniTBreakSpeedIndex">
      <Parameters>
        <Parameter Identifier="Index" Type="TAbstractBoxedValueMappingHashIndex"/>
      </Parameters>
      <Block>
        <ForLoop Indexer="I" From="TBreakSpeed.Low" To="TBreakSpeed.High">
          <inx:Index.MapValue Index="Index" Key="FuseBreakSpeedName(I)" Value="I"/>
        </ForLoop>
      </Block>
    </Procedure>


    <Function Identifier="TFuseSpec.CheckComponentKind" VirtualMethod="vmCheckComponentKind" Type="Boolean">
      <Parameters>
        <Parameter Identifier="ComponentKind" Type="TComponentKind"/>
      </Parameters>
      <Block>
        <Execute Statement="Result:= False"/>
        <Case Expression="ComponentKind" Optimalisation="integermapping">
          <On Select="TComponentKind.Fuse">
            <Execute Statement="Result:= True"/>
          </On>
        </Case>
      </Block>
    </Function>

    <Function Identifier="TFuseSpec.DoesMatchSpecification" VirtualMethod="vmDoesMatchSpecification" Type="Boolean">
      <Parameters>
        <Parameter Identifier="ComponentSpec" Type="TComponentSpec"/>
      </Parameters>
      <Block>
        <Execute Statement="Result:= False"/>
        <Exit Condition="not inherited DoesMatchSpecification(ComponentSpec)"/>
        <Case Expression="AmperageVT">
          <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
            <Exit Condition="not (ComponentSpec is TFuseSpec)"/>
            <Case Expression="TFuseSpec(ComponentSpec).AmperageVT">
              <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
                <Exit Condition="Amperage &lt;&gt; TFuseSpec(ComponentSpec).Amperage"/>
              </On>
              <Otherwise>
                <Exit/>
              </Otherwise>
            </Case>
          </On>
          <On Select="TValueType.Error, TValueType.ErrorByTemplate">
            <Exit/>
          </On>
        </Case>
        <Case Expression="VoltageRatingVT">
          <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
            <Exit Condition="not (ComponentSpec is TFuseSpec)"/>
            <Case Expression="TFuseSpec(ComponentSpec).VoltageRatingVT">
              <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
                <Exit Condition="VoltageRating &gt; TFuseSpec(ComponentSpec).VoltageRating"/>
              </On>
              <Otherwise>
                <Exit/>
              </Otherwise>
            </Case>
          </On>
          <On Select="TValueType.Error, TValueType.ErrorByTemplate">
            <Exit/>
          </On>
        </Case>
        <Case Expression="BreakSpeedVT">
          <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
            <Exit Condition="not (ComponentSpec is TFuseSpec)"/>
            <Case Expression="TFuseSpec(ComponentSpec).BreakSpeedVT">
              <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
                <Exit Condition="BreakSpeed &lt;&gt; TFuseSpec(ComponentSpec).BreakSpeed"/>
              </On>
              <Otherwise>
                <Exit/>
              </Otherwise>
            </Case>
          </On>
          <On Select="TValueType.Error, TValueType.ErrorByTemplate">
            <Exit/>
          </On>
        </Case>
        <Execute Statement="Result:= True"/>
      </Block>
    </Function>

    <Function Identifier="TFuseSpec.CategoryMatchScore" VirtualMethod="vmCategoryMatchScore" Type="Int64">
      <Parameters>
        <Parameter Identifier="ComponentSpec" Type="TComponentSpec"/>
      </Parameters>
      <Block>
        <Execute Statement="Result:= 0"/>

        <Exit Condition="not (ComponentSpec is TFuseSpec)"/>

        <Case Expression="ComponentKindVT">
          <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
            <Case Expression="ComponentSpec.ComponentKindVT">
              <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
                <Exit Condition="ComponentKind &lt;&gt; ComponentSpec.ComponentKind" Result="0"/>
                <Execute Statement="Result:= Result + 1"/>
              </On>
              <On Select="TValueType.Error, TValueType.ErrorByTemplate">
                <Exit Result="0"/>
              </On>
            </Case>
          </On>
          <On Select="TValueType.Error, TValueType.ErrorByTemplate">
            <Exit Result="0"/>
          </On>
        </Case>

        <Execute Statement="Result:= Result shl 1"/>
        <Case Expression="AmperageVT">
          <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
            <Case Expression="TFuseSpec(ComponentSpec).AmperageVT">
              <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
                <Exit Condition="Amperage &lt;&gt; TFuseSpec(ComponentSpec).Amperage" Result="0"/>
                <Execute Statement="Result:= Result + 1"/>
              </On>
              <On Select="TValueType.Error, TValueType.ErrorByTemplate">
                <Exit Result="0"/>
              </On>
            </Case>
          </On>
          <On Select="TValueType.Error, TValueType.ErrorByTemplate">
            <Exit Result="0"/>
          </On>
        </Case>

        <Execute Statement="Result:= Result shl 1"/>
        <Case Expression="VoltageRatingVT">
          <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
            <Case Expression="TFuseSpec(ComponentSpec).VoltageRatingVT">
              <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
                <Exit Condition="VoltageRating &lt;&gt; TFuseSpec(ComponentSpec).VoltageRating" Result="0"/>
                <Execute Statement="Result:= Result + 1"/>
              </On>
              <On Select="TValueType.Error, TValueType.ErrorByTemplate">
                <Exit Result="0"/>
              </On>
            </Case>
          </On>
          <On Select="TValueType.Error, TValueType.ErrorByTemplate">
            <Exit Result="0"/>
          </On>
        </Case>

        <Execute Statement="Result:= Result shl 1"/>
        <Case Expression="FootprintVT">
          <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
            <Case Expression="ComponentSpec.FootprintVT">
              <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
                <Exit Condition="Footprint &lt;&gt; ComponentSpec.Footprint" Result="0"/>
                <Execute Statement="Result:= Result + 1"/>
              </On>
              <On Select="TValueType.Error, TValueType.ErrorByTemplate">
                <Exit Result="0"/>
              </On>
            </Case>
          </On>
          <On Select="TValueType.Error, TValueType.ErrorByTemplate">
            <Exit Result="0"/>
          </On>
        </Case>

        <Execute Statement="Result:= Result shl 1"/>
        <Case Expression="PartNumberVT">
          <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
            <Case Expression="ComponentSpec.PartNumberVT">
              <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
                <Exit Condition="not SameText(PartNumber, ComponentSpec.PartNumber)" Result="0"/>
                <Execute Statement="Result:= Result + 1"/>
              </On>
              <On Select="TValueType.Error, TValueType.ErrorByTemplate">
                <Exit Result="0"/>
              </On>
            </Case>
          </On>
          <On Select="TValueType.Error, TValueType.ErrorByTemplate">
            <Exit Result="0"/>
          </On>
        </Case>

        <Execute Statement="Result:= Result shl 1"/>
        <Case Expression="ManufacturerVT">
          <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
            <Case Expression="ComponentSpec.ManufacturerVT">
              <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
                <Exit Condition="not SameText(Manufacturer, ComponentSpec.Manufacturer)" Result="0"/>
                <Execute Statement="Result:= Result + 1"/>
              </On>
              <On Select="TValueType.Error, TValueType.ErrorByTemplate">
                <Exit Result="0"/>
              </On>
            </Case>
          </On>
          <On Select="TValueType.Error, TValueType.ErrorByTemplate">
            <Exit Result="0"/>
          </On>
        </Case>
      
        <Execute Statement="Result:= Result shl 1"/>
        <Case Expression="BreakSpeedVT">
          <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
            <Case Expression="TFuseSpec(ComponentSpec).BreakSpeedVT">
              <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
                <Exit Condition="BreakSpeed &lt;&gt; TFuseSpec(ComponentSpec).BreakSpeed" Result="0"/>
                <Execute Statement="Result:= Result + 1"/>
              </On>
              <On Select="TValueType.Error, TValueType.ErrorByTemplate">
                <Exit Result="0"/>
              </On>
            </Case>
          </On>
          <On Select="TValueType.Error, TValueType.ErrorByTemplate">
            <Exit Result="0"/>
          </On>
        </Case>
      </Block>
    </Function>

    <Procedure Identifier="TFuseSpec.HandleField" VirtualMethod="vmHandleField">
      <Parameters>
        <Parameter Identifier="CustomField" Type="TCustomField"/>
        <Parameter Identifier="Name" Type="string"/>
        <Parameter Identifier="Value" Type="string"/>
        <Parameter Identifier="Clear" Type="Boolean"/>
      </Parameters>
      <Variables>
        <Variable Identifier="LocForwardVoltage" Type="Int64"/>
        <Variable Identifier="LocVoltageRating" Type="Int64"/>
        <Variable Identifier="LocAmperage" Type="Int64"/>
        <Variable Identifier="LocBreakSpeed" Type="TBreakSpeed"/>
        <Variable Identifier="Found" Type="Boolean"/>
      </Variables>
      <Block>
        <Case Expression="CustomField" Optimalisation="integermapping">
          <On Select="TCustomField.Value">
            <Choose>
              <When Expression="Clear">
                <Execute Statement="AmperageVT:= TValueType.Cleared"/>
                <Execute Statement="Amperage:= -1"/>
              </When>
              <When Expression="FuseAmperageConv.StrToIntValue(Value, LocAmperage)">
                <rep:Reporter.Information Text="Format('Amperage: %s', FuseAmperageConv.IntValueToStr(LocAmperage))" Condition="IsVerbose"/>
                <Execute Statement="AmperageVT:= TValueType.Specified"/>
                <Execute Statement="Amperage:= LocAmperage"/>
              </When>
              <Otherwise>
                <rep:Reporter.Error Text="Format('Amperage could not be safely parsed from value: %s', Value)" Condition="IsVerbose"/>
                <Execute Statement="AmperageVT:= TValueType.Error"/>
                <Execute Statement="ErrorAmperage:= Value"/>
              </Otherwise>
            </Choose>
          </On>
          <On Select="TCustomField.VoltageRating">
            <Choose>
              <When Expression="Clear">
                <Execute Statement="VoltageRatingVT:= TValueType.Cleared"/>
                <Execute Statement="VoltageRating:= -1"/>
              </When>
              <When Expression="FuseVoltageRatingConv.StrToIntValue(Value, LocVoltageRating)">
                <rep:Reporter.Information Text="Format('VoltageRating: %s', FuseVoltageRatingConv.IntValueToStr(LocVoltageRating))" Condition="IsVerbose"/>
                <Execute Statement="VoltageRatingVT:= TValueType.Specified"/>
                <Execute Statement="VoltageRating:= LocVoltageRating"/>
              </When>
              <Otherwise>
                <rep:Reporter.Error Text="Format('VoltageRating could not be safely parsed from value: %s', Value)" Condition="IsVerbose"/>
                <Execute Statement="VoltageRatingVT:= TValueType.Error"/>
                <Execute Statement="ErrorVoltageRating:= Value"/>
              </Otherwise>
            </Choose>
          </On>
          <On Select="TCustomField.BreakSpeed">
            <Choose>
             <When Expression="Clear">
                <Execute Statement="BreakSpeedVT:= TValueType.Cleared"/>
              </When>
              <Otherwise>
                <inx:Index.FindValue Index="BreakSpeedIndex" Key="Value" Value="LocBreakSpeed" Found="Found" Flags="NoErrorOnNotFound" />
                <Choose>
                  <When Expression="Found">
                    <rep:Reporter.Information Text="Format('Break speed: %d', LocBreakSpeed)" Condition="Found and IsVerbose"/>
                    <Execute Statement="BreakSpeedVT:= TValueType.Specified"/>
                    <Execute Statement="BreakSpeed:= LocBreakSpeed"/>
                  </When>
                  <Otherwise>
                    <rep:Reporter.Error Text="Format('Break speed could not be matched: %s', Value)" Condition="not Found"/>
                    <Execute Statement="BreakSpeedVT:= TValueType.Error"/>
                    <Execute Statement="ErrorBreakSpeed:= Value"/>
                  </Otherwise>
                </Choose>
              </Otherwise>
            </Choose>
          </On>
          <On Select="TCustomField.Dimensions">
            <Choose>
              <When Expression="Clear">
                <Execute Statement="Self.Dimensions:= ''"/>
                <Execute Statement="DimensionsVT:= TValueType.Cleared"/>
              </When>
              <Otherwise>
                <Execute Statement="Self.Dimensions:= Value"/>
                <Execute Statement="DimensionsVT:= TValueType.Specified"/>
              </Otherwise>
            </Choose>
          </On>
          <Otherwise>
            <Execute Statement="inherited HandleField(CustomField, Name, Value, Clear)"/>
          </Otherwise>
        </Case>
      </Block>
    </Procedure>


    <Procedure Identifier="TFuseSpec.GetSpecificationValues">
      <Parameters>
        <Parameter Identifier="Amperage" Type="string" Direction="Output"/>
        <Parameter Identifier="VoltageRating" Type="string" Direction="Output"/>
        <Parameter Identifier="BreakSpeed" Type="string" Direction="Output"/>
        <Parameter Identifier="Dimensions" Type="string" Direction="Output"/>
        <Parameter Identifier="Footprint" Type="string" Direction="Output"/>
        <Parameter Identifier="PartNumberModel" Type="string" Direction="Output"/>
        <Parameter Identifier="InternalPartNumber" Type="string" Direction="Output"/>
        <Parameter Identifier="ComponentKind" Type="string" Direction="Output"/>
      </Parameters>
      <Block>
        <Case Expression="AmperageVT">
          <On Select="TValueType.Unspecified, TValueType.Cleared, TValueType.ClearedByTemplate">
            <Execute Statement="Amperage:= ''"/>
          </On>
          <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
            <Execute Statement="Amperage:= FuseAmperageConv.IntValueToStr(Self.Amperage)"/>
          </On>
          <On Select="TValueType.Error, TValueType.ErrorByTemplate">
            <Execute Statement="Amperage:= '!' + ErrorAmperage + '!'"/>
          </On>
        </Case>

        <Case Expression="VoltageRatingVT">
          <On Select="TValueType.Unspecified, TValueType.Cleared, TValueType.ClearedByTemplate">
            <Execute Statement="VoltageRating:= ''"/>
          </On>
          <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
            <Execute Statement="VoltageRating:= FuseVoltageRatingConv.IntValueToStr(Self.VoltageRating)"/>
          </On>
          <On Select="TValueType.Error, TValueType.ErrorByTemplate">
            <Execute Statement="VoltageRating:= '!' + ErrorVoltageRating + '!'"/>
          </On>
        </Case>

        <Case Expression="BreakSpeedVT">
          <On Select="TValueType.Unspecified, TValueType.Cleared, TValueType.ClearedByTemplate">
            <Execute Statement="BreakSpeed:= ''"/>
          </On>
          <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
            <Execute Statement="BreakSpeed:= FuseSpeedDescription(Self.BreakSpeed)"/>
          </On>
          <On Select="TValueType.Error, TValueType.ErrorByTemplate">
            <Execute Statement="BreakSpeed:= '!' + ErrorBreakSpeed + '!'"/>
          </On>
        </Case>
        
        <Case Expression="DimensionsVT">
          <On Select="TValueType.Unspecified, TValueType.Cleared, TValueType.ClearedByTemplate">
            <Execute Statement="Dimensions:= ''"/>
          </On>
          <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
            <Execute Statement="Dimensions:= Self.Dimensions"/>
          </On>
          <On Select="TValueType.Error, TValueType.ErrorByTemplate">
            <Execute Statement="Dimensions:= '!!'"/>
          </On>
        </Case>

        <Execute Statement="inherited GetSpecificationValues(Footprint, PartNumberModel, InternalPartNumber, ComponentKind)"/>
      </Block>
    </Procedure>

    <Function Identifier="TFuseSpec.SpecificationAsString" VirtualMethod="vmSpecificationAsString" Type="string">
      <Parameters>
        <Parameter Identifier="FormatType" Type="TSpecFormatType"/>
        <Parameter Identifier="ReportContext" Type="TSpecReportContext"/>
      </Parameters>
      <Variables>
        <Variable Identifier="Value" Type="string"/>
        <Variable Identifier="VoltageRating" Type="string"/>
        <Variable Identifier="BreakSpeed" Type="string"/>
        <Variable Identifier="Footprint" Type="string"/>
        <Variable Identifier="Dimensions" Type="string"/>
        <Variable Identifier="PartNumberModel" Type="string"/>
        <Variable Identifier="InternalPartNumber" Type="string"/>
        <Variable Identifier="ComponentKind" Type="string"/>
      </Variables>
      <Block>
        <Execute Statement="GetSpecificationValues(Value, VoltageRating, BreakSpeed, Dimensions, Footprint, PartNumberModel, InternalPartNumber, ComponentKind)"/>
        <Case Expression="FormatType" Optimalisation="integermapping">
          <On Select="TSpecFormatType.Fixed">
            <Variable Identifier="ColumnManager" Type="TTextColumnManager" Init="ReportContext.ColumnManager"/>
            <Variable Identifier="ColumnOffset" Type="Integer" Init="ReportContext.ColumnOffset"/>
            <Execute Statement="Value:= Value + ' '" Condition="IsNonEmptyString(Value)"/>
            <Execute Statement="VoltageRating:= VoltageRating + ' '" Condition="IsNonEmptyString(VoltageRating)"/>
            <Execute Statement="Footprint:= Footprint + ' '" Condition="IsNonEmptyString(Footprint)"/>
            <Execute Statement="PartNumberModel:= PartNumberModel + ' '" Condition="IsNonEmptyString(PartNumberModel)"/>
            <Execute Statement="InternalPartNumber:= InternalPartNumber + ' '" Condition="IsNonEmptyString(InternalPartNumber)"/>
            <Choose>
              <When Expression="ReportContext.Measure">
                <Execute Statement="ColumnManager.RequestColumnWidth(ColumnOffset + TFuseSpecColumns.Value, 2, Length(Value))"/>
                <Execute Statement="ColumnManager.RequestColumnWidth(ColumnOffset + TFuseSpecColumns.VoltageRating, 1, Length(VoltageRating))"/>
                <Execute Statement="ColumnManager.RequestColumnWidth(ColumnOffset + TFuseSpecColumns.NoneA1, 2, 0)"/>
                <Execute Statement="ColumnManager.RequestColumnWidth(ColumnOffset + TFuseSpecColumns.BreakSpeed, 1, Length(Footprint))"/>
                <Execute Statement="ColumnManager.RequestColumnWidth(ColumnOffset + TFuseSpecColumns.FootPrint, 1, Length(Footprint))"/>
                <Execute Statement="ColumnManager.RequestColumnWidth(ColumnOffset + TFuseSpecColumns.PartNumberModel, 1, Length(PartNumberModel))"/>
                <Execute Statement="ColumnManager.RequestColumnWidth(ColumnOffset + TFuseSpecColumns.InternalPartNumber, 1, Length(InternalPartNumber))"/>
                <Execute Statement="Result:= ''"/>
              </When>
              <Otherwise>
                <Execute Statement="Result:= Format('%-*s%*s%*s%-*s%-*s%-*s%-*s',
                         ColumnManager.GetColumnWidth(ColumnOffset + TFuseSpecColumns.Value, 2), Value,
                         ColumnManager.GetColumnWidth(ColumnOffset + TFuseSpecColumns.VoltageRating, 1), VoltageRating,
                         ColumnManager.GetColumnWidth(ColumnOffset + TFuseSpecColumns.NoneA1, 2), '',
                         ColumnManager.GetColumnWidth(ColumnOffset + TFuseSpecColumns.BreakSpeed, 1), BreakSpeed,
                         ColumnManager.GetColumnWidth(ColumnOffset + TFuseSpecColumns.FootPrint, 1), Footprint,
                         ColumnManager.GetColumnWidth(ColumnOffset + TFuseSpecColumns.PartNumberModel, 1), PartNumberModel,
                         ColumnManager.GetColumnWidth(ColumnOffset + TFuseSpecColumns.InternalPartNumber, 1), InternalPartNumber)"/>
              </Otherwise>
            </Choose>
          </On>
          <On Select="TSpecFormatType.Description">
            <Execute Statement="Result:= ConcatExt(' ', True, Value, VoltageRating, Footprint, PartNumberModel, InternalPartNumber, Dimensions, BreakSpeed, ComponentKind)"/>
          </On>
          <On Select="TSpecFormatType.Name">
            <Execute Statement="Result:= Value"/>
          </On>
        </Case>
      </Block>
    </Function>

    <Procedure Identifier="TFuseSpec.ApplyTemplate" VirtualMethod="vmApplyTemplate">
      <Variables>
        <Variable Identifier="locTemplate" Type="TFuseSpec"/>
      </Variables>
      <Block>
        <Exit Condition="not Assigned(Template)"/>
        <ConditionalBlock Expression="Template is TFuseSpec">
          <Execute Statement="locTemplate:= TFuseSpec(Template)"/>
          <Case Expression="AmperageVT" Optimalisation="integermapping">
            <On Select="TValueType.Unspecified, TValueType.ClearedByTemplate, TValueType.SpecifiedByTemplate, TValueType.ErrorByTemplate">
              <Case Expression="locTemplate.AmperageVT" Optimalisation="integermapping">
                <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
                  <Execute Statement="Amperage:= locTemplate.Amperage"/>
                  <Execute Statement="AmperageVT:= TValueType.SpecifiedByTemplate"/>
                </On>
                <On Select="TValueType.Error, TValueType.ErrorByTemplate">
                  <Execute Statement="ErrorAmperage:= locTemplate.ErrorAmperage"/>
                  <Execute Statement="AmperageVT:= TValueType.ErrorByTemplate"/>
                </On>
              </Case>
            </On>
          </Case>
          <Case Expression="VoltageRatingVT" Optimalisation="integermapping">
            <On Select="TValueType.Unspecified, TValueType.ClearedByTemplate, TValueType.SpecifiedByTemplate, TValueType.ErrorByTemplate">
              <Case Expression="locTemplate.VoltageRatingVT" Optimalisation="integermapping">
                <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
                  <Execute Statement="VoltageRating:= locTemplate.VoltageRating"/>
                  <Execute Statement="VoltageRatingVT:= TValueType.SpecifiedByTemplate"/>
                </On>
                <On Select="TValueType.Error, TValueType.ErrorByTemplate">
                  <Execute Statement="ErrorVoltageRating:= locTemplate.ErrorVoltageRating"/>
                  <Execute Statement="VoltageRatingVT:= TValueType.ErrorByTemplate"/>
                </On>
              </Case>
            </On>
          </Case>
          <Case Expression="BreakSpeedVT" Optimalisation="integermapping">
            <On Select="TValueType.Unspecified, TValueType.ClearedByTemplate, TValueType.SpecifiedByTemplate, TValueType.ErrorByTemplate">
              <Case Expression="locTemplate.BreakSpeedVT" Optimalisation="integermapping">
                <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
                  <Execute Statement="BreakSpeed:= locTemplate.BreakSpeed"/>
                  <Execute Statement="BreakSpeedVT:= TValueType.SpecifiedByTemplate"/>
                </On>
                <On Select="TValueType.Error, TValueType.ErrorByTemplate">
                  <Execute Statement="ErrorBreakSpeed:= locTemplate.ErrorBreakSpeed"/>
                  <Execute Statement="BreakSpeedVT:= TValueType.ErrorByTemplate"/>
                </On>
              </Case>
            </On>
          </Case>
          <Case Expression="DimensionsVT" Optimalisation="integermapping">
            <On Select="TValueType.Unspecified, TValueType.ClearedByTemplate, TValueType.SpecifiedByTemplate, TValueType.ErrorByTemplate">
              <Case Expression="locTemplate.DimensionsVT" Optimalisation="integermapping">
                <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
                  <Execute Statement="Dimensions:= locTemplate.Dimensions"/>
                  <Execute Statement="DimensionsVT:= TValueType.SpecifiedByTemplate"/>
                </On>
                <On Select="TValueType.Error, TValueType.ErrorByTemplate">
                  <Execute Statement="DimensionsVT:= TValueType.ErrorByTemplate"/>
                </On>
              </Case>
            </On>
          </Case>
        </ConditionalBlock>
        <Execute Statement="inherited ApplyTemplate"/>
      </Block>
    </Procedure>

    <Constructor Identifier="TFuseCategory.Create">
      <Block>
      </Block>
    </Constructor>

    <Function Identifier="TFuseCategory.IndexSearchSpecifications" VirtualMethod="vmIndexSearchSpecifications" Type="Boolean">
      <Parameters>
        <Parameter Identifier="ComponentSpec" Type="TComponentSpec"/>
        <Parameter Identifier="Specifications" Type="TSpecificationLink" Direction="Output"/>
      </Parameters>
      <Block>
        <Execute Statement="Result:= False"/>
      </Block>
    </Function>

    <Procedure Identifier="TFuseCategory.LoadTemplatesFromIniFile" VirtualMethod="vmLoadTemplatesFromIniFile">
      <Parameters>
        <Parameter Identifier="IniFile" Type="TCustomIniFile"/>
      </Parameters>
      <Constants>
        <Constant Identifier="sSectionFuse" Type="string" Expression="'Template.Fuse'"/>
      </Constants>
      <Block>
        <ConditionalBlock Expression="IniFile.SectionExists(sSectionFuse)">
          <Execute Statement="Template:= TFuseSpec.Create"/>
          <Execute Statement="Template.LoadFromIniFileSection(IniFile, sSectionFuse)"/>
        </ConditionalBlock>
      </Block>
    </Procedure>

    <Function Identifier="TFuseCategory.CreateSpecification" VirtualMethod="vmCreateSpecification" Type="TComponentSpec">
      <Block>
        <Execute Statement="Result:= TFuseSpec.Create"/>
      </Block>
    </Function>

    <Function Identifier="TFuseCategory.IsValidSpecification" VirtualMethod="vmIsValidSpecification" Type="Boolean">
      <Parameters>
        <Parameter Identifier="Specification" Type="TComponentSpec"/>
      </Parameters>
      <Block>
        <Case Expression="Specification.ComponentKindVT">
          <On Select="TValueType.Specified, TValueType.SpecifiedByTemplate"/>
          <Otherwise>
            <Exit Result="False"/>
          </Otherwise>
        </Case>
        <Case Expression="Specification.ComponentKind">
          <On Select="TComponentKind.Fuse"/>
          <Otherwise>
            <Exit Result="False"/>
          </Otherwise>
        </Case>
        <Execute Statement="Result:= True"/>
      </Block>
    </Function>

    <Function Identifier="TFuseCategory.GetTemplate" VirtualMethod="vmGetTemplate" Type="TComponentSpec">
      <Parameters>
        <Parameter Identifier="Specification" Type="TComponentSpec"/>
      </Parameters>
      <Block>
        <Execute Statement="Result:= ObjNil"/>
        <Case Expression="Specification.ComponentKind">
          <On Select="TComponentKind.Fuse">
            <Execute Statement="Result:= Template"/>
          </On>
        </Case>
      </Block>
    </Function>

    <Function Identifier="TFuseCategory.CompareSpecifications" Type="Integer" VirtualMethod="vmCompareSpecifications">
      <Parameters>
        <Parameter Identifier="A" Type="TFuseSpec"/>
        <Parameter Identifier="B" Type="TFuseSpec"/>
      </Parameters>
      <Block>
        <Execute Statement="Result:= A.ComponentKind - B.ComponentKind"/>
        <Exit Condition="Result &lt;&gt; 0"/>
        <Execute Statement="Result:= CompareStateValue(A.ID, A.Amperage, A.AmperageVT, B.ID, B.Amperage, B.AmperageVT)"/>
        <Exit Condition="Result &lt;&gt; 0"/>
        <Execute Statement="Result:= CompareStateValue(A.ID, A.VoltageRating, A.VoltageRatingVT, B.ID, B.VoltageRating, B.VoltageRatingVT)"/>
        <Exit Condition="Result &lt;&gt; 0"/>
        <Execute Statement="Result:= CompareStateValue(A.ID, A.BreakSpeed, A.BreakSpeedVT, B.ID, B.BreakSpeed, B.BreakSpeedVT)"/>
        <Exit Condition="Result &lt;&gt; 0"/>
        <Execute Statement="Result:= CompareStateStringValue(A.ID, A.Dimensions, A.DimensionsVT, B.ID, B.Dimensions, B.DimensionsVT)"/>
        <Exit Condition="Result &lt;&gt; 0"/>
        <Execute Statement="Result:= inherited CompareSpecifications(A, B)"/>
      </Block>
    </Function>

    <Function Identifier="TFuseCategory.CanExtractTemplateFromIniFile" VirtualMethod="vmCanExtractTemplateFromIniFile" Type="Boolean">
      <Parameters>
        <Parameter Identifier="IniFile" Type="TCustomIniFile"/>
        <Parameter Identifier="ComponentSpec" Type="TComponentSpec" Direction="Output"/>
      </Parameters>
      <Constants>
        <Constant Identifier="cFuse" Type="string" Expression="'Fuse'"/>
      </Constants>
      <Block>
        <Execute Statement="Result:= IniFile.SectionExists(cFuse)"/>
        <Block Condition="Result">
          <Execute Statement="ComponentSpec:= TFuseSpec.Create"/>
          <Execute Statement="ComponentSpec.LoadFromIniFileSection(IniFile, cFuse)"/>
        </Block>
      </Block>
    </Function>

  </Procedures>
  
  <Initialization>
    <Execute Statement="IniTBreakSpeedIndex(BreakSpeedIndex)"/>
  </Initialization>

  <Finalization>
    <Free Identifier="BreakSpeedIndex"/>
  </Finalization>

</pkg:Library>