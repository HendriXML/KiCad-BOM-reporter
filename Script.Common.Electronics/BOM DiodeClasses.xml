<?xml version="1.0" encoding="utf-8" standalone="no"?>
<pkg:Library
  xsi:schemaLocation="urn:schemas-www-wisware.nl-scriptingpackages ../XmlSchemas.Common.XmlScript/XMLScripting.Packages.xsd"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="urn:schemas-www-wisware.nl-xmlscripting"
  xmlns:ado="urn:schemas-www-wisware.nl-xmlscripting-ado"
  xmlns:fil="urn:schemas-www-wisware.nl-xmlscripting-filemanagement"
  xmlns:fwl="urn:schemas-www-wisware.nl-xmlscripting-windowsfirewall"
  xmlns:inx="urn:schemas-www-wisware.nl-xmlscripting-index"
  xmlns:lil="urn:schemas-www-wisware.nl-xmlscripting-linkedlist"
  xmlns:msx="urn:schemas-www-wisware.nl-xmlscripting-xml"
  xmlns:pkg="urn:schemas-www-wisware.nl-scriptingpackages"
  xmlns:reg="urn:schemas-www-wisware.nl-xmlscripting-registry"
  xmlns:rep="urn:schemas-www-wisware.nl-xmlscripting-report"
  xmlns:sts="urn:schemas-www-wisware.nl-xmlscripting-showstatus"
  xmlns:sys="urn:schemas-www-wisware.nl-xmlscripting"
  xmlns:syu="urn:schemas-www-wisware.nl-xmlscripting-sysutils"
  >
  <Uses>
    <Use Identifier="ElectronicUtils"/>
    <Use Identifier="BomStrings"/>
    <Use Identifier="BomClasses"/>
    <Use Identifier="GenericComponentClasses"/>
  </Uses>
  <Type>
    <DataClass Identifier="TDiodeSpec" Inherit="TGenericComponentSpec" DefaultConstructor="createonly">
      <VirtualMethod Identifier="vmHandleField" Override="true"/>
      <VirtualMethod Identifier="vmCheckComponentKind" Override="true"/>
      <VirtualMethod Identifier="vmSpecificationAsString" Override="true"/>
      <VirtualMethod Identifier="vmApplyTemplate" Override="true"/>
      <VirtualMethod Identifier="vmDoesMatchSpecification" Override="true"/>
      <VirtualMethod Identifier="vmCategoryMatchScore" Override="true"/>
      <!--<-<TComponentSpec.Fields-->
      <Field Identifier="ReverseVoltageRatingVT" Type="TValueType"/>
      <Field Identifier="ReverseVoltageRating" Type="Int64"/>
      <Field Identifier="ErrorReverseVoltageRating" Type="string"/>
      <Field Identifier="ReverseVoltageRatingMinVT" Type="TValueType"/>
      <Field Identifier="ReverseVoltageRatingMin" Type="Int64"/>
      <Field Identifier="ErrorReverseVoltageRatingMin" Type="string"/>
      <Field Identifier="ReverseVoltageRatingMaxVT" Type="TValueType"/>
      <Field Identifier="ReverseVoltageRatingMax" Type="Int64"/>
      <Field Identifier="ErrorReverseVoltageRatingMax" Type="string"/>
      <Field Identifier="AmperageRatingVT" Type="TValueType"/>
      <Field Identifier="AmperageRating" Type="Int64"/>
      <Field Identifier="ErrorAmperageRating" Type="string"/>
      <Field Identifier="AmperageRatingMinVT" Type="TValueType"/>
      <Field Identifier="AmperageRatingMin" Type="Int64"/>
      <Field Identifier="ErrorAmperageRatingMin" Type="string"/>
      <Field Identifier="AmperageRatingMaxVT" Type="TValueType"/>
      <Field Identifier="AmperageRatingMax" Type="Int64"/>
      <Field Identifier="ErrorAmperageRatingMax" Type="string"/>
      <Field Identifier="ForwardVoltageVT" Type="TValueType"/>
      <Field Identifier="ForwardVoltage" Type="Int64"/>
      <Field Identifier="ErrorForwardVoltage" Type="string"/>
      <Field Identifier="ForwardVoltageMinVT" Type="TValueType"/>
      <Field Identifier="ForwardVoltageMin" Type="Int64"/>
      <Field Identifier="ErrorForwardVoltageMin" Type="string"/>
      <Field Identifier="ForwardVoltageMaxVT" Type="TValueType"/>
      <Field Identifier="ForwardVoltageMax" Type="Int64"/>
      <Field Identifier="ErrorForwardVoltageMax" Type="string"/>
<!-->->-->
    </DataClass>

    <DataClass Identifier="TDiodeCategory" Inherit="TGenericComponentCategory">
      <VirtualMethod Identifier="vmCreateSpecification" Override="true"/>
      <VirtualMethod Identifier="vmIsValidSpecification" Override="true"/>
      <VirtualMethod Identifier="vmIndexSearchSpecifications" Override="true"/>
      <VirtualMethod Identifier="vmCompareSpecifications" Override="true"/>
      <VirtualMethod Identifier="vmLoadTemplatesFromIniFile" Override="true"/>
      <VirtualMethod Identifier="vmGetTemplate" Override="true"/>
      <VirtualMethod Identifier="vmCanExtractTemplateFromIniFile" Override="true"/>
      <Field Identifier="TemplateTHT" Type="TDiodeSpec"/>
    </DataClass>
  </Type>
  
  <Variables>
    <Variable Identifier="DiodeForwardVoltageConv" Type="TUnitConvertor" Init="GetUnitConvertor(TConvertorKind.PicoVolt)"/>
    <Variable Identifier="DiodeAmperageRatingConv" Type="TUnitConvertor" Init="GetUnitConvertor(TConvertorKind.PicoAmp)"/>
    <Variable Identifier="DiodeReverseVoltageRatingConv" Type="TUnitConvertor" Init="GetUnitConvertor(TConvertorKind.PicoVolt)"/>
  </Variables>

  <Procedures>

    <Function Identifier="TDiodeSpec.CheckComponentKind" VirtualMethod="vmCheckComponentKind" Type="Boolean">
      <Parameters>
        <Parameter Identifier="ComponentKind" Type="TComponentKind"/>
      </Parameters>
      <Block>
        <Execute Statement="Result:= False"/>
        <Case Expression="ComponentKind" Optimalisation="integermapping">
          <On Select="TComponentKind.Diode, TComponentKind.SchottkyDiode">
            <Execute Statement="Result:= True"/>
          </On>
        </Case>
      </Block>
    </Function>

    <Function Identifier="TDiodeSpec.DoesMatchSpecification" VirtualMethod="vmDoesMatchSpecification" Type="Boolean">
      <Parameters>
        <Parameter Identifier="ComponentSpec" Type="TComponentSpec"/>
      </Parameters>
      <Block>
        <Execute Statement="Result:= False"/>
        <Exit Condition="not inherited DoesMatchSpecification(ComponentSpec)"/>
        <Variable Identifier="IsRanged" Type="Boolean"/>
        <!--<-<TComponentSpec.DoesMatchSpecification-->
        <Execute Statement="IsRanged:= False"/>
        <Case Expression="ReverseVoltageRatingMinVT">
          <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
            <Exit Condition="not (ComponentSpec is TDiodeSpec)"/>
            <Case Expression="TDiodeSpec(ComponentSpec).ReverseVoltageRatingVT">
              <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
                <Exit Condition="ReverseVoltageRatingMin &gt; TDiodeSpec(ComponentSpec).ReverseVoltageRating"/>
                <Execute Statement="IsRanged:= True"/>
              </On>
               <On Select="TValueType.Error, TValueType.ErrorByTemplate">
                 <Exit/>
               </On>
            </Case>
          </On>
          <On Select="TValueType.Error, TValueType.ErrorByTemplate">
            <Exit/>
          </On>
        </Case>
        <Case Expression="ReverseVoltageRatingMaxVT">
          <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
            <Exit Condition="not (ComponentSpec is TDiodeSpec)"/>
            <Case Expression="TDiodeSpec(ComponentSpec).ReverseVoltageRatingVT">
              <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
                <Exit Condition="ReverseVoltageRatingMax &lt; TDiodeSpec(ComponentSpec).ReverseVoltageRating"/>
                <Execute Statement="IsRanged:= True"/>
              </On>
               <On Select="TValueType.Error, TValueType.ErrorByTemplate">
                 <Exit/>
               </On>
            </Case>
          </On>
          <On Select="TValueType.Error, TValueType.ErrorByTemplate">
            <Exit/>
          </On>
        </Case>
        <Block Condition="not IsRanged">
          <Case Expression="ReverseVoltageRatingVT">
            <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
              <Exit Condition="not (ComponentSpec is TDiodeSpec)"/>
              <Case Expression="TDiodeSpec(ComponentSpec).ReverseVoltageRatingVT">
                <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
                  <Exit Condition="ReverseVoltageRating &lt;&gt; TDiodeSpec(ComponentSpec).ReverseVoltageRating"/>
                </On>
                 <On Select="TValueType.Error, TValueType.ErrorByTemplate">
                   <Exit/>
                 </On>
              </Case>
            </On>
            <On Select="TValueType.Error, TValueType.ErrorByTemplate">
              <Exit/>
            </On>
          </Case>
        </Block>
        <Execute Statement="IsRanged:= False"/>
        <Case Expression="AmperageRatingMinVT">
          <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
            <Exit Condition="not (ComponentSpec is TDiodeSpec)"/>
            <Case Expression="TDiodeSpec(ComponentSpec).AmperageRatingVT">
              <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
                <Exit Condition="AmperageRatingMin &gt; TDiodeSpec(ComponentSpec).AmperageRating"/>
                <Execute Statement="IsRanged:= True"/>
              </On>
               <On Select="TValueType.Error, TValueType.ErrorByTemplate">
                 <Exit/>
               </On>
            </Case>
          </On>
          <On Select="TValueType.Error, TValueType.ErrorByTemplate">
            <Exit/>
          </On>
        </Case>
        <Case Expression="AmperageRatingMaxVT">
          <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
            <Exit Condition="not (ComponentSpec is TDiodeSpec)"/>
            <Case Expression="TDiodeSpec(ComponentSpec).AmperageRatingVT">
              <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
                <Exit Condition="AmperageRatingMax &lt; TDiodeSpec(ComponentSpec).AmperageRating"/>
                <Execute Statement="IsRanged:= True"/>
              </On>
               <On Select="TValueType.Error, TValueType.ErrorByTemplate">
                 <Exit/>
               </On>
            </Case>
          </On>
          <On Select="TValueType.Error, TValueType.ErrorByTemplate">
            <Exit/>
          </On>
        </Case>
        <Block Condition="not IsRanged">
          <Case Expression="AmperageRatingVT">
            <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
              <Exit Condition="not (ComponentSpec is TDiodeSpec)"/>
              <Case Expression="TDiodeSpec(ComponentSpec).AmperageRatingVT">
                <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
                  <Exit Condition="AmperageRating &lt;&gt; TDiodeSpec(ComponentSpec).AmperageRating"/>
                </On>
                 <On Select="TValueType.Error, TValueType.ErrorByTemplate">
                   <Exit/>
                 </On>
              </Case>
            </On>
            <On Select="TValueType.Error, TValueType.ErrorByTemplate">
              <Exit/>
            </On>
          </Case>
        </Block>
        <Execute Statement="IsRanged:= False"/>
        <Case Expression="ForwardVoltageMinVT">
          <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
            <Exit Condition="not (ComponentSpec is TDiodeSpec)"/>
            <Case Expression="TDiodeSpec(ComponentSpec).ForwardVoltageVT">
              <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
                <Exit Condition="ForwardVoltageMin &gt; TDiodeSpec(ComponentSpec).ForwardVoltage"/>
                <Execute Statement="IsRanged:= True"/>
              </On>
               <On Select="TValueType.Error, TValueType.ErrorByTemplate">
                 <Exit/>
               </On>
            </Case>
          </On>
          <On Select="TValueType.Error, TValueType.ErrorByTemplate">
            <Exit/>
          </On>
        </Case>
        <Case Expression="ForwardVoltageMaxVT">
          <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
            <Exit Condition="not (ComponentSpec is TDiodeSpec)"/>
            <Case Expression="TDiodeSpec(ComponentSpec).ForwardVoltageVT">
              <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
                <Exit Condition="ForwardVoltageMax &lt; TDiodeSpec(ComponentSpec).ForwardVoltage"/>
                <Execute Statement="IsRanged:= True"/>
              </On>
               <On Select="TValueType.Error, TValueType.ErrorByTemplate">
                 <Exit/>
               </On>
            </Case>
          </On>
          <On Select="TValueType.Error, TValueType.ErrorByTemplate">
            <Exit/>
          </On>
        </Case>
        <Block Condition="not IsRanged">
          <Case Expression="ForwardVoltageVT">
            <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
              <Exit Condition="not (ComponentSpec is TDiodeSpec)"/>
              <Case Expression="TDiodeSpec(ComponentSpec).ForwardVoltageVT">
                <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
                  <Exit Condition="ForwardVoltage &lt;&gt; TDiodeSpec(ComponentSpec).ForwardVoltage"/>
                </On>
                 <On Select="TValueType.Error, TValueType.ErrorByTemplate">
                   <Exit/>
                 </On>
              </Case>
            </On>
            <On Select="TValueType.Error, TValueType.ErrorByTemplate">
              <Exit/>
            </On>
          </Case>
        </Block>
<!-->->-->
        <Execute Statement="Result:= True"/>
      </Block>
    </Function>

    <Function Identifier="TDiodeSpec.CategoryMatchScore" VirtualMethod="vmCategoryMatchScore" Type="Int64">
      <Parameters>
        <Parameter Identifier="ComponentSpec" Type="TComponentSpec"/>
      </Parameters>
      <Block>
        <Execute Statement="Result:= 0"/>

        <Exit Condition="not (ComponentSpec is TDiodeSpec)"/>

        <Case Expression="ComponentKindVT">
          <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
            <Case Expression="ComponentSpec.ComponentKindVT">
              <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
                <Exit Condition="ComponentKind &lt;&gt; ComponentSpec.ComponentKind" Result="0"/>
                <Execute Statement="Result:= Result + 1"/>
              </On>
              <On Select="TValueType.Error, TValueType.ErrorByTemplate">
                <Exit Result="0"/>
              </On>
            </Case>
          </On>
          <On Select="TValueType.Error, TValueType.ErrorByTemplate">
            <Exit Result="0"/>
          </On>
        </Case>

        <Execute Statement="Result:= Result shl 1"/>
        <Case Expression="ForwardVoltageVT">
          <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
            <Case Expression="TDiodeSpec(ComponentSpec).ForwardVoltageVT">
              <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
                <Exit Condition="ForwardVoltage &lt;&gt; TDiodeSpec(ComponentSpec).ForwardVoltage" Result="0"/>
                <Execute Statement="Result:= Result + 1"/>
              </On>
              <On Select="TValueType.Error, TValueType.ErrorByTemplate">
                <Exit Result="0"/>
              </On>
            </Case>
          </On>
          <On Select="TValueType.Error, TValueType.ErrorByTemplate">
            <Exit Result="0"/>
          </On>
        </Case>

        <Execute Statement="Result:= Result shl 1"/>
        <Case Expression="AmperageRatingVT">
          <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
            <Case Expression="TDiodeSpec(ComponentSpec).AmperageRatingVT">
              <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
                <Exit Condition="AmperageRating &lt;&gt; TDiodeSpec(ComponentSpec).AmperageRating" Result="0"/>
                <Execute Statement="Result:= Result + 1"/>
              </On>
              <On Select="TValueType.Error, TValueType.ErrorByTemplate">
                <Exit Result="0"/>
              </On>
            </Case>
          </On>
          <On Select="TValueType.Error, TValueType.ErrorByTemplate">
            <Exit Result="0"/>
          </On>
        </Case>

        <Execute Statement="Result:= Result shl 1"/>
        <Case Expression="FootprintVT">
          <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
            <Case Expression="ComponentSpec.FootprintVT">
              <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
                <Exit Condition="Footprint &lt;&gt; ComponentSpec.Footprint" Result="0"/>
                <Execute Statement="Result:= Result + 1"/>
              </On>
              <On Select="TValueType.Error, TValueType.ErrorByTemplate">
                <Exit Result="0"/>
              </On>
            </Case>
          </On>
          <On Select="TValueType.Error, TValueType.ErrorByTemplate">
            <Exit Result="0"/>
          </On>
        </Case>

        <Execute Statement="Result:= Result shl 1"/>
        <Case Expression="ReverseVoltageRatingVT">
          <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
            <Case Expression="TDiodeSpec(ComponentSpec).ReverseVoltageRatingVT">
              <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
                <Exit Condition="ReverseVoltageRating &lt;&gt; TDiodeSpec(ComponentSpec).ReverseVoltageRating" Result="0"/>
                <Execute Statement="Result:= Result + 1"/>
              </On>
              <On Select="TValueType.Error, TValueType.ErrorByTemplate">
                <Exit Result="0"/>
              </On>
            </Case>
          </On>
          <On Select="TValueType.Error, TValueType.ErrorByTemplate">
            <Exit Result="0"/>
          </On>
        </Case>

        <Execute Statement="Result:= Result shl 1"/>
        <Case Expression="PartNumberVT">
          <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
            <Case Expression="ComponentSpec.PartNumberVT">
              <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
                <Exit Condition="not SameText(PartNumber, ComponentSpec.PartNumber)" Result="0"/>
                <Execute Statement="Result:= Result + 1"/>
              </On>
              <On Select="TValueType.Error, TValueType.ErrorByTemplate">
                <Exit Result="0"/>
              </On>
            </Case>
          </On>
          <On Select="TValueType.Error, TValueType.ErrorByTemplate">
            <Exit Result="0"/>
          </On>
        </Case>

        <Execute Statement="Result:= Result shl 1"/>
        <Case Expression="ManufacturerVT">
          <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
            <Case Expression="ComponentSpec.ManufacturerVT">
              <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
                <Exit Condition="not SameText(Manufacturer, ComponentSpec.Manufacturer)" Result="0"/>
                <Execute Statement="Result:= Result + 1"/>
              </On>
              <On Select="TValueType.Error, TValueType.ErrorByTemplate">
                <Exit Result="0"/>
              </On>
            </Case>
          </On>
          <On Select="TValueType.Error, TValueType.ErrorByTemplate">
            <Exit Result="0"/>
          </On>
        </Case>
      </Block>
    </Function>

    <Procedure Identifier="TDiodeSpec.HandleField" VirtualMethod="vmHandleField">
      <Parameters>
        <Parameter Identifier="CustomField" Type="TCustomField"/>
        <Parameter Identifier="Name" Type="string"/>
        <Parameter Identifier="Value" Type="string"/>
        <Parameter Identifier="Clear" Type="Boolean"/>
      </Parameters>
      <Variables>
        <Variable Identifier="LocValue" Type="Int64"/>
      </Variables>
      <Block>
        <Case Expression="CustomField" Optimalisation="integermapping">
          <!--<-<TComponentSpec.HandleField-->
          <On Select="TCustomField.ReverseVoltageRating">
            <Choose>
              <When Expression="Clear">
                <Execute Statement="ReverseVoltageRatingVT:= TValueType.Cleared"/>
                <Execute Statement="ReverseVoltageRating:= -1"/>
              </When>
              <When Expression="DiodeReverseVoltageRatingConv.StrToIntValue(Value, LocValue)">
                <Execute Statement="ReverseVoltageRatingVT:= TValueType.Specified"/>
                <Execute Statement="ReverseVoltageRating:= LocValue"/>
              </When>
              <Otherwise>
                <Execute Statement="ReverseVoltageRatingVT:= TValueType.Error"/>
                <Execute Statement="ErrorReverseVoltageRating:= Value"/>
              </Otherwise>
            </Choose>
          </On>
          <On Select="TCustomField.ReverseVoltageRatingMin">
            <Choose>
              <When Expression="Clear">
                <Execute Statement="ReverseVoltageRatingMinVT:= TValueType.Cleared"/>
                <Execute Statement="ReverseVoltageRatingMin:= -1"/>
              </When>
              <When Expression="DiodeReverseVoltageRatingConv.StrToIntValue(Value, LocValue)">
                <Execute Statement="ReverseVoltageRatingMinVT:= TValueType.Specified"/>
                <Execute Statement="ReverseVoltageRatingMin:= LocValue"/>
              </When>
              <Otherwise>
                <Execute Statement="ReverseVoltageRatingMinVT:= TValueType.Error"/>
                <Execute Statement="ErrorReverseVoltageRatingMin:= Value"/>
              </Otherwise>
            </Choose>
          </On>
          <On Select="TCustomField.ReverseVoltageRatingMax">
            <Choose>
              <When Expression="Clear">
                <Execute Statement="ReverseVoltageRatingMaxVT:= TValueType.Cleared"/>
                <Execute Statement="ReverseVoltageRatingMax:= -1"/>
              </When>
              <When Expression="DiodeReverseVoltageRatingConv.StrToIntValue(Value, LocValue)">
                <Execute Statement="ReverseVoltageRatingMaxVT:= TValueType.Specified"/>
                <Execute Statement="ReverseVoltageRatingMax:= LocValue"/>
              </When>
              <Otherwise>
                <Execute Statement="ReverseVoltageRatingMaxVT:= TValueType.Error"/>
                <Execute Statement="ErrorReverseVoltageRatingMax:= Value"/>
              </Otherwise>
            </Choose>
          </On>
          <On Select="TCustomField.AmperageRating">
            <Choose>
              <When Expression="Clear">
                <Execute Statement="AmperageRatingVT:= TValueType.Cleared"/>
                <Execute Statement="AmperageRating:= -1"/>
              </When>
              <When Expression="DiodeAmperageRatingConv.StrToIntValue(Value, LocValue)">
                <Execute Statement="AmperageRatingVT:= TValueType.Specified"/>
                <Execute Statement="AmperageRating:= LocValue"/>
              </When>
              <Otherwise>
                <Execute Statement="AmperageRatingVT:= TValueType.Error"/>
                <Execute Statement="ErrorAmperageRating:= Value"/>
              </Otherwise>
            </Choose>
          </On>
          <On Select="TCustomField.AmperageRatingMin">
            <Choose>
              <When Expression="Clear">
                <Execute Statement="AmperageRatingMinVT:= TValueType.Cleared"/>
                <Execute Statement="AmperageRatingMin:= -1"/>
              </When>
              <When Expression="DiodeAmperageRatingConv.StrToIntValue(Value, LocValue)">
                <Execute Statement="AmperageRatingMinVT:= TValueType.Specified"/>
                <Execute Statement="AmperageRatingMin:= LocValue"/>
              </When>
              <Otherwise>
                <Execute Statement="AmperageRatingMinVT:= TValueType.Error"/>
                <Execute Statement="ErrorAmperageRatingMin:= Value"/>
              </Otherwise>
            </Choose>
          </On>
          <On Select="TCustomField.AmperageRatingMax">
            <Choose>
              <When Expression="Clear">
                <Execute Statement="AmperageRatingMaxVT:= TValueType.Cleared"/>
                <Execute Statement="AmperageRatingMax:= -1"/>
              </When>
              <When Expression="DiodeAmperageRatingConv.StrToIntValue(Value, LocValue)">
                <Execute Statement="AmperageRatingMaxVT:= TValueType.Specified"/>
                <Execute Statement="AmperageRatingMax:= LocValue"/>
              </When>
              <Otherwise>
                <Execute Statement="AmperageRatingMaxVT:= TValueType.Error"/>
                <Execute Statement="ErrorAmperageRatingMax:= Value"/>
              </Otherwise>
            </Choose>
          </On>
          <On Select="TCustomField.ForwardVoltage">
            <Choose>
              <When Expression="Clear">
                <Execute Statement="ForwardVoltageVT:= TValueType.Cleared"/>
                <Execute Statement="ForwardVoltage:= -1"/>
              </When>
              <When Expression="DiodeForwardVoltageConv.StrToIntValue(Value, LocValue)">
                <Execute Statement="ForwardVoltageVT:= TValueType.Specified"/>
                <Execute Statement="ForwardVoltage:= LocValue"/>
              </When>
              <Otherwise>
                <Execute Statement="ForwardVoltageVT:= TValueType.Error"/>
                <Execute Statement="ErrorForwardVoltage:= Value"/>
              </Otherwise>
            </Choose>
          </On>
          <On Select="TCustomField.ForwardVoltageMin">
            <Choose>
              <When Expression="Clear">
                <Execute Statement="ForwardVoltageMinVT:= TValueType.Cleared"/>
                <Execute Statement="ForwardVoltageMin:= -1"/>
              </When>
              <When Expression="DiodeForwardVoltageConv.StrToIntValue(Value, LocValue)">
                <Execute Statement="ForwardVoltageMinVT:= TValueType.Specified"/>
                <Execute Statement="ForwardVoltageMin:= LocValue"/>
              </When>
              <Otherwise>
                <Execute Statement="ForwardVoltageMinVT:= TValueType.Error"/>
                <Execute Statement="ErrorForwardVoltageMin:= Value"/>
              </Otherwise>
            </Choose>
          </On>
          <On Select="TCustomField.ForwardVoltageMax">
            <Choose>
              <When Expression="Clear">
                <Execute Statement="ForwardVoltageMaxVT:= TValueType.Cleared"/>
                <Execute Statement="ForwardVoltageMax:= -1"/>
              </When>
              <When Expression="DiodeForwardVoltageConv.StrToIntValue(Value, LocValue)">
                <Execute Statement="ForwardVoltageMaxVT:= TValueType.Specified"/>
                <Execute Statement="ForwardVoltageMax:= LocValue"/>
              </When>
              <Otherwise>
                <Execute Statement="ForwardVoltageMaxVT:= TValueType.Error"/>
                <Execute Statement="ErrorForwardVoltageMax:= Value"/>
              </Otherwise>
            </Choose>
          </On>
<!-->->-->
          <Otherwise>
            <Execute Statement="inherited HandleField(CustomField, Name, Value, Clear)"/>
          </Otherwise>
        </Case>
      </Block>
    </Procedure>


    <Procedure Identifier="TDiodeSpec.GetSpecificationValues">
      <Parameters>
        <Parameter Identifier="FormatType" Type="TSpecFormatType"/>
        <Parameter Identifier="Value" Type="string" Direction="Output"/>
        <Parameter Identifier="ReverseVoltageRating" Type="string" Direction="Output"/>
        <Parameter Identifier="AmperageRating" Type="string" Direction="Output"/>
        <Parameter Identifier="ForwardVoltage" Type="string" Direction="Output"/>
        <Parameter Identifier="Footprint" Type="string" Direction="Output"/>
        <Parameter Identifier="PartNumberModel" Type="string" Direction="Output"/>
        <Parameter Identifier="InternalPartNumber" Type="string" Direction="Output"/>
        <Parameter Identifier="ComponentKind" Type="string" Direction="Output"/>
      </Parameters>
      <Block>
        <Variable Identifier="Compact" Type="Boolean" Init="FormatType &lt;&gt; TSpecFormatType.Name"/>
        <Variable Identifier="Range" Type="string"/>
        <!--<-<TComponentSpec.GetSpecificationValues-->
        <Case Expression="ReverseVoltageRatingMinVT">
          <On Select="TValueType.Unspecified, TValueType.Cleared, TValueType.ClearedByTemplate">
            <Execute Statement="Range:= ''"/>
          </On>
          <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
            <Execute Statement="Range:= DiodeReverseVoltageRatingConv.IntValueToStr(Self.ReverseVoltageRatingMin, Compact) + '..'"/>
          </On>
          <On Select="TValueType.Error, TValueType.ErrorByTemplate">
            <Execute Statement="Range:= '!' + ErrorReverseVoltageRatingMin + '!' + '..'"/>
          </On>
        </Case>
        <Case Expression="ReverseVoltageRatingMaxVT">
          <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
            <Execute Statement="Range:= '..'" Condition="IsEmptyString(Range)"/>
            <Execute Statement="Range:= Range + DiodeReverseVoltageRatingConv.IntValueToStr(Self.ReverseVoltageRatingMax, Compact)"/>
          </On>
          <On Select="TValueType.Error, TValueType.ErrorByTemplate">
            <Execute Statement="Range:= '..'" Condition="IsEmptyString(Range)"/>
            <Execute Statement="Range:= Range + '!' + ErrorReverseVoltageRatingMax + '!' "/>
          </On>
        </Case>
        <Execute Statement="Range:= '{' + Range + '}'" Condition="IsNonEmptyString(Range)"/>
        <Case Expression="ReverseVoltageRatingVT">
          <On Select="TValueType.Unspecified, TValueType.Cleared, TValueType.ClearedByTemplate">
            <Execute Statement="ReverseVoltageRating:= Range"/>
          </On>
          <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
            <Execute Statement="ReverseVoltageRating:= DiodeReverseVoltageRatingConv.IntValueToStr(Self.ReverseVoltageRating, Compact) + Range"/>
          </On>
          <On Select="TValueType.Error, TValueType.ErrorByTemplate">
            <Execute Statement="ReverseVoltageRating:= '!' + ErrorReverseVoltageRating + '!' + Range"/>
          </On>
        </Case>
        <Case Expression="AmperageRatingMinVT">
          <On Select="TValueType.Unspecified, TValueType.Cleared, TValueType.ClearedByTemplate">
            <Execute Statement="Range:= ''"/>
          </On>
          <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
            <Execute Statement="Range:= DiodeAmperageRatingConv.IntValueToStr(Self.AmperageRatingMin, Compact) + '..'"/>
          </On>
          <On Select="TValueType.Error, TValueType.ErrorByTemplate">
            <Execute Statement="Range:= '!' + ErrorAmperageRatingMin + '!' + '..'"/>
          </On>
        </Case>
        <Case Expression="AmperageRatingMaxVT">
          <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
            <Execute Statement="Range:= '..'" Condition="IsEmptyString(Range)"/>
            <Execute Statement="Range:= Range + DiodeAmperageRatingConv.IntValueToStr(Self.AmperageRatingMax, Compact)"/>
          </On>
          <On Select="TValueType.Error, TValueType.ErrorByTemplate">
            <Execute Statement="Range:= '..'" Condition="IsEmptyString(Range)"/>
            <Execute Statement="Range:= Range + '!' + ErrorAmperageRatingMax + '!' "/>
          </On>
        </Case>
        <Execute Statement="Range:= '{' + Range + '}'" Condition="IsNonEmptyString(Range)"/>
        <Case Expression="AmperageRatingVT">
          <On Select="TValueType.Unspecified, TValueType.Cleared, TValueType.ClearedByTemplate">
            <Execute Statement="AmperageRating:= Range"/>
          </On>
          <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
            <Execute Statement="AmperageRating:= DiodeAmperageRatingConv.IntValueToStr(Self.AmperageRating, Compact) + Range"/>
          </On>
          <On Select="TValueType.Error, TValueType.ErrorByTemplate">
            <Execute Statement="AmperageRating:= '!' + ErrorAmperageRating + '!' + Range"/>
          </On>
        </Case>
        <Case Expression="ForwardVoltageMinVT">
          <On Select="TValueType.Unspecified, TValueType.Cleared, TValueType.ClearedByTemplate">
            <Execute Statement="Range:= ''"/>
          </On>
          <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
            <Execute Statement="Range:= DiodeForwardVoltageConv.IntValueToStr(Self.ForwardVoltageMin, Compact) + '..'"/>
          </On>
          <On Select="TValueType.Error, TValueType.ErrorByTemplate">
            <Execute Statement="Range:= '!' + ErrorForwardVoltageMin + '!' + '..'"/>
          </On>
        </Case>
        <Case Expression="ForwardVoltageMaxVT">
          <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
            <Execute Statement="Range:= '..'" Condition="IsEmptyString(Range)"/>
            <Execute Statement="Range:= Range + DiodeForwardVoltageConv.IntValueToStr(Self.ForwardVoltageMax, Compact)"/>
          </On>
          <On Select="TValueType.Error, TValueType.ErrorByTemplate">
            <Execute Statement="Range:= '..'" Condition="IsEmptyString(Range)"/>
            <Execute Statement="Range:= Range + '!' + ErrorForwardVoltageMax + '!' "/>
          </On>
        </Case>
        <Execute Statement="Range:= '{' + Range + '}'" Condition="IsNonEmptyString(Range)"/>
        <Case Expression="ForwardVoltageVT">
          <On Select="TValueType.Unspecified, TValueType.Cleared, TValueType.ClearedByTemplate">
            <Execute Statement="ForwardVoltage:= Range"/>
          </On>
          <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
            <Execute Statement="ForwardVoltage:= DiodeForwardVoltageConv.IntValueToStr(Self.ForwardVoltage, Compact) + Range"/>
          </On>
          <On Select="TValueType.Error, TValueType.ErrorByTemplate">
            <Execute Statement="ForwardVoltage:= '!' + ErrorForwardVoltage + '!' + Range"/>
          </On>
        </Case>
<!-->->-->
        <Execute Statement="inherited GetSpecificationValues(FormatType, Value, Footprint, PartNumberModel, InternalPartNumber, ComponentKind)"/>
      </Block>
    </Procedure>

    <Function Identifier="TDiodeSpec.SpecificationAsString" VirtualMethod="vmSpecificationAsString" Type="string">
      <Parameters>
        <Parameter Identifier="FormatType" Type="TSpecFormatType"/>
        <Parameter Identifier="ReportContext" Type="TSpecReportContext"/>
      </Parameters>
      <Variables>
        <Variable Identifier="Value" Type="string"/>
        <Variable Identifier="ReverseVoltageRating" Type="string"/>
        <Variable Identifier="AmperageRating" Type="string"/>
        <Variable Identifier="ForwardVoltage" Type="string"/>
        <Variable Identifier="Footprint" Type="string"/>
        <Variable Identifier="PartNumberModel" Type="string"/>
        <Variable Identifier="InternalPartNumber" Type="string"/>
        <Variable Identifier="ComponentKind" Type="string"/>
      </Variables>
      <Block>
        <Execute Statement="GetSpecificationValues(FormatType, Value, ReverseVoltageRating, AmperageRating, ForwardVoltage, Footprint, PartNumberModel, InternalPartNumber, ComponentKind)"/>
        <Case Expression="FormatType" Optimalisation="integermapping">
          <On Select="TSpecFormatType.Fixed">
            <Variable Identifier="ColumnManager" Type="TTextColumnManager" Init="ReportContext.ColumnManager"/>
            <Variable Identifier="ColumnOffset" Type="Integer" Init="ReportContext.ColumnOffset"/>
            <Execute Statement="Value:= Value + ' '" Condition="IsNonEmptyString(Value)"/>
            <Execute Statement="ReverseVoltageRating:= ReverseVoltageRating + ' '" Condition="IsNonEmptyString(ReverseVoltageRating)"/>
            <Execute Statement="AmperageRating:= AmperageRating + ' '" Condition="IsNonEmptyString(AmperageRating)"/>
            <Execute Statement="ForwardVoltage:= ForwardVoltage + ' '" Condition="IsNonEmptyString(ForwardVoltage)"/>
            <Execute Statement="Footprint:= Footprint + ' '" Condition="IsNonEmptyString(Footprint)"/>
            <Execute Statement="PartNumberModel:= PartNumberModel + ' '" Condition="IsNonEmptyString(PartNumberModel)"/>
            <Execute Statement="InternalPartNumber:= InternalPartNumber + ' '" Condition="IsNonEmptyString(InternalPartNumber)"/>
            <Choose>
              <When Expression="ReportContext.Measure">
                <Execute Statement="ColumnManager.RequestColumnWidth(ColumnOffset + TDiodeSpecColumns.Value, 2, Length(Value))"/>
                <Execute Statement="ColumnManager.RequestColumnWidth(ColumnOffset + TDiodeSpecColumns.ReverseVoltageRating, 1, Length(ReverseVoltageRating))"/>
                <Execute Statement="ColumnManager.RequestColumnWidth(ColumnOffset + TDiodeSpecColumns.SpanB2, 1, 0)"/>
                <Execute Statement="ColumnManager.RequestColumnWidth(ColumnOffset + TDiodeSpecColumns.AmperageRating, 1, Length(AmperageRating))"/>
                <Execute Statement="ColumnManager.RequestColumnWidth(ColumnOffset + TDiodeSpecColumns.ForwardVoltage, 1, Length(ForwardVoltage))"/>
                <Execute Statement="ColumnManager.RequestColumnWidth(ColumnOffset + TDiodeSpecColumns.FootPrint, 1, Length(Footprint))"/>
                <Execute Statement="ColumnManager.RequestColumnWidth(ColumnOffset + TDiodeSpecColumns.PartNumberModel, 1, Length(PartNumberModel))"/>
                <Execute Statement="ColumnManager.RequestColumnWidth(ColumnOffset + TDiodeSpecColumns.InternalPartNumber, 1, Length(InternalPartNumber))"/>
                <Execute Statement="Result:= ''"/>
              </When>
              <Otherwise>
                <Execute Statement="Result:= Format('%-*s%*s%*s%*s%*s%-*s%-*s%-*s',
                         ColumnManager.GetColumnWidth(ColumnOffset + TDiodeSpecColumns.Value, 2), Value,
                         ColumnManager.GetColumnWidth(ColumnOffset + TDiodeSpecColumns.ReverseVoltageRating, 1), ReverseVoltageRating,
                         ColumnManager.GetColumnWidth(ColumnOffset + TDiodeSpecColumns.SpanB2, 1), '',
                         ColumnManager.GetColumnWidth(ColumnOffset + TDiodeSpecColumns.AmperageRating, 1), AmperageRating,
                         ColumnManager.GetColumnWidth(ColumnOffset + TDiodeSpecColumns.ForwardVoltage, 1), ForwardVoltage,
                         ColumnManager.GetColumnWidth(ColumnOffset + TDiodeSpecColumns.FootPrint, 1), Footprint,
                         ColumnManager.GetColumnWidth(ColumnOffset + TDiodeSpecColumns.PartNumberModel, 1), PartNumberModel,
                         ColumnManager.GetColumnWidth(ColumnOffset + TDiodeSpecColumns.InternalPartNumber, 1), InternalPartNumber)"/>
              </Otherwise>
            </Choose>
          </On>
          <On Select="TSpecFormatType.Description">
            <Execute Statement="Result:= ConcatExt(' ', True, Value, ReverseVoltageRating, AmperageRating, ForwardVoltage, Footprint, PartNumberModel, InternalPartNumber, ComponentKind)"/>
          </On>
          <On Select="TSpecFormatType.Name">
            <Execute Statement="Result:= Value"/>
          </On>
        </Case>
      </Block>
    </Function>

    <Procedure Identifier="TDiodeSpec.ApplyTemplate" VirtualMethod="vmApplyTemplate">
      <Variables>
        <Variable Identifier="locTemplate" Type="TDiodeSpec"/>
      </Variables>
      <Block>
        <Exit Condition="not Assigned(Template)"/>
        <ConditionalBlock Expression="Template is TDiodeSpec">
          <Execute Statement="locTemplate:= TDiodeSpec(Template)"/>
          <!--<-<TComponentSpec.ApplyTemplate-->
          <Case Expression="ReverseVoltageRatingVT">
            <On Select="TValueType.Unspecified, TValueType.ClearedByTemplate, TValueType.SpecifiedByTemplate, TValueType.ErrorByTemplate">
              <Case Expression="ReverseVoltageRatingMinVT">
                <On Select="TValueType.Unspecified, TValueType.ClearedByTemplate, TValueType.SpecifiedByTemplate, TValueType.ErrorByTemplate">
                  <Case Expression="ReverseVoltageRatingMaxVT">
                    <On Select="TValueType.Unspecified, TValueType.ClearedByTemplate, TValueType.SpecifiedByTemplate, TValueType.ErrorByTemplate">
                      <Case Expression="locTemplate.ReverseVoltageRatingVT">
                        <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
                          <Execute Statement="ReverseVoltageRating:= locTemplate.ReverseVoltageRating"/>
                          <Execute Statement="ReverseVoltageRatingVT:= TValueType.SpecifiedByTemplate"/>
                        </On>
                        <On Select="TValueType.Error, TValueType.ErrorByTemplate">
                          <Execute Statement="ReverseVoltageRating:= locTemplate.ErrorReverseVoltageRating"/>
                          <Execute Statement="ReverseVoltageRatingVT:= TValueType.ErrorByTemplate"/>
                        </On>
                      </Case>
                      <Case Expression="locTemplate.ReverseVoltageRatingMinVT">
                        <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
                          <Execute Statement="ReverseVoltageRatingMin:= locTemplate.ReverseVoltageRatingMin"/>
                          <Execute Statement="ReverseVoltageRatingMinVT:= TValueType.SpecifiedByTemplate"/>
                        </On>
                        <On Select="TValueType.Error, TValueType.ErrorByTemplate">
                          <Execute Statement="ReverseVoltageRatingMin:= locTemplate.ErrorReverseVoltageRatingMin"/>
                          <Execute Statement="ReverseVoltageRatingMinVT:= TValueType.ErrorByTemplate"/>
                        </On>
                      </Case>
                      <Case Expression="locTemplate.ReverseVoltageRatingMaxVT">
                        <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
                          <Execute Statement="ReverseVoltageRatingMax:= locTemplate.ReverseVoltageRatingMax"/>
                          <Execute Statement="ReverseVoltageRatingMaxVT:= TValueType.SpecifiedByTemplate"/>
                        </On>
                        <On Select="TValueType.Error, TValueType.ErrorByTemplate">
                          <Execute Statement="ReverseVoltageRatingMax:= locTemplate.ErrorReverseVoltageRatingMax"/>
                          <Execute Statement="ReverseVoltageRatingMaxVT:= TValueType.ErrorByTemplate"/>
                        </On>
                      </Case>
                    </On>
                  </Case>
                </On>
              </Case>
            </On>
          </Case>
          <Case Expression="AmperageRatingVT">
            <On Select="TValueType.Unspecified, TValueType.ClearedByTemplate, TValueType.SpecifiedByTemplate, TValueType.ErrorByTemplate">
              <Case Expression="AmperageRatingMinVT">
                <On Select="TValueType.Unspecified, TValueType.ClearedByTemplate, TValueType.SpecifiedByTemplate, TValueType.ErrorByTemplate">
                  <Case Expression="AmperageRatingMaxVT">
                    <On Select="TValueType.Unspecified, TValueType.ClearedByTemplate, TValueType.SpecifiedByTemplate, TValueType.ErrorByTemplate">
                      <Case Expression="locTemplate.AmperageRatingVT">
                        <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
                          <Execute Statement="AmperageRating:= locTemplate.AmperageRating"/>
                          <Execute Statement="AmperageRatingVT:= TValueType.SpecifiedByTemplate"/>
                        </On>
                        <On Select="TValueType.Error, TValueType.ErrorByTemplate">
                          <Execute Statement="AmperageRating:= locTemplate.ErrorAmperageRating"/>
                          <Execute Statement="AmperageRatingVT:= TValueType.ErrorByTemplate"/>
                        </On>
                      </Case>
                      <Case Expression="locTemplate.AmperageRatingMinVT">
                        <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
                          <Execute Statement="AmperageRatingMin:= locTemplate.AmperageRatingMin"/>
                          <Execute Statement="AmperageRatingMinVT:= TValueType.SpecifiedByTemplate"/>
                        </On>
                        <On Select="TValueType.Error, TValueType.ErrorByTemplate">
                          <Execute Statement="AmperageRatingMin:= locTemplate.ErrorAmperageRatingMin"/>
                          <Execute Statement="AmperageRatingMinVT:= TValueType.ErrorByTemplate"/>
                        </On>
                      </Case>
                      <Case Expression="locTemplate.AmperageRatingMaxVT">
                        <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
                          <Execute Statement="AmperageRatingMax:= locTemplate.AmperageRatingMax"/>
                          <Execute Statement="AmperageRatingMaxVT:= TValueType.SpecifiedByTemplate"/>
                        </On>
                        <On Select="TValueType.Error, TValueType.ErrorByTemplate">
                          <Execute Statement="AmperageRatingMax:= locTemplate.ErrorAmperageRatingMax"/>
                          <Execute Statement="AmperageRatingMaxVT:= TValueType.ErrorByTemplate"/>
                        </On>
                      </Case>
                    </On>
                  </Case>
                </On>
              </Case>
            </On>
          </Case>
          <Case Expression="ForwardVoltageVT">
            <On Select="TValueType.Unspecified, TValueType.ClearedByTemplate, TValueType.SpecifiedByTemplate, TValueType.ErrorByTemplate">
              <Case Expression="ForwardVoltageMinVT">
                <On Select="TValueType.Unspecified, TValueType.ClearedByTemplate, TValueType.SpecifiedByTemplate, TValueType.ErrorByTemplate">
                  <Case Expression="ForwardVoltageMaxVT">
                    <On Select="TValueType.Unspecified, TValueType.ClearedByTemplate, TValueType.SpecifiedByTemplate, TValueType.ErrorByTemplate">
                      <Case Expression="locTemplate.ForwardVoltageVT">
                        <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
                          <Execute Statement="ForwardVoltage:= locTemplate.ForwardVoltage"/>
                          <Execute Statement="ForwardVoltageVT:= TValueType.SpecifiedByTemplate"/>
                        </On>
                        <On Select="TValueType.Error, TValueType.ErrorByTemplate">
                          <Execute Statement="ForwardVoltage:= locTemplate.ErrorForwardVoltage"/>
                          <Execute Statement="ForwardVoltageVT:= TValueType.ErrorByTemplate"/>
                        </On>
                      </Case>
                      <Case Expression="locTemplate.ForwardVoltageMinVT">
                        <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
                          <Execute Statement="ForwardVoltageMin:= locTemplate.ForwardVoltageMin"/>
                          <Execute Statement="ForwardVoltageMinVT:= TValueType.SpecifiedByTemplate"/>
                        </On>
                        <On Select="TValueType.Error, TValueType.ErrorByTemplate">
                          <Execute Statement="ForwardVoltageMin:= locTemplate.ErrorForwardVoltageMin"/>
                          <Execute Statement="ForwardVoltageMinVT:= TValueType.ErrorByTemplate"/>
                        </On>
                      </Case>
                      <Case Expression="locTemplate.ForwardVoltageMaxVT">
                        <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
                          <Execute Statement="ForwardVoltageMax:= locTemplate.ForwardVoltageMax"/>
                          <Execute Statement="ForwardVoltageMaxVT:= TValueType.SpecifiedByTemplate"/>
                        </On>
                        <On Select="TValueType.Error, TValueType.ErrorByTemplate">
                          <Execute Statement="ForwardVoltageMax:= locTemplate.ErrorForwardVoltageMax"/>
                          <Execute Statement="ForwardVoltageMaxVT:= TValueType.ErrorByTemplate"/>
                        </On>
                      </Case>
                    </On>
                  </Case>
                </On>
              </Case>
            </On>
          </Case>
<!-->->-->
        </ConditionalBlock>
        <Execute Statement="inherited ApplyTemplate"/>
      </Block>
    </Procedure>

    <Constructor Identifier="TDiodeCategory.Create">
      <Block>
      </Block>
    </Constructor>

    <Function Identifier="TDiodeCategory.IndexSearchSpecifications" VirtualMethod="vmIndexSearchSpecifications" Type="Boolean">
      <Parameters>
        <Parameter Identifier="ComponentSpec" Type="TComponentSpec"/>
        <Parameter Identifier="Specifications" Type="TSpecificationLink" Direction="Output"/>
      </Parameters>
      <Block>
        <Execute Statement="Result:= False"/>
      </Block>
    </Function>

    <Procedure Identifier="TDiodeCategory.LoadTemplatesFromIniFile" VirtualMethod="vmLoadTemplatesFromIniFile">
      <Parameters>
        <Parameter Identifier="IniFile" Type="TCustomIniFile"/>
      </Parameters>
      <Constants>
        <Constant Identifier="sSectionDiodeTHT" Type="string" Expression="'Template.Diode.THT'"/>
      </Constants>
      <Block>
        <ConditionalBlock Expression="IniFile.SectionExists(sSectionDiodeTHT)">
          <Execute Statement="TemplateTHT:= TDiodeSpec.Create"/>
          <Execute Statement="TemplateTHT.LoadFromIniFileSection(IniFile, sSectionDiodeTHT)"/>
        </ConditionalBlock>
      </Block>
    </Procedure>

    <Function Identifier="TDiodeCategory.CreateSpecification" VirtualMethod="vmCreateSpecification" Type="TComponentSpec">
      <Block>
        <Execute Statement="Result:= TDiodeSpec.Create"/>
      </Block>
    </Function>

    <Function Identifier="TDiodeCategory.IsValidSpecification" VirtualMethod="vmIsValidSpecification" Type="Boolean">
      <Parameters>
        <Parameter Identifier="Specification" Type="TComponentSpec"/>
      </Parameters>
      <Block>
        <Case Expression="Specification.ComponentKindVT">
          <On Select="TValueType.Specified, TValueType.SpecifiedByTemplate"/>
          <Otherwise>
            <Exit Result="False"/>
          </Otherwise>
        </Case>
        <Case Expression="Specification.ComponentKind">
          <On Select="TComponentKind.Diode, TComponentKind.SchottkyDiode"/>
          <Otherwise>
            <Exit Result="False"/>
          </Otherwise>
        </Case>
        <Execute Statement="Result:= True"/>
      </Block>
    </Function>

    <Function Identifier="TDiodeCategory.GetTemplate" VirtualMethod="vmGetTemplate" Type="TComponentSpec">
      <Parameters>
        <Parameter Identifier="Specification" Type="TComponentSpec"/>
      </Parameters>
      <Block>
        <Execute Statement="Result:= ObjNil"/>
        <Case Expression="Specification.ComponentKind">
          <On Select="TComponentKind.Diode">
            <Execute Statement="Result:= TemplateTHT"/>
          </On>
        </Case>
      </Block>
    </Function>

    <Function Identifier="TDiodeCategory.CompareSpecifications" Type="Integer" VirtualMethod="vmCompareSpecifications">
      <Parameters>
        <Parameter Identifier="A" Type="TDiodeSpec"/>
        <Parameter Identifier="B" Type="TDiodeSpec"/>
      </Parameters>
      <Block>
        <Execute Statement="Result:= A.ComponentKind - B.ComponentKind"/>
        <Exit Condition="Result &lt;&gt; 0"/>
        <!--<-<TComponentSpec.CompareSpecifications-->
        <Execute Statement="Result:= CompareStateValueRange(A.ID, A.ReverseVoltageRating, A.ReverseVoltageRatingVT, A.ReverseVoltageRatingMin, A.ReverseVoltageRatingMinVT, A.ReverseVoltageRatingMax, A.ReverseVoltageRatingMaxVT, B.ID, B.ReverseVoltageRating, B.ReverseVoltageRatingVT, B.ReverseVoltageRatingMin, B.ReverseVoltageRatingMinVT, B.ReverseVoltageRatingMax, B.ReverseVoltageRatingMaxVT)"/>
        <Exit Condition="Result &lt;&gt; 0"/>
        <Execute Statement="Result:= CompareStateValueRange(A.ID, A.AmperageRating, A.AmperageRatingVT, A.AmperageRatingMin, A.AmperageRatingMinVT, A.AmperageRatingMax, A.AmperageRatingMaxVT, B.ID, B.AmperageRating, B.AmperageRatingVT, B.AmperageRatingMin, B.AmperageRatingMinVT, B.AmperageRatingMax, B.AmperageRatingMaxVT)"/>
        <Exit Condition="Result &lt;&gt; 0"/>
        <Execute Statement="Result:= CompareStateValueRange(A.ID, A.ForwardVoltage, A.ForwardVoltageVT, A.ForwardVoltageMin, A.ForwardVoltageMinVT, A.ForwardVoltageMax, A.ForwardVoltageMaxVT, B.ID, B.ForwardVoltage, B.ForwardVoltageVT, B.ForwardVoltageMin, B.ForwardVoltageMinVT, B.ForwardVoltageMax, B.ForwardVoltageMaxVT)"/>
        <Exit Condition="Result &lt;&gt; 0"/>
<!-->->-->
        <Execute Statement="Result:= inherited CompareSpecifications(A, B)"/>
      </Block>
    </Function>

    <Function Identifier="TDiodeCategory.CanExtractTemplateFromIniFile" VirtualMethod="vmCanExtractTemplateFromIniFile" Type="Boolean">
      <Parameters>
        <Parameter Identifier="IniFile" Type="TCustomIniFile"/>
        <Parameter Identifier="ComponentSpec" Type="TComponentSpec" Direction="Output"/>
      </Parameters>
      <Constants>
        <Constant Identifier="cDiode" Type="string" Expression="'Diode'"/>
      </Constants>
      <Block>
        <Execute Statement="Result:= IniFile.SectionExists(cDiode)"/>
        <Block Condition="Result">
          <Execute Statement="ComponentSpec:= TDiodeSpec.Create"/>
          <Execute Statement="ComponentSpec.LoadFromIniFileSection(IniFile, cDiode)"/>
        </Block>
      </Block>
    </Function>

  </Procedures>

</pkg:Library>