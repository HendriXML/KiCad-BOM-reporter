<?xml version="1.0" encoding="utf-8" standalone="no"?>
<pkg:Library
  xsi:schemaLocation="urn:schemas-www-wisware.nl-scriptingpackages ../XmlSchemas.Common.XmlScript/XMLScripting.Packages.xsd"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="urn:schemas-www-wisware.nl-xmlscripting"
  xmlns:ado="urn:schemas-www-wisware.nl-xmlscripting-ado"
  xmlns:fil="urn:schemas-www-wisware.nl-xmlscripting-filemanagement"
  xmlns:fwl="urn:schemas-www-wisware.nl-xmlscripting-windowsfirewall"
  xmlns:inx="urn:schemas-www-wisware.nl-xmlscripting-index"
  xmlns:lil="urn:schemas-www-wisware.nl-xmlscripting-linkedlist"
  xmlns:msx="urn:schemas-www-wisware.nl-xmlscripting-xml"
  xmlns:pkg="urn:schemas-www-wisware.nl-scriptingpackages"
  xmlns:reg="urn:schemas-www-wisware.nl-xmlscripting-registry"
  xmlns:rep="urn:schemas-www-wisware.nl-xmlscripting-report"
  xmlns:sts="urn:schemas-www-wisware.nl-xmlscripting-showstatus"
  xmlns:sys="urn:schemas-www-wisware.nl-xmlscripting"
  xmlns:syu="urn:schemas-www-wisware.nl-xmlscripting-sysutils"
  >
  <Uses>
    <Use Identifier="ElectronicUtils"/>
    <Use Identifier="BomClasses"/>
    <Use Identifier="BomStrings"/>
  </Uses>
  <Type>
    <Enumeration Identifier="TInductorTechnology" Elements="ctUnspecified, ctElectrolytic, ctCeramic"/>

    <DataClass Identifier="TInductorSpec" Inherit="TComponentSpec" DefaultConstructor="createonly">
      <VirtualMethod Identifier="vmHandleField" Override="true"/>
      <VirtualMethod Identifier="vmCheckComponentKind" Override="true"/>
      <VirtualMethod Identifier="vmSpecificationAsString" Override="true"/>
      <VirtualMethod Identifier="vmApplyTemplate" Override="true"/>
      <VirtualMethod Identifier="vmDoesMatchSpecification" Override="true"/>
      <Field Identifier="InductanceVT" Type="TValueType"/>
      <Field Identifier="Inductance" Type="Int64"/>
      <Field Identifier="ErrorInductance" Type="string"/>
      <Field Identifier="ToleranceVT" Type="TValueType"/>
      <Field Identifier="Tolerance" Type="Int64"/>
      <Field Identifier="ErrorTolerance" Type="string"/>
      <Field Identifier="AmperageRatingVT" Type="TValueType"/>
      <Field Identifier="AmperageRating" Type="Int64"/>
      <Field Identifier="ErrorAmperageRating" Type="string"/>
    </DataClass>

    <DataClass Identifier="TInductanceSpecificationIndex" Inherit="TSpecificationIndex" DefaultConstructor="createandsetfields">
      <VirtualMethod Identifier="vmGetKey" Override="true"/>
    </DataClass>

    <DataClass Identifier="TInductorCategory" Inherit="TComponentCategory">
      <VirtualMethod Identifier="vmCreateSpecification" Override="true"/>
      <VirtualMethod Identifier="vmIsValidSpecification" Override="true"/>
      <VirtualMethod Identifier="vmIndexSearchSpecifications" Override="true"/>
      <VirtualMethod Identifier="vmCompareSpecifications" Override="true"/>
      <VirtualMethod Identifier="vmLoadTemplatesFromIniFile" Override="true"/>
      <VirtualMethod Identifier="vmGetTemplate" Override="true"/>
      <VirtualMethod Identifier="vmCanExtractTemplateFromIniFile" Override="true"/>
      <Field Identifier="InductanceSpecificationIndex" Type="TInductanceSpecificationIndex"/>
      <Field Identifier="TemplateInductorTHT" Type="TInductorSpec"/>
    </DataClass>
  </Type>

  <Variables>
    <Variable Identifier="InductorTechnologyIndex" Type="TMappingCaseInSensitiveUnicodeStringToInt64" Init="TMappingCaseInSensitiveUnicodeStringToInt64.Create"/>
  </Variables>

  <Procedures>
    <Procedure Identifier="InitInductorTechnologyIndex">
      <Parameters>
        <Parameter Identifier="Index" Type="TAbstractBoxedValueMappingHashIndex"/>
      </Parameters>
      <Block>
        <inx:Index.MapValue Index="Index" Key="''" Value="TInductorTechnology.ctUnspecified"/>
        <inx:Index.MapValue Index="Index" Key="'electrolytic'" Value="TInductorTechnology.ctElectrolytic"/>
        <inx:Index.MapValue Index="Index" Key="'ceramic'" Value="TInductorTechnology.ctCeramic"/>
      </Block>
    </Procedure>

    <Function Identifier="TInductorSpec.CheckComponentKind" VirtualMethod="vmCheckComponentKind" Type="Boolean">
      <Parameters>
        <Parameter Identifier="ComponentKind" Type="TComponentKind"/>
      </Parameters>
      <Block>
        <Execute Statement="Result:= False"/>
        <Case Expression="ComponentKind" Optimalisation="integermapping">
          <On Select="TComponentKind.ckInductor">
            <Execute Statement="Result:= True"/>
          </On>
        </Case>
      </Block>
    </Function>

    <Function Identifier="TInductorSpec.DoesMatchSpecification" VirtualMethod="vmDoesMatchSpecification" Type="Boolean">
      <Parameters>
        <Parameter Identifier="ComponentSpec" Type="TComponentSpec"/>
      </Parameters>
      <Block>
        <Execute Statement="Result:= False"/>
        <Exit Condition="not inherited DoesMatchSpecification(ComponentSpec)"/>
        <Case Expression="InductanceVT">
          <On Select="TValueType.vtSpecifiedByTemplate, TValueType.vtSpecified">
            <Exit Condition="not (ComponentSpec is TInductorSpec)"/>
            <Case Expression="TInductorSpec(ComponentSpec).InductanceVT">
              <On Select="TValueType.vtSpecifiedByTemplate, TValueType.vtSpecified">
                <Exit Condition="Inductance &lt;&gt; TInductorSpec(ComponentSpec).Inductance"/>
              </On>
              <Otherwise>
                <Exit/>
              </Otherwise>
            </Case>
          </On>
          <On Select="TValueType.vtError, TValueType.vtErrorByTemplate">
            <Exit/>
          </On>
        </Case>
        <Case Expression="AmperageRatingVT">
          <On Select="TValueType.vtSpecifiedByTemplate, TValueType.vtSpecified">
            <Exit Condition="not (ComponentSpec is TInductorSpec)"/>
            <Case Expression="TInductorSpec(ComponentSpec).AmperageRatingVT">
              <On Select="TValueType.vtSpecifiedByTemplate, TValueType.vtSpecified">
                <Exit Condition="AmperageRating &gt; TInductorSpec(ComponentSpec).AmperageRating"/>
              </On>
              <Otherwise>
                <Exit/>
              </Otherwise>
            </Case>
          </On>
          <On Select="TValueType.vtError, TValueType.vtErrorByTemplate">
            <Exit/>
          </On>
        </Case>
        <Case Expression="ToleranceVT">
          <On Select="TValueType.vtSpecifiedByTemplate, TValueType.vtSpecified">
            <Exit Condition="not (ComponentSpec is TInductorSpec)"/>
            <Case Expression="TInductorSpec(ComponentSpec).ToleranceVT">
              <On Select="TValueType.vtSpecifiedByTemplate, TValueType.vtSpecified">
                <Exit Condition="Tolerance &lt; TInductorSpec(ComponentSpec).Tolerance"/>
              </On>
              <Otherwise>
                <Exit/>
              </Otherwise>
            </Case>
          </On>
          <On Select="TValueType.vtError, TValueType.vtErrorByTemplate">
            <Exit/>
          </On>
        </Case>
        <Execute Statement="Result:= True"/>
      </Block>
    </Function>

    <Procedure Identifier="TInductorSpec.HandleField" VirtualMethod="vmHandleField">
      <Parameters>
        <Parameter Identifier="CustomField" Type="TCustomField"/>
        <Parameter Identifier="Name" Type="string"/>
        <Parameter Identifier="Value" Type="string"/>
      </Parameters>
      <Variables>
        <Variable Identifier="LocInductance" Type="Int64"/>
        <Variable Identifier="LocAmperageRating" Type="Int64"/>
        <Variable Identifier="LocTolerance" Type="Int64"/>
        <Variable Identifier="LocTechnology" Type="TInductorTechnology"/>
        <Variable Identifier="Found" Type="Boolean"/>
      </Variables>
      <Block>
        <Case Expression="CustomField" Optimalisation="integermapping">
          <On Select="TCustomField.cfValue">
            <Choose>
              <When Expression="StrToFemtoHenry(Value, LocInductance)">
                <Execute Statement="InductanceVT:= TValueType.vtSpecified"/>
                <Execute Statement="Inductance:= LocInductance"/>
                <rep:Reporter.Information Text="Format('Inductance: %s', FormatFemtoHenry(LocInductance))" Condition="IsVerbose"/>
              </When>
              <Otherwise>
                <rep:Reporter.Error Text="Format('Inductance could not be safely parsed from value: %s', Value)" Condition="IsVerbose"/>
                <Execute Statement="InductanceVT:= TValueType.vtError"/>
                <Execute Statement="ErrorInductance:= Value"/>
              </Otherwise>
            </Choose>
          </On>
          <On Select="TCustomField.cfTolerance">
            <Choose>
              <When Expression="StrToMicroPerc(Value, LocTolerance)">
                <rep:Reporter.Information Text="Format('Tolerance: %s', FormatMicroPercentage(LocTolerance))" Condition="IsVerbose"/>
                <Execute Statement="ToleranceVT:= TValueType.vtSpecified"/>
                <Execute Statement="Tolerance:= LocTolerance"/>
              </When>
              <Otherwise>
                <rep:Reporter.Error Text="Format('Tolerance could not be safely parsed from value: %s', Value)" Condition="IsVerbose"/>
                <Execute Statement="ToleranceVT:= TValueType.vtError"/>
                <Execute Statement="ErrorTolerance:= Value"/>
              </Otherwise>
            </Choose>
          </On>
          <On Select="TCustomField.cfAmperageRating">
            <Choose>
              <When Expression="StrToMicroAmps(Value, LocAmperageRating)">
                <rep:Reporter.Information Text="Format('AmperageRating: %s', FormatMicroAmp(LocAmperageRating))" Condition="IsVerbose"/>
                <Execute Statement="AmperageRatingVT:= TValueType.vtSpecified"/>
                <Execute Statement="AmperageRating:= LocAmperageRating"/>
              </When>
              <Otherwise>
                <rep:Reporter.Error Text="Format('AmperageRating could not be safely parsed from value: %s', Value)" Condition="IsVerbose"/>
                <Execute Statement="AmperageRatingVT:= TValueType.vtError"/>
                <Execute Statement="ErrorAmperageRating:= Value"/>
              </Otherwise>
            </Choose>
          </On>
          <Otherwise>
            <Execute Statement="inherited HandleField(CustomField, Name, Value)"/>
          </Otherwise>
        </Case>
      </Block>
    </Procedure>

    <Procedure Identifier="TInductorSpec.ApplyTemplate" VirtualMethod="vmApplyTemplate">
      <Variables>
        <Variable Identifier="locTemplate" Type="TInductorSpec"/>
      </Variables>
      <Block>
        <Exit Condition="not Assigned(Template)"/>
        <ConditionalBlock Expression="Template is TInductorSpec">
          <Execute Statement="locTemplate:= TInductorSpec(Template)"/>
          <Case Expression="AmperageRatingVT" Optimalisation="integermapping">
            <On Select="TValueType.vtUnspecified, TValueType.vtClearedByTemplate, TValueType.vtSpecifiedByTemplate, TValueType.vtErrorByTemplate">
              <Case Expression="locTemplate.AmperageRatingVT" Optimalisation="integermapping">
                <On Select="TValueType.vtSpecifiedByTemplate, TValueType.vtSpecified">
                  <Execute Statement="AmperageRating:= locTemplate.AmperageRating"/>
                  <Execute Statement="AmperageRatingVT:= TValueType.vtSpecifiedByTemplate"/>
                </On>
                <On Select="TValueType.vtError, TValueType.vtErrorByTemplate">
                  <Execute Statement="ErrorAmperageRating:= locTemplate.ErrorAmperageRating"/>
                  <Execute Statement="AmperageRatingVT:= TValueType.vtErrorByTemplate"/>
                </On>
              </Case>
            </On>
          </Case>
          <Case Expression="ToleranceVT" Optimalisation="integermapping">
            <On Select="TValueType.vtUnspecified, TValueType.vtClearedByTemplate, TValueType.vtSpecifiedByTemplate, TValueType.vtErrorByTemplate">
              <Case Expression="locTemplate.ToleranceVT" Optimalisation="integermapping">
                <On Select="TValueType.vtSpecifiedByTemplate, TValueType.vtSpecified">
                  <Execute Statement="Tolerance:= locTemplate.Tolerance"/>
                  <Execute Statement="ToleranceVT:= TValueType.vtSpecifiedByTemplate"/>
                </On>
                <On Select="TValueType.vtError, TValueType.vtErrorByTemplate">
                  <Execute Statement="ErrorTolerance:= locTemplate.ErrorTolerance"/>
                  <Execute Statement="ToleranceVT:= TValueType.vtErrorByTemplate"/>
                </On>
              </Case>
            </On>
          </Case>
        </ConditionalBlock>
        <Execute Statement="inherited ApplyTemplate"/>
      </Block>
    </Procedure>

    <Function Identifier="TInductorSpec.SpecificationAsString" VirtualMethod="vmSpecificationAsString" Type="string">
      <Parameters>
        <Parameter Identifier="FormatType" Type="TSpecFormatType"/>
      </Parameters>
      <Variables>
        <Variable Identifier="LocInductance" Type="string" Init="''"/>
        <Variable Identifier="LocAmperageRating" Type="string" Init="''"/>
        <Variable Identifier="LocTolerance" Type="string" Init="''"/>
        <Variable Identifier="LocComponent" Type="string" Init="''"/>
      </Variables>
      <Block>
        <Case Expression="InductanceVT">
          <On Select="TValueType.vtUnspecified, TValueType.vtCleared, TValueType.vtClearedByTemplate">
            <Execute Statement="LocInductance:= '?F'"/>
          </On>
          <On Select="TValueType.vtSpecifiedByTemplate, TValueType.vtSpecified">
            <Execute Statement="LocInductance:= FormatFemtoHenry(Inductance)"/>
          </On>
          <On Select="TValueType.vtError, TValueType.vtErrorByTemplate">
            <Execute Statement="LocInductance:= '{cap:' + ErrorInductance + '}'"/>
          </On>
        </Case>

        <Case Expression="AmperageRatingVT">
          <On Select="TValueType.vtSpecifiedByTemplate, TValueType.vtSpecified">
            <Execute Statement="LocAmperageRating:= FormatMicroAmp(AmperageRating)"/>
          </On>
          <On Select="TValueType.vtError, TValueType.vtErrorByTemplate">
            <Execute Statement="LocAmperageRating:= '{amp:' + ErrorAmperageRating + '}'"/>
          </On>
        </Case>

        <Case Expression="ToleranceVT">
          <On Select="TValueType.vtSpecifiedByTemplate, TValueType.vtSpecified">
            <Execute Statement="LocTolerance:= FormatMicroPercentage(Tolerance)"/>
          </On>
          <On Select="TValueType.vtError, TValueType.vtErrorByTemplate">
            <Execute Statement="LocTolerance:= '{tol:' + ErrorTolerance + '}'"/>
          </On>
        </Case>

        <Case Expression="FormatType" Optimalisation="integermapping">
          <On Select="TSpecFormatType.Fixed">
            <Execute Statement="Result:= Format('%6s %6s %3s', LocInductance, LocAmperageRating, LocTolerance)"/>
            <Execute Statement="Result:= Format('%-50s %-10s', Result, inherited SpecificationAsString(TSpecFormatType.Compressed))"/>
          </On>
          <On Select="TSpecFormatType.Compressed">
            <Execute Statement="Result:= ConcatExt(' ', True, LocInductance, LocAmperageRating, LocTolerance, inherited SpecificationAsString(TSpecFormatType.Compressed))"/>
          </On>
        </Case>
      </Block>
    </Function>

    <Function Identifier="TInductanceSpecificationIndex.GetKey" VirtualMethod="vmGetKey" Type="Boolean">
      <Parameters>
        <Parameter Identifier="ComponentSpec" Type="TInductorSpec"/>
        <Parameter Identifier="Key" Direction="Output"/>
      </Parameters>
      <Block>
        <Execute Statement="Result:= False"/>
        <Case Expression="ComponentSpec.InductanceVT" Optimalisation="integermapping">
          <On Select="TValueType.vtSpecifiedByTemplate, TValueType.vtSpecified">
            <Execute Statement="Result:= True"/>
            <Execute Statement="Key:= ComponentSpec.Inductance"/>
          </On>
        </Case>
      </Block>
    </Function>

    <Constructor Identifier="TInductorCategory.Create">
      <Block>
        <Execute Statement="InductanceSpecificationIndex:= TInductanceSpecificationIndex.Create(TMappingInt64ToObject.Create)"/>
      </Block>
    </Constructor>

    <Function Identifier="TInductorCategory.IndexSearchSpecifications" VirtualMethod="vmIndexSearchSpecifications" Type="Boolean">
      <Parameters>
        <Parameter Identifier="ComponentSpec" Type="TComponentSpec"/>
        <Parameter Identifier="Specifications" Type="TSpecificationLink" Direction="Output"/>
      </Parameters>
      <Block>
        <Execute Statement="Result:= False"/>
        <Choose>
          <When Expression="InductanceSpecificationIndex.GetLinks(ComponentSpec, FComponentSpecHead, Specifications)">
            <Execute Statement="Result:= True"/>
          </When>
        </Choose>
      </Block>
    </Function>

    <Function Identifier="TInductorCategory.CreateSpecification" VirtualMethod="vmCreateSpecification" Type="TComponentSpec">
      <Block>
        <Execute Statement="Result:= TInductorSpec.Create"/>
      </Block>
    </Function>
    
    <Function Identifier="TInductorCategory.IsValidSpecification" VirtualMethod="vmIsValidSpecification" Type="Boolean">
      <Parameters>
        <Parameter Identifier="Specification" Type="TComponentSpec"/>
      </Parameters>
      <Block>
        <Case Expression="Specification.ComponentKindVT">
          <On Select="TValueType.vtSpecified, TValueType.vtSpecifiedByTemplate"/>
          <Otherwise>
            <Exit Result="False"/>
          </Otherwise>
        </Case>
        <Case Expression="Specification.ComponentKind">
          <On Select="TComponentKind.ckInductor"/>
          <Otherwise>
            <Exit Result="False"/>
          </Otherwise>
        </Case>
        <Execute Statement="Result:= True"/>
      </Block>
    </Function>


    <Function Identifier="TInductorCategory.CompareSpecifications" Type="Integer" VirtualMethod="vmCompareSpecifications">
      <Parameters>
        <Parameter Identifier="A" Type="TInductorSpec"/>
        <Parameter Identifier="B" Type="TInductorSpec"/>
      </Parameters>
      <Block>
        <Execute Statement="Result:= A.ComponentKind - B.ComponentKind"/>
        <Exit Condition="Result &lt;&gt; 0"/>
        <Execute Statement="Result:= CompareStateValue(A.ID, A.Inductance, A.InductanceVT, B.ID, B.Inductance, B.InductanceVT)"/>
        <Exit Condition="Result &lt;&gt; 0"/>
        <Execute Statement="Result:= CompareStateValue(A.ID, A.AmperageRating, A.AmperageRatingVT, B.ID, B.AmperageRating, B.AmperageRatingVT)"/>
        <Exit Condition="Result &lt;&gt; 0"/>
        <Execute Statement="Result:= CompareStateValue(A.ID, A.Tolerance, A.ToleranceVT, B.ID, B.Tolerance, B.ToleranceVT)"/>
        <Exit Condition="Result &lt;&gt; 0"/>
        <Execute Statement="Result:= inherited CompareSpecifications(A, B)"/>
      </Block>
    </Function>

    <Procedure Identifier="TInductorCategory.LoadTemplatesFromIniFile" VirtualMethod="vmLoadTemplatesFromIniFile">
      <Parameters>
        <Parameter Identifier="IniFile" Type="TCustomIniFile"/>
      </Parameters>
      <Constants>
        <Constant Identifier="sSectionInductorTHT" Type="string" Expression="'Template.Inductor.THT'"/>
      </Constants>
      <Block>
        <ConditionalBlock Expression="IniFile.SectionExists(sSectionInductorTHT)">
          <Execute Statement="TemplateInductorTHT:= TInductorSpec.Create"/>
          <Execute Statement="TemplateInductorTHT.LoadFromIniFileSection(IniFile, sSectionInductorTHT)"/>
        </ConditionalBlock>
      </Block>
    </Procedure>

    <Function Identifier="TInductorCategory.GetTemplate" VirtualMethod="vmGetTemplate" Type="TComponentSpec">
      <Parameters>
        <Parameter Identifier="Specification" Type="TComponentSpec"/>
      </Parameters>
      <Block>
        <Execute Statement="Result:= ObjNil"/>
        <Case Expression="Specification.ComponentKind">
          <On Select="TComponentKind.ckInductor">
            <Execute Statement="Result:= TemplateInductorTHT"/>
          </On>
        </Case>
      </Block>
    </Function>

    <Function Identifier="TInductorCategory.CanExtractTemplateFromIniFile" VirtualMethod="vmCanExtractTemplateFromIniFile" Type="Boolean">
      <Parameters>
        <Parameter Identifier="IniFile" Type="TCustomIniFile"/>
        <Parameter Identifier="ComponentSpec" Type="TComponentSpec" Direction="Output"/>
      </Parameters>
      <Constants>
        <Constant Identifier="cInductorSection" Type="string" Expression="'Inductor'"/>
      </Constants>
      <Block>
        <Execute Statement="Result:= IniFile.SectionExists(cInductorSection)"/>
        <Block Condition="Result">
          <Execute Statement="ComponentSpec:= TInductorSpec.Create"/>
          <Execute Statement="ComponentSpec.LoadFromIniFileSection(IniFile, cInductorSection)"/>
        </Block>
      </Block>
    </Function>

  </Procedures>

  <Initialization>
    <Execute Statement="InitInductorTechnologyIndex(InductorTechnologyIndex)"/>
  </Initialization>

  <Finalization>
    <Free Identifier="InductorTechnologyIndex"/>
  </Finalization>

</pkg:Library>