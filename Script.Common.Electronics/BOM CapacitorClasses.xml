<?xml version="1.0" encoding="utf-8" standalone="no"?>
<pkg:Library
  xsi:schemaLocation="urn:schemas-www-wisware.nl-scriptingpackages ../XmlSchemas.Common.XmlScript/XMLScripting.Packages.xsd"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="urn:schemas-www-wisware.nl-xmlscripting"
  xmlns:ado="urn:schemas-www-wisware.nl-xmlscripting-ado"
  xmlns:fil="urn:schemas-www-wisware.nl-xmlscripting-filemanagement"
  xmlns:fwl="urn:schemas-www-wisware.nl-xmlscripting-windowsfirewall"
  xmlns:inx="urn:schemas-www-wisware.nl-xmlscripting-index"
  xmlns:lil="urn:schemas-www-wisware.nl-xmlscripting-linkedlist"
  xmlns:msx="urn:schemas-www-wisware.nl-xmlscripting-xml"
  xmlns:pkg="urn:schemas-www-wisware.nl-scriptingpackages"
  xmlns:reg="urn:schemas-www-wisware.nl-xmlscripting-registry"
  xmlns:rep="urn:schemas-www-wisware.nl-xmlscripting-report"
  xmlns:sts="urn:schemas-www-wisware.nl-xmlscripting-showstatus"
  xmlns:sys="urn:schemas-www-wisware.nl-xmlscripting"
  xmlns:syu="urn:schemas-www-wisware.nl-xmlscripting-sysutils"
  >
  <Uses>
    <Use Identifier="ElectronicUtils"/>
    <Use Identifier="BomClasses"/>
    <Use Identifier="BomStrings"/>
  </Uses>
  <Type>
    <Enumeration Identifier="TCapacitorTechnology" Elements="ctUnspecified, ctElectrolytic, ctCeramic"/>

    <DataClass Identifier="TCapacitorSpec" Inherit="TComponentSpec" DefaultConstructor="createonly">
      <VirtualMethod Identifier="vmHandleField" Override="true"/>
      <VirtualMethod Identifier="vmCheckComponentKind" Override="true"/>
      <VirtualMethod Identifier="vmSpecificationAsString" Override="true"/>
      <VirtualMethod Identifier="vmApplyTemplate" Override="true"/>
      <VirtualMethod Identifier="vmDoesMatchSpecification" Override="true"/>
      <Field Identifier="CapacitanceVT" Type="TValueType"/>
      <Field Identifier="Capacitance" Type="Int64"/>
      <Field Identifier="ErrorCapacitance" Type="string"/>
      <Field Identifier="ToleranceVT" Type="TValueType"/>
      <Field Identifier="Tolerance" Type="Int64"/>
      <Field Identifier="ErrorTolerance" Type="string"/>
      <Field Identifier="VoltageRatingVT" Type="TValueType"/>
      <Field Identifier="VoltageRating" Type="Int64"/>
      <Field Identifier="ErrorVoltageRating" Type="string"/>
      <Field Identifier="TechnologyVT" Type="TValueType"/>
      <Field Identifier="Technology" Type="TCapacitorTechnology"/>
      <Field Identifier="ErrorTechnology" Type="string"/>
    </DataClass>

    <DataClass Identifier="TCapacitanceSpecificationIndex" Inherit="TSpecificationIndex" DefaultConstructor="createandsetfields">
      <VirtualMethod Identifier="vmGetKey" Override="true"/>
    </DataClass>

    <DataClass Identifier="TCapacitorCategory" Inherit="TComponentCategory">
      <VirtualMethod Identifier="vmCreateSpecification" Override="true"/>
      <VirtualMethod Identifier="vmIsValidSpecification" Override="true"/>
      <VirtualMethod Identifier="vmIndexSearchSpecifications" Override="true"/>
      <VirtualMethod Identifier="vmCompareSpecifications" Override="true"/>
      <VirtualMethod Identifier="vmLoadTemplatesFromIniFile" Override="true"/>
      <VirtualMethod Identifier="vmGetTemplate" Override="true"/>
      <VirtualMethod Identifier="vmCanExtractTemplateFromIniFile" Override="true"/>
      <Field Identifier="CapacitanceSpecificationIndex" Type="TCapacitanceSpecificationIndex"/>
      <Field Identifier="TemplateCapacitorTHT" Type="TCapacitorSpec"/>
      <Field Identifier="TemplatePolarisedCapacitorTHT" Type="TCapacitorSpec"/>
    </DataClass>
  </Type>

  <Variables>
    <Variable Identifier="CapacitorTechnologyIndex" Type="TMappingCaseInSensitiveUnicodeStringToInt64" Init="TMappingCaseInSensitiveUnicodeStringToInt64.Create"/>
  </Variables>

  <Procedures>
    <Procedure Identifier="InitCapacitorTechnologyIndex">
      <Parameters>
        <Parameter Identifier="Index" Type="TAbstractBoxedValueMappingHashIndex"/>
      </Parameters>
      <Block>
        <inx:Index.MapValue Index="Index" Key="''" Value="TCapacitorTechnology.ctUnspecified"/>
        <inx:Index.MapValue Index="Index" Key="'electrolytic'" Value="TCapacitorTechnology.ctElectrolytic"/>
        <inx:Index.MapValue Index="Index" Key="'ceramic'" Value="TCapacitorTechnology.ctCeramic"/>
      </Block>
    </Procedure>

    <Function Identifier="CapacitorTechnologyAsString" Type="string">
      <Parameters>
        <Parameter Identifier="Technology" Type="TCapacitorTechnology"/>
      </Parameters>
      <Block>
        <Execute Statement="Result:= ''"/>
        <Case Expression="Technology">
          <On Select="TCapacitorTechnology.ctUnspecified">
          </On>
          <On Select="TCapacitorTechnology.ctElectrolytic">
            <Execute Statement="Result:= sCapacitorTechnologyElectrolytic"/>
          </On>
          <On Select="TCapacitorTechnology.ctCeramic">
            <Execute Statement="Result:= sCapacitorTechnologyCeramic"/>
          </On>
          <Otherwise>
            <Execute Statement="Result:= sCapacitorTechnologyMissing"/>
          </Otherwise>
        </Case>
      </Block>
    </Function>

    <Function Identifier="TCapacitorSpec.CheckComponentKind" VirtualMethod="vmCheckComponentKind" Type="Boolean">
      <Parameters>
        <Parameter Identifier="ComponentKind" Type="TComponentKind"/>
      </Parameters>
      <Block>
        <Execute Statement="Result:= False"/>
        <Case Expression="ComponentKind" Optimalisation="integermapping">
          <On Select="TComponentKind.ckCapacitor, TComponentKind.ckPolarisedCapacitor">
            <Execute Statement="Result:= True"/>
          </On>
        </Case>
      </Block>
    </Function>

    <Function Identifier="TCapacitorSpec.DoesMatchSpecification" VirtualMethod="vmDoesMatchSpecification" Type="Boolean">
      <Parameters>
        <Parameter Identifier="ComponentSpec" Type="TComponentSpec"/>
      </Parameters>
      <Block>
        <Execute Statement="Result:= False"/>
        <Exit Condition="not inherited DoesMatchSpecification(ComponentSpec)"/>
        <Case Expression="CapacitanceVT">
          <On Select="TValueType.vtSpecifiedByTemplate, TValueType.vtSpecified">
            <Exit Condition="not (ComponentSpec is TCapacitorSpec)"/>
            <Case Expression="TCapacitorSpec(ComponentSpec).CapacitanceVT">
              <On Select="TValueType.vtSpecifiedByTemplate, TValueType.vtSpecified">
                <Exit Condition="Capacitance &lt;&gt; TCapacitorSpec(ComponentSpec).Capacitance"/>
              </On>
              <Otherwise>
                <Exit/>
              </Otherwise>
            </Case>
          </On>
          <On Select="TValueType.vtError, TValueType.vtErrorByTemplate">
            <Exit/>
          </On>
        </Case>
        <Case Expression="VoltageRatingVT">
          <On Select="TValueType.vtSpecifiedByTemplate, TValueType.vtSpecified">
            <Exit Condition="not (ComponentSpec is TCapacitorSpec)"/>
            <Case Expression="TCapacitorSpec(ComponentSpec).VoltageRatingVT">
              <On Select="TValueType.vtSpecifiedByTemplate, TValueType.vtSpecified">
                <Exit Condition="VoltageRating &gt; TCapacitorSpec(ComponentSpec).VoltageRating"/>
              </On>
              <Otherwise>
                <Exit/>
              </Otherwise>
            </Case>
          </On>
          <On Select="TValueType.vtError, TValueType.vtErrorByTemplate">
            <Exit/>
          </On>
        </Case>
        <Case Expression="ToleranceVT">
          <On Select="TValueType.vtSpecifiedByTemplate, TValueType.vtSpecified">
            <Exit Condition="not (ComponentSpec is TCapacitorSpec)"/>
            <Case Expression="TCapacitorSpec(ComponentSpec).ToleranceVT">
              <On Select="TValueType.vtSpecifiedByTemplate, TValueType.vtSpecified">
                <Exit Condition="Tolerance &lt; TCapacitorSpec(ComponentSpec).Tolerance"/>
              </On>
              <Otherwise>
                <Exit/>
              </Otherwise>
            </Case>
          </On>
          <On Select="TValueType.vtError, TValueType.vtErrorByTemplate">
            <Exit/>
          </On>
        </Case>
        <Case Expression="TechnologyVT">
          <On Select="TValueType.vtSpecifiedByTemplate, TValueType.vtSpecified">
            <Exit Condition="not (ComponentSpec is TCapacitorSpec)"/>
            <Case Expression="TCapacitorSpec(ComponentSpec).TechnologyVT">
              <On Select="TValueType.vtSpecifiedByTemplate, TValueType.vtSpecified">
                <Exit Condition="Technology &lt;&gt; TCapacitorSpec(ComponentSpec).Technology"/>
              </On>
              <Otherwise>
                <Exit/>
              </Otherwise>
            </Case>
          </On>
          <On Select="TValueType.vtError, TValueType.vtErrorByTemplate">
            <Exit/>
          </On>
        </Case>
        <Execute Statement="Result:= True"/>
      </Block>
    </Function>

    <Procedure Identifier="TCapacitorSpec.HandleField" VirtualMethod="vmHandleField">
      <Parameters>
        <Parameter Identifier="CustomField" Type="TCustomField"/>
        <Parameter Identifier="Name" Type="string"/>
        <Parameter Identifier="Value" Type="string"/>
      </Parameters>
      <Variables>
        <Variable Identifier="LocCapacitance" Type="Int64"/>
        <Variable Identifier="LocVoltageRating" Type="Int64"/>
        <Variable Identifier="LocTolerance" Type="Int64"/>
        <Variable Identifier="LocTechnology" Type="TCapacitorTechnology"/>
        <Variable Identifier="Found" Type="Boolean"/>
      </Variables>
      <Block>
        <Case Expression="CustomField" Optimalisation="integermapping">
          <On Select="TCustomField.cfValue">
            <Choose>
              <When Expression="StrToFemtoFarads(Value, LocCapacitance)">
                <Execute Statement="CapacitanceVT:= TValueType.vtSpecified"/>
                <Execute Statement="Capacitance:= LocCapacitance"/>
                <rep:Reporter.Information Text="Format('Capacitance: %s', FormatFemtoFarad(LocCapacitance))" Condition="IsVerbose"/>
              </When>
              <Otherwise>
                <rep:Reporter.Error Text="Format('Capacitance could not be safely parsed from value: %s', Value)" Condition="IsVerbose"/>
                <Execute Statement="CapacitanceVT:= TValueType.vtError"/>
                <Execute Statement="ErrorCapacitance:= Value"/>
              </Otherwise>
            </Choose>
          </On>
          <On Select="TCustomField.cfTolerance">
            <Choose>
              <When Expression="StrToMicroPerc(Value, LocTolerance)">
                <rep:Reporter.Information Text="Format('Tolerance: %s', FormatMicroPercentage(LocTolerance))" Condition="IsVerbose"/>
                <Execute Statement="ToleranceVT:= TValueType.vtSpecified"/>
                <Execute Statement="Tolerance:= LocTolerance"/>
              </When>
              <Otherwise>
                <rep:Reporter.Error Text="Format('Tolerance could not be safely parsed from value: %s', Value)" Condition="IsVerbose"/>
                <Execute Statement="ToleranceVT:= TValueType.vtError"/>
                <Execute Statement="ErrorTolerance:= Value"/>
              </Otherwise>
            </Choose>
          </On>
          <On Select="TCustomField.cfVoltageRating">
            <Choose>
              <When Expression="StrToMicroVolts(Value, LocVoltageRating)">
                <rep:Reporter.Information Text="Format('VoltageRating: %s', FormatMicroVolt(LocVoltageRating))" Condition="IsVerbose"/>
                <Execute Statement="VoltageRatingVT:= TValueType.vtSpecified"/>
                <Execute Statement="VoltageRating:= LocVoltageRating"/>
              </When>
              <Otherwise>
                <rep:Reporter.Error Text="Format('VoltageRating could not be safely parsed from value: %s', Value)" Condition="IsVerbose"/>
                <Execute Statement="VoltageRatingVT:= TValueType.vtError"/>
                <Execute Statement="ErrorVoltageRating:= Value"/>
              </Otherwise>
            </Choose>
          </On>
          <On Select="TCustomField.cfTechnology">
            <inx:Index.FindValue Index="CapacitorTechnologyIndex" Key="Value" Value="LocTechnology" Found="Found" Flags="NoErrorOnNotFound" />
            <Choose>
              <When Expression="Found">
                <rep:Reporter.Information Text="Format('Capacitor technology: %d', LocTechnology)" Condition="IsVerbose"/>
                <Execute Statement="TechnologyVT:= TValueType.vtSpecified"/>
                <Execute Statement="Technology:= LocTechnology"/>
              </When>
              <Otherwise>
                <rep:Reporter.Error Text="Format('Capacitor technology could not be matched: %s', Value)" Condition="not Found"/>
                <Execute Statement="TechnologyVT:= TValueType.vtError"/>
                <Execute Statement="ErrorTechnology:= Value"/>
              </Otherwise>
            </Choose>
          </On>
          <Otherwise>
            <Execute Statement="inherited HandleField(CustomField, Name, Value)"/>
          </Otherwise>
        </Case>
      </Block>
    </Procedure>

    <Procedure Identifier="TCapacitorSpec.ApplyTemplate" VirtualMethod="vmApplyTemplate">
      <Variables>
        <Variable Identifier="locTemplate" Type="TCapacitorSpec"/>
      </Variables>
      <Block>
        <Exit Condition="not Assigned(Template)"/>
        <ConditionalBlock Expression="Template is TCapacitorSpec">
          <Execute Statement="locTemplate:= TCapacitorSpec(Template)"/>
          <Case Expression="VoltageRatingVT" Optimalisation="integermapping">
            <On Select="TValueType.vtUnspecified, TValueType.vtClearedByTemplate, TValueType.vtSpecifiedByTemplate, TValueType.vtErrorByTemplate">
              <Case Expression="locTemplate.VoltageRatingVT" Optimalisation="integermapping">
                <On Select="TValueType.vtSpecifiedByTemplate, TValueType.vtSpecified">
                  <Execute Statement="VoltageRating:= locTemplate.VoltageRating"/>
                  <Execute Statement="VoltageRatingVT:= TValueType.vtSpecifiedByTemplate"/>
                </On>
                <On Select="TValueType.vtError, TValueType.vtErrorByTemplate">
                  <Execute Statement="ErrorVoltageRating:= locTemplate.ErrorVoltageRating"/>
                  <Execute Statement="VoltageRatingVT:= TValueType.vtErrorByTemplate"/>
                </On>
              </Case>
            </On>
          </Case>
          <Case Expression="ToleranceVT" Optimalisation="integermapping">
            <On Select="TValueType.vtUnspecified, TValueType.vtClearedByTemplate, TValueType.vtSpecifiedByTemplate, TValueType.vtErrorByTemplate">
              <Case Expression="locTemplate.ToleranceVT" Optimalisation="integermapping">
                <On Select="TValueType.vtSpecifiedByTemplate, TValueType.vtSpecified">
                  <Execute Statement="Tolerance:= locTemplate.Tolerance"/>
                  <Execute Statement="ToleranceVT:= TValueType.vtSpecifiedByTemplate"/>
                </On>
                <On Select="TValueType.vtError, TValueType.vtErrorByTemplate">
                  <Execute Statement="ErrorTolerance:= locTemplate.ErrorTolerance"/>
                  <Execute Statement="ToleranceVT:= TValueType.vtErrorByTemplate"/>
                </On>
              </Case>
            </On>
          </Case>
          <Case Expression="TechnologyVT" Optimalisation="integermapping">
            <On Select="TValueType.vtUnspecified, TValueType.vtClearedByTemplate, TValueType.vtSpecifiedByTemplate, TValueType.vtErrorByTemplate">
              <Case Expression="locTemplate.TechnologyVT" Optimalisation="integermapping">
                <On Select="TValueType.vtSpecifiedByTemplate, TValueType.vtSpecified">
                  <Execute Statement="Technology:= locTemplate.Technology"/>
                  <Execute Statement="TechnologyVT:= TValueType.vtSpecifiedByTemplate"/>
                </On>
                <On Select="TValueType.vtError, TValueType.vtErrorByTemplate">
                  <Execute Statement="ErrorTechnology:= locTemplate.ErrorTechnology"/>
                  <Execute Statement="TechnologyVT:= TValueType.vtErrorByTemplate"/>
                </On>
              </Case>
            </On>
          </Case>
        </ConditionalBlock>
        <Execute Statement="inherited ApplyTemplate"/>
      </Block>
    </Procedure>

    <Procedure Identifier="TCapacitorSpec.GetSpecificationValues">
      <Parameters>
        <Parameter Identifier="Value" Type="string" Direction="Output"/>
        <Parameter Identifier="ESerie" Type="string" Direction="Output"/>
        <Parameter Identifier="VoltageRating" Type="string" Direction="Output"/>
        <Parameter Identifier="Tolerance" Type="string" Direction="Output"/>
        <Parameter Identifier="Technology" Type="string" Direction="Output"/>
        <Parameter Identifier="Footprint" Type="string" Direction="Output"/>
        <Parameter Identifier="PartNumberModel" Type="string" Direction="Output"/>
      </Parameters>
      <Block>
        <Case Expression="CapacitanceVT">
          <On Select="TValueType.vtUnspecified, TValueType.vtCleared, TValueType.vtClearedByTemplate">
            <Execute Statement="Value:= ''"/>
          </On>
          <On Select="TValueType.vtSpecifiedByTemplate, TValueType.vtSpecified">
            <Execute Statement="Value:= FormatFemtoFarad(Self.Capacitance)"/>
            <Execute Statement="ESerie:= ESerieOfValue(Self.Capacitance)"/>
          </On>
          <On Select="TValueType.vtError, TValueType.vtErrorByTemplate">
            <Execute Statement="Value:= '!' + ErrorCapacitance + '!'"/>
          </On>
        </Case>

        <Case Expression="VoltageRatingVT">
          <On Select="TValueType.vtUnspecified, TValueType.vtCleared, TValueType.vtClearedByTemplate">
            <Execute Statement="VoltageRating:= ''"/>
          </On>
          <On Select="TValueType.vtSpecifiedByTemplate, TValueType.vtSpecified">
            <Execute Statement="VoltageRating:= FormatMicroVolt(Self.VoltageRating)"/>
          </On>
          <On Select="TValueType.vtError, TValueType.vtErrorByTemplate">
            <Execute Statement="VoltageRating:= '!' + ErrorVoltageRating + '!'"/>
          </On>
        </Case>

        <Case Expression="ToleranceVT">
          <On Select="TValueType.vtUnspecified, TValueType.vtCleared, TValueType.vtClearedByTemplate">
            <Execute Statement="Tolerance:= ''"/>
          </On>
          <On Select="TValueType.vtSpecifiedByTemplate, TValueType.vtSpecified">
            <Execute Statement="Tolerance:= FormatMicroPercentage(Self.Tolerance)"/>
          </On>
          <On Select="TValueType.vtError, TValueType.vtErrorByTemplate">
            <Execute Statement="Tolerance:= '!' + ErrorTolerance + '!'"/>
          </On>
        </Case>

        <Case Expression="TechnologyVT">
          <On Select="TValueType.vtUnspecified, TValueType.vtCleared, TValueType.vtClearedByTemplate">
            <Execute Statement="Technology:= ''"/>
          </On>
          <On Select="TValueType.vtSpecifiedByTemplate, TValueType.vtSpecified">
            <Execute Statement="Technology:= CapacitorTechnologyAsString(Self.Technology)"/>
          </On>
          <On Select="TValueType.vtError, TValueType.vtErrorByTemplate">
            <Execute Statement="Technology:= '!' + ErrorTechnology + '!'"/>
          </On>
        </Case>

        <Execute Statement="inherited GetSpecificationValues(Footprint, PartNumberModel)"/>
      </Block>
    </Procedure>

    <Function Identifier="TCapacitorSpec.SpecificationAsString" VirtualMethod="vmSpecificationAsString" Type="string">
      <Parameters>
        <Parameter Identifier="FormatType" Type="TSpecFormatType"/>
        <Parameter Identifier="ReportContext" Type="TSpecReportContext"/>
      </Parameters>
      <Variables>
        <Variable Identifier="Value" Type="string" Init="''"/>
        <Variable Identifier="ESerie" Type="string" Init="''"/>
        <Variable Identifier="VoltageRating" Type="string" Init="''"/>
        <Variable Identifier="Tolerance" Type="string" Init="''"/>
        <Variable Identifier="Technology" Type="string" Init="''"/>
        <Variable Identifier="Footprint" Type="string" Init="''"/>
        <Variable Identifier="PartNumberModel" Type="string" Init="''"/>
      </Variables>
      <Block>
        <Execute Statement="GetSpecificationValues(Value, ESerie, VoltageRating, Tolerance, Technology, Footprint, PartNumberModel)"/>
        <Case Expression="FormatType" Optimalisation="integermapping">
          <On Select="TSpecFormatType.Fixed">
            <Variable Identifier="ColumnManager" Type="TTextColumnManager" Init="ReportContext.ColumnManager"/>
            <Variable Identifier="ColumnOffset" Type="Integer" Init="ReportContext.ColumnOffset"/>
            <Execute Statement="Value:= Value + ' '" Condition="Value &lt;&gt; ''"/>
            <Execute Statement="ESerie:= ESerie + ' '" Condition="ESerie &lt;&gt; ''"/>
            <Execute Statement="VoltageRating:= VoltageRating + ' '" Condition="VoltageRating &lt;&gt; ''"/>
            <Execute Statement="Tolerance:= Tolerance + ' '" Condition="Tolerance &lt;&gt; ''"/>
            <Execute Statement="Technology:= Technology + ' '" Condition="Technology &lt;&gt; ''"/>
            <Execute Statement="Footprint:= Footprint + ' '" Condition="Footprint &lt;&gt; ''"/>
            <Execute Statement="PartNumberModel:= PartNumberModel + ' '" Condition="PartNumberModel &lt;&gt; ''"/>
            <Choose>
              <When Expression="ReportContext.Measure">
                <Execute Statement="ColumnManager.RequestColumnWidth(ColumnOffset + TCapacitorSpecColumns.Value, 1, Length(Value))"/>
                <Execute Statement="ColumnManager.RequestColumnWidth(ColumnOffset + TCapacitorSpecColumns.ESerie, 1, Length(ESerie))"/>
                <Execute Statement="ColumnManager.RequestColumnWidth(ColumnOffset + TCapacitorSpecColumns.VoltageRating, 1, Length(VoltageRating))"/>
                <Execute Statement="ColumnManager.RequestColumnWidth(ColumnOffset + TCapacitorSpecColumns.Tolerance, 1, Length(Tolerance))"/>
                <Execute Statement="ColumnManager.RequestColumnWidth(ColumnOffset + TCapacitorSpecColumns.Technology, 1, Length(Technology))"/>
                <Execute Statement="ColumnManager.RequestColumnWidth(ColumnOffset + TCapacitorSpecColumns.FootPrint, 1, Length(Footprint))"/>
                <Execute Statement="ColumnManager.RequestColumnWidth(ColumnOffset + TCapacitorSpecColumns.PartNumberModel, 1, Length(PartNumberModel))"/>
                <Execute Statement="Result:= ''"/>
              </When>
              <Otherwise>
                <Execute Statement="Result:= Format('%*s%*s%*s%*s%-*s%-*s%-*s',
                         ColumnManager.GetColumnWidth(ColumnOffset + TCapacitorSpecColumns.Value, 1), Value,
                         ColumnManager.GetColumnWidth(ColumnOffset + TCapacitorSpecColumns.ESerie, 1), ESerie,
                         ColumnManager.GetColumnWidth(ColumnOffset + TCapacitorSpecColumns.VoltageRating, 1), VoltageRating,
                         ColumnManager.GetColumnWidth(ColumnOffset + TCapacitorSpecColumns.Tolerance, 1), Tolerance,
                         ColumnManager.GetColumnWidth(ColumnOffset + TCapacitorSpecColumns.Technology, 1), Technology,
                         ColumnManager.GetColumnWidth(ColumnOffset + TCapacitorSpecColumns.FootPrint, 1), Footprint,
                         ColumnManager.GetColumnWidth(ColumnOffset + TCapacitorSpecColumns.PartNumberModel, 1), PartNumberModel)"/>
              </Otherwise>
            </Choose>
          </On>
          <On Select="TSpecFormatType.Compressed">
            <Execute Statement="Result:= ConcatExt(' ', True, Value, Tolerance, VoltageRating, Technology, Footprint, PartNumberModel)"/>
          </On>
        </Case>
      </Block>
    </Function>

    <Function Identifier="TCapacitanceSpecificationIndex.GetKey" VirtualMethod="vmGetKey" Type="Boolean">
      <Parameters>
        <Parameter Identifier="ComponentSpec" Type="TCapacitorSpec"/>
        <Parameter Identifier="Key" Direction="Output"/>
      </Parameters>
      <Block>
        <Execute Statement="Result:= False"/>
        <Case Expression="ComponentSpec.CapacitanceVT" Optimalisation="integermapping">
          <On Select="TValueType.vtSpecifiedByTemplate, TValueType.vtSpecified">
            <Execute Statement="Result:= True"/>
            <Execute Statement="Key:= ComponentSpec.Capacitance"/>
          </On>
        </Case>
      </Block>
    </Function>

    <Constructor Identifier="TCapacitorCategory.Create">
      <Block>
        <Execute Statement="CapacitanceSpecificationIndex:= TCapacitanceSpecificationIndex.Create(TMappingInt64ToObject.Create)"/>
      </Block>
    </Constructor>

    <Function Identifier="TCapacitorCategory.IndexSearchSpecifications" VirtualMethod="vmIndexSearchSpecifications" Type="Boolean">
      <Parameters>
        <Parameter Identifier="ComponentSpec" Type="TComponentSpec"/>
        <Parameter Identifier="Specifications" Type="TSpecificationLink" Direction="Output"/>
      </Parameters>
      <Block>
        <Execute Statement="Result:= False"/>
        <Choose>
          <When Expression="CapacitanceSpecificationIndex.GetLinks(ComponentSpec, FComponentSpecHead, Specifications)">
            <Execute Statement="Result:= True"/>
          </When>
        </Choose>
      </Block>
    </Function>

    <Function Identifier="TCapacitorCategory.CreateSpecification" VirtualMethod="vmCreateSpecification" Type="TComponentSpec">
      <Block>
        <Execute Statement="Result:= TCapacitorSpec.Create"/>
      </Block>
    </Function>
    
    <Function Identifier="TCapacitorCategory.IsValidSpecification" VirtualMethod="vmIsValidSpecification" Type="Boolean">
      <Parameters>
        <Parameter Identifier="Specification" Type="TComponentSpec"/>
      </Parameters>
      <Block>
        <Case Expression="Specification.ComponentKindVT">
          <On Select="TValueType.vtSpecified, TValueType.vtSpecifiedByTemplate"/>
          <Otherwise>
            <Exit Result="False"/>
          </Otherwise>
        </Case>
        <Case Expression="Specification.ComponentKind">
          <On Select="TComponentKind.ckCapacitor, TComponentKind.ckPolarisedCapacitor"/>
          <Otherwise>
            <Exit Result="False"/>
          </Otherwise>
        </Case>
        <Execute Statement="Result:= True"/>
      </Block>
    </Function>


    <Function Identifier="TCapacitorCategory.CompareSpecifications" Type="Integer" VirtualMethod="vmCompareSpecifications">
      <Parameters>
        <Parameter Identifier="A" Type="TCapacitorSpec"/>
        <Parameter Identifier="B" Type="TCapacitorSpec"/>
      </Parameters>
      <Block>
        <Execute Statement="Result:= A.ComponentKind - B.ComponentKind"/>
        <Exit Condition="Result &lt;&gt; 0"/>
        <Execute Statement="Result:= CompareStateValue(A.ID, A.Capacitance, A.CapacitanceVT, B.ID, B.Capacitance, B.CapacitanceVT)"/>
        <Exit Condition="Result &lt;&gt; 0"/>
        <Execute Statement="Result:= CompareStateValue(A.ID, A.VoltageRating, A.VoltageRatingVT, B.ID, B.VoltageRating, B.VoltageRatingVT)"/>
        <Exit Condition="Result &lt;&gt; 0"/>
        <Execute Statement="Result:= CompareStateValue(A.ID, A.Technology, A.TechnologyVT, B.ID, B.Technology, B.TechnologyVT)"/>
        <Exit Condition="Result &lt;&gt; 0"/>
        <Execute Statement="Result:= CompareStateValue(A.ID, A.Tolerance, A.ToleranceVT, B.ID, B.Tolerance, B.ToleranceVT)"/>
        <Exit Condition="Result &lt;&gt; 0"/>
        <Execute Statement="Result:= inherited CompareSpecifications(A, B)"/>
      </Block>
    </Function>

    <Procedure Identifier="TCapacitorCategory.LoadTemplatesFromIniFile" VirtualMethod="vmLoadTemplatesFromIniFile">
      <Parameters>
        <Parameter Identifier="IniFile" Type="TCustomIniFile"/>
      </Parameters>
      <Constants>
        <Constant Identifier="sSectionCapacitorTHT" Type="string" Expression="'Template.Capacitor.THT'"/>
        <Constant Identifier="sSectionPolarisedCapacitorTHT" Type="string" Expression="'Template.PolarisedCapacitor.THT'"/>
      </Constants>
      <Block>
        <ConditionalBlock Expression="IniFile.SectionExists(sSectionCapacitorTHT)">
          <Execute Statement="TemplateCapacitorTHT:= TCapacitorSpec.Create"/>
          <Execute Statement="TemplateCapacitorTHT.LoadFromIniFileSection(IniFile, sSectionCapacitorTHT)"/>
        </ConditionalBlock>
        <ConditionalBlock Expression="IniFile.SectionExists(sSectionPolarisedCapacitorTHT)">
          <Execute Statement="TemplatePolarisedCapacitorTHT:= TCapacitorSpec.Create"/>
          <Execute Statement="TemplatePolarisedCapacitorTHT.LoadFromIniFileSection(IniFile, sSectionPolarisedCapacitorTHT)"/>
        </ConditionalBlock>
      </Block>
    </Procedure>

    <Function Identifier="TCapacitorCategory.GetTemplate" VirtualMethod="vmGetTemplate" Type="TComponentSpec">
      <Parameters>
        <Parameter Identifier="Specification" Type="TComponentSpec"/>
      </Parameters>
      <Block>
        <Execute Statement="Result:= ObjNil"/>
        <Case Expression="Specification.ComponentKind">
          <On Select="TComponentKind.ckCapacitor">
            <Execute Statement="Result:= TemplateCapacitorTHT"/>
          </On>
          <On Select="TComponentKind.ckPolarisedCapacitor">
            <Execute Statement="Result:= TemplatePolarisedCapacitorTHT"/>
          </On>
        </Case>
      </Block>
    </Function>

    <Function Identifier="TCapacitorCategory.CanExtractTemplateFromIniFile" VirtualMethod="vmCanExtractTemplateFromIniFile" Type="Boolean">
      <Parameters>
        <Parameter Identifier="IniFile" Type="TCustomIniFile"/>
        <Parameter Identifier="ComponentSpec" Type="TComponentSpec" Direction="Output"/>
      </Parameters>
      <Constants>
        <Constant Identifier="cCapacitorSection" Type="string" Expression="'Capacitor'"/>
      </Constants>
      <Block>
        <Execute Statement="Result:= IniFile.SectionExists(cCapacitorSection)"/>
        <Block Condition="Result">
          <Execute Statement="ComponentSpec:= TCapacitorSpec.Create"/>
          <Execute Statement="ComponentSpec.LoadFromIniFileSection(IniFile, cCapacitorSection)"/>
        </Block>
      </Block>
    </Function>

  </Procedures>

  <Initialization>
    <Execute Statement="InitCapacitorTechnologyIndex(CapacitorTechnologyIndex)"/>
  </Initialization>

  <Finalization>
    <Free Identifier="CapacitorTechnologyIndex"/>
  </Finalization>

</pkg:Library>