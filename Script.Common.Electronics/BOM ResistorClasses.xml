<?xml version="1.0" encoding="utf-8" standalone="no"?>
<pkg:Library
  xsi:schemaLocation="urn:schemas-www-wisware.nl-scriptingpackages ../XmlSchemas.Common.XmlScript/XMLScripting.Packages.xsd"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="urn:schemas-www-wisware.nl-xmlscripting"
  xmlns:ado="urn:schemas-www-wisware.nl-xmlscripting-ado"
  xmlns:fil="urn:schemas-www-wisware.nl-xmlscripting-filemanagement"
  xmlns:fwl="urn:schemas-www-wisware.nl-xmlscripting-windowsfirewall"
  xmlns:inx="urn:schemas-www-wisware.nl-xmlscripting-index"
  xmlns:lil="urn:schemas-www-wisware.nl-xmlscripting-linkedlist"
  xmlns:msx="urn:schemas-www-wisware.nl-xmlscripting-xml"
  xmlns:reg="urn:schemas-www-wisware.nl-xmlscripting-registry"
  xmlns:rep="urn:schemas-www-wisware.nl-xmlscripting-report"
  xmlns:sts="urn:schemas-www-wisware.nl-xmlscripting-showstatus"
  xmlns:syu="urn:schemas-www-wisware.nl-xmlscripting-sysutils"
  xmlns:sys="urn:schemas-www-wisware.nl-xmlscripting"
  xmlns:pkg="urn:schemas-www-wisware.nl-scriptingpackages"
  >
  <Uses>
    <Use Identifier="ElectronicUtils"/>
    <Use Identifier="BomClasses"/>
    <Use Identifier="BomStrings"/>
  </Uses>
  <Type>
    <Enumeration Identifier="TResistorTechnology" Elements="Unspecified, MetalFilm, CarbonFilm, Wirewound, CarbonComposition" LowAlias="Low" HighAlias="High"/>

    <DataClass Identifier="TResistorSpec" Inherit="TComponentSpec">
      <VirtualMethod Identifier="vmHandleField" Override="true"/>
      <VirtualMethod Identifier="vmCheckComponentKind" Override="true"/>
      <VirtualMethod Identifier="vmSpecificationAsString" Override="true"/>
      <VirtualMethod Identifier="vmApplyTemplate" Override="true"/>
      <VirtualMethod Identifier="vmDoesMatchSpecification" Override="true"/>
      <VirtualMethod Identifier="vmCategoryMatchScore" Override="true"/>
      <Field Identifier="ResistanceVT" Type="TValueType"/>
      <Field Identifier="Resistance" Type="Int64"/>
      <Field Identifier="ErrorResistance" Type="string"/>
      <Field Identifier="PowerRatingVT" Type="TValueType"/>
      <Field Identifier="PowerRating" Type="Int64"/>
      <Field Identifier="ErrorPowerRating" Type="string"/>
      <Field Identifier="ToleranceVT" Type="TValueType"/>
      <Field Identifier="Tolerance" Type="Int64"/>
      <Field Identifier="ErrorTolerance" Type="string"/>
      <Field Identifier="TechnologyVT" Type="TValueType"/>
      <Field Identifier="Technology" Type="TResistorTechnology"/>
      <Field Identifier="ErrorTechnology" Type="string"/>
    </DataClass>

    <DataClass Identifier="TResistanceSpecificationIndex" Inherit="TSpecificationIndex" DefaultConstructor="createandsetfields">
      <VirtualMethod Identifier="vmGetKey" Override="true"/>
    </DataClass>

    <DataClass Identifier="TResistorCategory" Inherit="TComponentCategory">
      <VirtualMethod Identifier="vmCreateSpecification" Override="true"/>
      <VirtualMethod Identifier="vmIsValidSpecification" Override="true"/>
      <VirtualMethod Identifier="vmIndexSearchSpecifications" Override="true"/>
      <VirtualMethod Identifier="vmCompareSpecifications" Override="true"/>
      <VirtualMethod Identifier="vmLoadTemplatesFromIniFile" Override="true"/>
      <VirtualMethod Identifier="vmGetTemplate" Override="true"/>
      <VirtualMethod Identifier="vmCanExtractTemplateFromIniFile" Override="true"/>
      <Field Identifier="TemplateTHT" Type="TResistorSpec"/>
      <Field Identifier="TemplateVariableTHT" Type="TResistorSpec"/>
      <Field Identifier="ResistanceSpecificationIndex" Type="TResistanceSpecificationIndex"/>
    </DataClass>
  </Type>

  <Variables>
    <Variable Identifier="ResistorTechnologyIndex" Type="TMappingCaseInSensitiveUnicodeStringToInt64" Init="TMappingCaseInSensitiveUnicodeStringToInt64.Create"/>
    <Variable Identifier="ResistorResistanceConv" Type="TUnitConvertor" Init="GetUnitConvertor(TConvertorKind.MicroOhm)"/>
    <Variable Identifier="ResistorPowerRatingConv" Type="TUnitConvertor" Init="GetUnitConvertor(TConvertorKind.PicoWatt)"/>
    <Variable Identifier="ResistorToleranceConv" Type="TUnitConvertor" Init="GetUnitConvertor(TConvertorKind.MicroPerc)"/>
    <Variable Identifier="ResistorMaxVoltConv" Type="TUnitConvertor" Init="GetUnitConvertor(TConvertorKind.PicoVolt)"/>
    <Variable Identifier="ResistorMaxAmpConv" Type="TUnitConvertor" Init="GetUnitConvertor(TConvertorKind.PicoAmp)"/>
  </Variables>

  <Procedures>
    <Function Identifier="ResistorTechnologyName" Type="string">
      <Parameters>
        <Parameter Identifier="Technology" Type="TResistorTechnology"/>
      </Parameters>
      <Block>
        <Case Expression="Technology" Optimalisation="integermapping">
          <On Select="TResistorTechnology.Unspecified">
            <Execute Statement="Result:= ''"/>
          </On>
          <On Select="TResistorTechnology.MetalFilm">
            <Execute Statement="Result:= 'metal film'"/>
          </On>
          <On Select="TResistorTechnology.CarbonFilm">
            <Execute Statement="Result:= 'carbon film'"/>
          </On>
          <On Select="TResistorTechnology.Wirewound">
            <Execute Statement="Result:= 'wirewound'"/>
          </On>
          <On Select="TResistorTechnology.CarbonComposition">
            <Execute Statement="Result:= 'carbon composition'"/>
          </On>
          <Otherwise>
            <Raise Expression="Exception.Create('Unmapped resistor technology')"/>
          </Otherwise>
        </Case>
      </Block>
    </Function>

    <Procedure Identifier="InitResistorTechnologyIndex">
      <Parameters>
        <Parameter Identifier="Index" Type="TAbstractBoxedValueMappingHashIndex"/>
      </Parameters>
      <Block>
        <ForLoop Indexer="I" From="TResistorTechnology.Low" To="TResistorTechnology.High">
          <inx:Index.MapValue Index="Index" Key="ResistorTechnologyName(I)" Value="I"/>
        </ForLoop>
      </Block>
    </Procedure>

    <Function Identifier="ResistorTechnologyAsString" Type="string">
      <Parameters>
        <Parameter Identifier="Technology" Type="TResistorTechnology"/>
      </Parameters>
      <Block>
        <Case Expression="Technology" Optimalisation="integermapping">
          <On Select="TResistorTechnology.Unspecified">
            <Execute Statement="Result:= ''"/>
          </On>
          <On Select="TResistorTechnology.MetalFilm">
            <Execute Statement="Result:= sResistorTechnologyMetalFilm"/>
          </On>
          <On Select="TResistorTechnology.CarbonFilm">
            <Execute Statement="Result:= sResistorTechnologyCarbonFilm"/>
          </On>
          <On Select="TResistorTechnology.Wirewound">
            <Execute Statement="Result:= sResistorTechnologyWirewound"/>
          </On>
          <On Select="TResistorTechnology.CarbonComposition">
            <Execute Statement="Result:= sResistorTechnologyCarbonComposition"/>
          </On>
          <Otherwise>
            <Execute Statement="Result:= ResistorTechnologyName(Technology)"/>
          </Otherwise>
        </Case>
      </Block>
    </Function>


    <Function Identifier="TResistorSpec.CheckComponentKind" VirtualMethod="vmCheckComponentKind" Type="Boolean">
      <Parameters>
        <Parameter Identifier="ComponentKind" Type="TComponentKind"/>
      </Parameters>
      <Block>
        <Execute Statement="Result:= False"/>
        <Case Expression="ComponentKind" Optimalisation="integermapping">
          <On Select="TComponentKind.Resistor, TComponentKind.VariableResistor">
            <Execute Statement="Result:= True"/>
          </On>
        </Case>
      </Block>
    </Function>

    <Function Identifier="TResistorSpec.DoesMatchSpecification" VirtualMethod="vmDoesMatchSpecification" Type="Boolean">
      <Parameters>
        <Parameter Identifier="ComponentSpec" Type="TComponentSpec"/>
      </Parameters>
      <Block>
        <Execute Statement="Result:= False"/>
        <Exit Condition="not inherited DoesMatchSpecification(ComponentSpec)"/>
        <Case Expression="ResistanceVT">
          <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
            <Exit Condition="not (ComponentSpec is TResistorSpec)"/>
            <Case Expression="TResistorSpec(ComponentSpec).ResistanceVT">
              <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
                <Exit Condition="Resistance &lt;&gt; TResistorSpec(ComponentSpec).Resistance"/>
              </On>
              <Otherwise>
                <Exit/>
              </Otherwise>
            </Case>
          </On>
          <On Select="TValueType.Error, TValueType.ErrorByTemplate">
            <Exit/>
          </On>
        </Case>
        <Case Expression="PowerRatingVT">
          <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
            <Exit Condition="not (ComponentSpec is TResistorSpec)"/>
            <Case Expression="TResistorSpec(ComponentSpec).PowerRatingVT">
              <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
                <Exit Condition="PowerRating &gt; TResistorSpec(ComponentSpec).PowerRating"/>
              </On>
              <Otherwise>
                <Exit/>
              </Otherwise>
            </Case>
          </On>
          <On Select="TValueType.Error, TValueType.ErrorByTemplate">
            <Exit/>
          </On>
        </Case>
        <Case Expression="ToleranceVT">
          <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
            <Exit Condition="not (ComponentSpec is TResistorSpec)"/>
            <Case Expression="TResistorSpec(ComponentSpec).ToleranceVT">
              <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
                <Exit Condition="Tolerance &lt; TResistorSpec(ComponentSpec).Tolerance"/>
              </On>
              <Otherwise>
                <Exit/>
              </Otherwise>
            </Case>
          </On>
          <On Select="TValueType.Error, TValueType.ErrorByTemplate">
            <Exit/>
          </On>
        </Case>
        <Case Expression="TechnologyVT">
          <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
            <Exit Condition="not (ComponentSpec is TResistorSpec)"/>
            <Case Expression="TResistorSpec(ComponentSpec).TechnologyVT">
              <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
                <Exit Condition="Technology &lt;&gt; TResistorSpec(ComponentSpec).Technology"/>
              </On>
              <Otherwise>
                <Exit/>
              </Otherwise>
            </Case>
          </On>
          <On Select="TValueType.Error, TValueType.ErrorByTemplate">
            <Exit/>
          </On>
        </Case>
        <Execute Statement="Result:= True"/>
      </Block>
    </Function>

    <Function Identifier="TResistorSpec.CategoryMatchScore" VirtualMethod="vmCategoryMatchScore" Type="Int64">
      <Parameters>
        <Parameter Identifier="ComponentSpec" Type="TComponentSpec"/>
      </Parameters>
      <Block>
        <Execute Statement="Result:= 0"/>

        <Exit Condition="not (ComponentSpec is TResistorSpec)"/>

        <Case Expression="ComponentKindVT">
          <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
            <Case Expression="ComponentSpec.ComponentKindVT">
              <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
                <Exit Condition="ComponentKind &lt;&gt; ComponentSpec.ComponentKind" Result="0"/>
                <Execute Statement="Result:= Result + 1"/>
              </On>
              <On Select="TValueType.Error, TValueType.ErrorByTemplate">
                <Exit Result="0"/>
              </On>
            </Case>
          </On>
          <On Select="TValueType.Error, TValueType.ErrorByTemplate">
            <Exit Result="0"/>
          </On>
        </Case>

        <Execute Statement="Result:= Result shl 1"/>
        <Case Expression="ResistanceVT">
          <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
            <Case Expression="TResistorSpec(ComponentSpec).ResistanceVT">
              <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
                <Exit Condition="Resistance &lt;&gt; TResistorSpec(ComponentSpec).Resistance" Result="0"/>
                <Execute Statement="Result:= Result + 1"/>
              </On>
              <On Select="TValueType.Error, TValueType.ErrorByTemplate">
                <Exit Result="0"/>
              </On>
            </Case>
          </On>
          <On Select="TValueType.Error, TValueType.ErrorByTemplate">
            <Exit Result="0"/>
          </On>
        </Case>

        <Execute Statement="Result:= Result shl 1"/>
        <Case Expression="PowerRatingVT">
          <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
            <Case Expression="TResistorSpec(ComponentSpec).PowerRatingVT">
              <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
                <Exit Condition="PowerRating &lt;&gt; TResistorSpec(ComponentSpec).PowerRating" Result="0"/>
                <Execute Statement="Result:= Result + 1"/>
              </On>
              <On Select="TValueType.Error, TValueType.ErrorByTemplate">
                <Exit Result="0"/>
              </On>
            </Case>
          </On>
          <On Select="TValueType.Error, TValueType.ErrorByTemplate">
            <Exit Result="0"/>
          </On>
        </Case>

        <Execute Statement="Result:= Result shl 1"/>
        <Case Expression="FootprintVT">
          <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
            <Case Expression="ComponentSpec.FootprintVT">
              <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
                <Exit Condition="Footprint &lt;&gt; ComponentSpec.Footprint" Result="0"/>
                <Execute Statement="Result:= Result + 1"/>
              </On>
              <On Select="TValueType.Error, TValueType.ErrorByTemplate">
                <Exit Result="0"/>
              </On>
            </Case>
          </On>
          <On Select="TValueType.Error, TValueType.ErrorByTemplate">
            <Exit Result="0"/>
          </On>
        </Case>

        <Execute Statement="Result:= Result shl 1"/>
        <Case Expression="TechnologyVT">
          <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
            <Case Expression="TResistorSpec(ComponentSpec).TechnologyVT">
              <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
                <Exit Condition="Technology &lt;&gt; TResistorSpec(ComponentSpec).Technology" Result="0"/>
                <Execute Statement="Result:= Result + 1"/>
              </On>
              <On Select="TValueType.Error, TValueType.ErrorByTemplate">
                <Exit Result="0"/>
              </On>
            </Case>
          </On>
          <On Select="TValueType.Error, TValueType.ErrorByTemplate">
            <Exit Result="0"/>
          </On>
        </Case>

        <Execute Statement="Result:= Result shl 1"/>
        <Case Expression="ToleranceVT">
          <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
            <Case Expression="TResistorSpec(ComponentSpec).ToleranceVT">
              <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
                <Exit Condition="Tolerance &lt;&gt; TResistorSpec(ComponentSpec).Tolerance" Result="0"/>
                <Execute Statement="Result:= Result + 1"/>
              </On>
              <On Select="TValueType.Error, TValueType.ErrorByTemplate">
                <Exit Result="0"/>
              </On>
            </Case>
          </On>
          <On Select="TValueType.Error, TValueType.ErrorByTemplate">
            <Exit Result="0"/>
          </On>
        </Case>

        <Execute Statement="Result:= Result shl 1"/>
        <Case Expression="PartNumberVT">
          <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
            <Case Expression="ComponentSpec.PartNumberVT">
              <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
                <Exit Condition="not SameText(PartNumber, ComponentSpec.PartNumber)" Result="0"/>
                <Execute Statement="Result:= Result + 1"/>
              </On>
              <On Select="TValueType.Error, TValueType.ErrorByTemplate">
                <Exit Result="0"/>
              </On>
            </Case>
          </On>
          <On Select="TValueType.Error, TValueType.ErrorByTemplate">
            <Exit Result="0"/>
          </On>
        </Case>

        <Execute Statement="Result:= Result shl 1"/>
        <Case Expression="ManufacturerVT">
          <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
            <Case Expression="ComponentSpec.ManufacturerVT">
              <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
                <Exit Condition="not SameText(Manufacturer, ComponentSpec.Manufacturer)" Result="0"/>
                <Execute Statement="Result:= Result + 1"/>
              </On>
              <On Select="TValueType.Error, TValueType.ErrorByTemplate">
                <Exit Result="0"/>
              </On>
            </Case>
          </On>
          <On Select="TValueType.Error, TValueType.ErrorByTemplate">
            <Exit Result="0"/>
          </On>
        </Case>
      </Block>
    </Function>

    <Procedure Identifier="TResistorSpec.HandleField" VirtualMethod="vmHandleField">
      <Parameters>
        <Parameter Identifier="CustomField" Type="TCustomField"/>
        <Parameter Identifier="Name" Type="string"/>
        <Parameter Identifier="Value" Type="string"/>
        <Parameter Identifier="Clear" Type="Boolean"/>
      </Parameters>
      <Variables>
        <Variable Identifier="LocResistance" Type="Int64"/>
        <Variable Identifier="LocPowerRating" Type="Int64"/>
        <Variable Identifier="LocTolerance" Type="Int64"/>
        <Variable Identifier="LocTechnology" Type="TResistorTechnology"/>
        <Variable Identifier="Found" Type="Boolean"/>
      </Variables>
      <Block>
        <Case Expression="CustomField" Optimalisation="integermapping">
          <On Select="TCustomField.Value">
            <Choose>
              <When Expression="Clear">
                <Execute Statement="ResistanceVT:= TValueType.Cleared"/>
                <Execute Statement="Resistance:= -1"/>
              </When>
              <When Expression="ResistorResistanceConv.StrToIntValue(Value, LocResistance)">
                <Execute Statement="ResistanceVT:= TValueType.Specified"/>
                <Execute Statement="Resistance:= LocResistance"/>
                <rep:Reporter.Information Text="Format('Resistance: %s', ResistorResistanceConv.IntValueToStr(LocResistance, False))" Condition="IsVerbose"/>
              </When>
              <Otherwise>
                <Execute Statement="ResistanceVT:= TValueType.Error"/>
                <Execute Statement="ErrorResistance:= Value"/>
                <rep:Reporter.Error Text="Format('Resistance could not be safely parsed from value: %s', Value)" Condition="IsVerbose"/>
              </Otherwise>
            </Choose>
          </On>
          <On Select="TCustomField.PowerRating">
            <Choose>
              <When Expression="Clear">
                <Execute Statement="PowerRatingVT:= TValueType.Cleared"/>
                <Execute Statement="PowerRating:= -1"/>
              </When>
              <When Expression="ResistorPowerRatingConv.StrToIntValue(Value, LocPowerRating)">
                <rep:Reporter.Information Text="Format('PowerRating: %s', ResistorPowerRatingConv.IntValueToStr(LocPowerRating, False))" Condition="IsVerbose"/>
                <Execute Statement="PowerRatingVT:= TValueType.Specified"/>
                <Execute Statement="PowerRating:= LocPowerRating"/>
              </When>
              <Otherwise>
                <rep:Reporter.Error Text="Format('PowerRating could not be safely parsed from value: %s', Value)" Condition="IsVerbose"/>
                <Execute Statement="PowerRatingVT:= TValueType.Error"/>
                <Execute Statement="ErrorPowerRating:= Value"/>
              </Otherwise>
            </Choose>
          </On>
          <On Select="TCustomField.Tolerance">
            <Choose>
              <When Expression="Clear">
                <Execute Statement="ToleranceVT:= TValueType.Cleared"/>
                <Execute Statement="Tolerance:= -1"/>
              </When>
              <When Expression="ResistorToleranceConv.StrToIntValue(Value, LocTolerance)">
                <rep:Reporter.Information Text="Format('Tolerance: %s', ResistorToleranceConv.IntValueToStr(LocTolerance, False))" Condition="IsVerbose"/>
                <Execute Statement="ToleranceVT:= TValueType.Specified"/>
                <Execute Statement="Tolerance:= LocTolerance"/>
              </When>
              <Otherwise>
                <rep:Reporter.Error Text="Format('Tolerance could not be safely parsed from value: %s', Value)" Condition="IsVerbose"/>
                <Execute Statement="ToleranceVT:= TValueType.Error"/>
                <Execute Statement="ErrorTolerance:= Value"/>
              </Otherwise>
            </Choose>
          </On>
          <On Select="TCustomField.Technology">
            <Choose>
              <When Expression="Clear">
                <Execute Statement="TechnologyVT:= TValueType.Cleared"/>
                <Execute Statement="Technology:= 0"/>
              </When>
              <Otherwise>
                <inx:Index.FindValue Index="ResistorTechnologyIndex" Key="Value" Value="LocTechnology" Found="Found" Flags="NoErrorOnNotFound" />
                <Choose>
                  <When Expression="Found">
                    <rep:Reporter.Information Text="Format('Resistor technology: %d', LocTechnology)" Condition="Found and IsVerbose"/>
                    <Execute Statement="TechnologyVT:= TValueType.Specified"/>
                    <Execute Statement="Technology:= LocTechnology"/>
                  </When>
                  <Otherwise>
                    <rep:Reporter.Error Text="Format('Resistor technology could not be matched: %s', Value)" Condition="not Found"/>
                    <Execute Statement="TechnologyVT:= TValueType.Error"/>
                    <Execute Statement="ErrorTechnology:= Value"/>
                  </Otherwise>
                </Choose>
              </Otherwise>
            </Choose>
          </On>
          <Otherwise>
            <Execute Statement="inherited HandleField(CustomField, Name, Value, Clear)"/>
          </Otherwise>
        </Case>
      </Block>
    </Procedure>

    <Procedure Identifier="TResistorSpec.GetSpecificationValues">
      <Parameters>
        <Parameter Identifier="FormatType" Type="TSpecFormatType"/>
        <Parameter Identifier="Value" Type="string" Direction="Output"/>
        <Parameter Identifier="ESerie" Type="string" Direction="Output"/>
        <Parameter Identifier="PowerRating" Type="string" Direction="Output"/>
        <Parameter Identifier="MaxAmpVolt" Type="string" Direction="Output"/>
        <Parameter Identifier="Tolerance" Type="string" Direction="Output"/>
        <Parameter Identifier="Technology" Type="string" Direction="Output"/>
        <Parameter Identifier="Footprint" Type="string" Direction="Output"/>
        <Parameter Identifier="PartNumberModel" Type="string" Direction="Output"/>
        <Parameter Identifier="InternalPartNumber" Type="string" Direction="Output"/>
        <Parameter Identifier="ComponentKind" Type="string" Direction="Output"/>
      </Parameters>
      <Block>
        <Variable Identifier="Compact" Type="Boolean" Init="FormatType &lt;&gt; TSpecFormatType.Name"/>
        <Case Expression="ResistanceVT">
          <On Select="TValueType.Unspecified, TValueType.Cleared, TValueType.ClearedByTemplate">
            <Execute Statement="Value:= ''"/>
            <Execute Statement="ESerie:= ''"/>
          </On>
          <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
            <Execute Statement="Value:= ResistorResistanceConv.IntValueToStr(Self.Resistance, Compact)"/>
            <Execute Statement="ESerie:= ESerieOfValue(Self.Resistance)"/>
          </On>
          <On Select="TValueType.Error, TValueType.ErrorByTemplate">
            <Execute Statement="ESerie:= ''"/>
            <Execute Statement="Value:= '!' + ErrorResistance + '!'"/>
          </On>
        </Case>

        <Case Expression="PowerRatingVT">
          <On Select="TValueType.Unspecified, TValueType.Cleared, TValueType.ClearedByTemplate">
            <Execute Statement="PowerRating:= ''"/>
          </On>
          <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
            <Execute Statement="PowerRating:= ResistorPowerRatingConv.IntValueToStr(Self.PowerRating, Compact)"/>
            <Block Condition="not HideResistorMaxAmpVolt">
              <Case Expression="ResistanceVT">
                <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
                  <Variable Identifier="MaxPicoVoltage" Type="Int64" Init="Trunc(CatchFloatE(Sqrt(Self.PowerRating / cFactorToPico * Self.Resistance / cFactorToMicro)) * cFactorToPico) " DisabledChecks="error"/>
                  <Choose>
                    <When Expression="IsError(MaxPicoVoltage)">
                      <Execute Statement="MaxAmpVolt:= '?'"/>
                    </When>
                    <When Expression="MaxPicoVoltage &gt; MaxShowResistorVoltage"/>
                    <When Expression="MaxPicoVoltage = 0">
                      <Execute Statement="MaxAmpVolt:= '0V'"/>
                    </When>
                    <Otherwise>
                      <Variable Identifier="MaxPicoAmp" Init="Trunc(Self.PowerRating / MaxPicoVoltage * cFactorToPico)" DisabledChecks="error"/>
                      <Choose>
                        <When Expression="IsError(MaxPicoAmp)">
                          <Execute Statement="MaxAmpVolt:= '?'"/>
                        </When>
                        <Otherwise>
                          <Execute Statement="MaxAmpVolt:= ResistorMaxVoltConv.IntValueToStr(SignificantTrunc(MaxPicoVoltage, 1000), Compact) + '|' + ResistorMaxAmpConv.IntValueToStr(SignificantTrunc(MaxPicoAmp, 1000), Compact)"/>
                        </Otherwise>
                      </Choose>
                    </Otherwise>
                  </Choose>
                </On>
              </Case>
            </Block>
          </On>
          <On Select="TValueType.Error, TValueType.ErrorByTemplate">
            <Execute Statement="PowerRating:= '!' + ErrorPowerRating + '!'"/>
          </On>
        </Case>

        <Case Expression="ToleranceVT">
          <On Select="TValueType.Unspecified, TValueType.Cleared, TValueType.ClearedByTemplate">
            <Execute Statement="Tolerance:= ''"/>
          </On>
          <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
            <Execute Statement="Tolerance:= ResistorToleranceConv.IntValueToStr(Self.Tolerance, Compact)"/>
          </On>
          <On Select="TValueType.Error, TValueType.ErrorByTemplate">
            <Execute Statement="Tolerance:= '!' + ErrorTolerance + '!'"/>
          </On>
        </Case>

        <Case Expression="TechnologyVT">
          <On Select="TValueType.Unspecified, TValueType.Cleared, TValueType.ClearedByTemplate">
            <Execute Statement="Technology:= ''"/>
          </On>
          <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
            <Execute Statement="Technology:= ResistorTechnologyAsString(Self.Technology)"/>
          </On>
          <On Select="TValueType.Error, TValueType.ErrorByTemplate">
            <Execute Statement="Technology:= '!' + ErrorTechnology + '!'"/>
          </On>
        </Case>

        <Execute Statement="inherited GetSpecificationValues(FormatType, Footprint, PartNumberModel, InternalPartNumber, ComponentKind)"/>
      </Block>
    </Procedure>

    <Function Identifier="TResistorSpec.SpecificationAsString" VirtualMethod="vmSpecificationAsString" Type="string">
      <Parameters>
        <Parameter Identifier="FormatType" Type="TSpecFormatType"/>
        <Parameter Identifier="ReportContext" Type="TSpecReportContext"/>
      </Parameters>
      <Variables>
        <Variable Identifier="Value" Type="string" Init="''"/>
        <Variable Identifier="ESerie" Type="string" Init="''"/>
        <Variable Identifier="PowerRating" Type="string" Init="''"/>
        <Variable Identifier="MaxAmpVolt" Type="string" Init="''"/>
        <Variable Identifier="Tolerance" Type="string" Init="''"/>
        <Variable Identifier="Technology" Type="string" Init="''"/>
        <Variable Identifier="Footprint" Type="string" Init="''"/>
        <Variable Identifier="PartNumberModel" Type="string" Init="''"/>
        <Variable Identifier="InternalPartNumber" Type="string"/>
        <Variable Identifier="ComponentKind" Type="string" Init="''"/>
      </Variables>
      <Block>
        <Execute Statement="GetSpecificationValues(FormatType, Value, ESerie, PowerRating, MaxAmpVolt, Tolerance, Technology, Footprint, PartNumberModel, InternalPartNumber, ComponentKind)"/>
        <Case Expression="FormatType" Optimalisation="integermapping">
          <On Select="TSpecFormatType.Fixed">
            <Variable Identifier="ColumnManager" Type="TTextColumnManager" Init="ReportContext.ColumnManager"/>
            <Variable Identifier="ColumnOffset" Type="Integer" Init="ReportContext.ColumnOffset"/>
            <Execute Statement="Value:= Value + ' '" Condition="IsNonEmptyString(Value)"/>
            <Execute Statement="ESerie:= ESerie + ' '" Condition="IsNonEmptyString(ESerie)"/>
            <Execute Statement="PowerRating:= PowerRating + ' '" Condition="IsNonEmptyString(PowerRating)"/>
            <Execute Statement="MaxAmpVolt:= MaxAmpVolt + ' '" Condition="IsNonEmptyString(MaxAmpVolt)"/>
            <Execute Statement="Tolerance:= Tolerance + ' '" Condition="IsNonEmptyString(Tolerance)"/>
            <Execute Statement="Technology:= Technology + ' '" Condition="IsNonEmptyString(Technology)"/>
            <Execute Statement="Footprint:= Footprint + ' '" Condition="IsNonEmptyString(Footprint)"/>
            <Execute Statement="PartNumberModel:= PartNumberModel + ' '" Condition="IsNonEmptyString(PartNumberModel)"/>
            <Execute Statement="InternalPartNumber:= InternalPartNumber + ' '" Condition="IsNonEmptyString(InternalPartNumber)"/>
            <Choose>
              <When Expression="ReportContext.Measure">
                <Execute Statement="ColumnManager.RequestColumnWidth(ColumnOffset + TResistorSpecColumns.Value, 1, Length(Value))"/>
                <Execute Statement="ColumnManager.RequestColumnWidth(ColumnOffset + TResistorSpecColumns.ESerie, 1, Length(ESerie))"/>
                <Execute Statement="ColumnManager.RequestColumnWidth(ColumnOffset + TResistorSpecColumns.PowerRating, 1, Length(PowerRating))"/>
                <Execute Statement="ColumnManager.RequestColumnWidth(ColumnOffset + TResistorSpecColumns.MaxAmpVolt, 1, Length(MaxAmpVolt))"/>
                <Execute Statement="ColumnManager.RequestColumnWidth(ColumnOffset + TResistorSpecColumns.Tolerance, 1, Length(Tolerance))"/>
                <Execute Statement="ColumnManager.RequestColumnWidth(ColumnOffset + TResistorSpecColumns.Technology, 1, Length(Technology))"/>
                <Execute Statement="ColumnManager.RequestColumnWidth(ColumnOffset + TResistorSpecColumns.FootPrint, 1, Length(Footprint))"/>
                <Execute Statement="ColumnManager.RequestColumnWidth(ColumnOffset + TResistorSpecColumns.PartNumberModel, 1, Length(PartNumberModel))"/>
                <Execute Statement="ColumnManager.RequestColumnWidth(ColumnOffset + TResistorSpecColumns.InternalPartNumber, 1, Length(InternalPartNumber))"/>
                <Execute Statement="Result:= ''"/>
              </When>
              <Otherwise>
                <Execute Statement="Result:= Format('%*s%*s%*s%-*s%*s%-*s%-*s%-*s%-*s',
                         ColumnManager.GetColumnWidth(ColumnOffset + TResistorSpecColumns.Value, 1), Value,
                         ColumnManager.GetColumnWidth(ColumnOffset + TResistorSpecColumns.ESerie, 1), ESerie,
                         ColumnManager.GetColumnWidth(ColumnOffset + TResistorSpecColumns.PowerRating, 1), PowerRating,
                         ColumnManager.GetColumnWidth(ColumnOffset + TResistorSpecColumns.MaxAmpVolt, 1), MaxAmpVolt,
                         ColumnManager.GetColumnWidth(ColumnOffset + TResistorSpecColumns.Tolerance, 1), Tolerance,
                         ColumnManager.GetColumnWidth(ColumnOffset + TResistorSpecColumns.Technology, 1), Technology,
                         ColumnManager.GetColumnWidth(ColumnOffset + TResistorSpecColumns.FootPrint, 1), Footprint,
                         ColumnManager.GetColumnWidth(ColumnOffset + TResistorSpecColumns.PartNumberModel, 1), PartNumberModel,
                         ColumnManager.GetColumnWidth(ColumnOffset + TResistorSpecColumns.InternalPartNumber, 1), InternalPartNumber)"/>
              </Otherwise>
            </Choose>
          </On>
          <On Select="TSpecFormatType.Description">
            <Execute Statement="Result:= ConcatExt(' ', True, Value, Tolerance, PowerRating, Footprint, PartNumberModel, InternalPartNumber, Technology, ComponentKind)"/>
          </On>
          <On Select="TSpecFormatType.Name">
            <Execute Statement="Result:= Value"/>
          </On>
        </Case>
      </Block>
    </Function>

    <Procedure Identifier="TResistorSpec.ApplyTemplate" VirtualMethod="vmApplyTemplate">
      <Variables>
        <Variable Identifier="locTemplate" Type="TResistorSpec"/>
      </Variables>
      <Block>
        <Exit Condition="not Assigned(Template)"/>
        <ConditionalBlock Expression="Template is TResistorSpec">
          <Execute Statement="locTemplate:= TResistorSpec(Template)"/>
          <Case Expression="PowerRatingVT" Optimalisation="integermapping">
            <On Select="TValueType.Unspecified, TValueType.ClearedByTemplate, TValueType.SpecifiedByTemplate, TValueType.ErrorByTemplate">
              <Case Expression="locTemplate.PowerRatingVT" Optimalisation="integermapping">
                <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
                  <Execute Statement="PowerRating:= locTemplate.PowerRating"/>
                  <Execute Statement="PowerRatingVT:= TValueType.SpecifiedByTemplate"/>
                </On>
                <On Select="TValueType.Error, TValueType.ErrorByTemplate">
                  <Execute Statement="ErrorPowerRating:= locTemplate.ErrorPowerRating"/>
                  <Execute Statement="PowerRatingVT:= TValueType.ErrorByTemplate"/>
                </On>
              </Case>
            </On>
          </Case>
          <Case Expression="ToleranceVT" Optimalisation="integermapping">
            <On Select="TValueType.Unspecified, TValueType.ClearedByTemplate, TValueType.SpecifiedByTemplate, TValueType.ErrorByTemplate">
              <Case Expression="locTemplate.ToleranceVT" Optimalisation="integermapping">
                <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
                  <Execute Statement="Tolerance:= locTemplate.Tolerance"/>
                  <Execute Statement="ToleranceVT:= TValueType.SpecifiedByTemplate"/>
                </On>
                <On Select="TValueType.Error, TValueType.ErrorByTemplate">
                  <Execute Statement="ErrorTolerance:= locTemplate.ErrorTolerance"/>
                  <Execute Statement="ToleranceVT:= TValueType.ErrorByTemplate"/>
                </On>
              </Case>
            </On>
          </Case>
          <Case Expression="TechnologyVT" Optimalisation="integermapping">
            <On Select="TValueType.Unspecified, TValueType.ClearedByTemplate, TValueType.SpecifiedByTemplate, TValueType.ErrorByTemplate">
              <Case Expression="locTemplate.TechnologyVT" Optimalisation="integermapping">
                <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
                  <Execute Statement="Technology:= locTemplate.Technology"/>
                  <Execute Statement="TechnologyVT:= TValueType.SpecifiedByTemplate"/>
                </On>
                <On Select="TValueType.Error, TValueType.ErrorByTemplate">
                  <Execute Statement="ErrorTechnology:= locTemplate.ErrorTechnology"/>
                  <Execute Statement="TechnologyVT:= TValueType.ErrorByTemplate"/>
                </On>
              </Case>
            </On>
          </Case>
        </ConditionalBlock>
        <Execute Statement="inherited ApplyTemplate"/>
      </Block>
    </Procedure>

    <Function Identifier="TResistanceSpecificationIndex.GetKey" VirtualMethod="vmGetKey" Type="Boolean">
      <Parameters>
        <Parameter Identifier="ComponentSpec" Type="TResistorSpec"/>
        <Parameter Identifier="Key" Direction="Output"/>
      </Parameters>
      <Block>
        <Execute Statement="Result:= False"/>
        <Case Expression="ComponentSpec.ResistanceVT" Optimalisation="integermapping">
          <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
            <Execute Statement="Result:= True"/>
            <Execute Statement="Key:= ComponentSpec.Resistance"/>
          </On>
        </Case>
      </Block>
    </Function>

    <Constructor Identifier="TResistorCategory.Create">
      <Block>
        <Execute Statement="ResistanceSpecificationIndex:= TResistanceSpecificationIndex.Create(TMappingInt64ToObject.Create)"/>
      </Block>
    </Constructor>

    <Function Identifier="TResistorCategory.CreateSpecification" VirtualMethod="vmCreateSpecification" Type="TComponentSpec">
      <Block>
        <Execute Statement="Result:= TResistorSpec.Create"/>
      </Block>
    </Function>

    <Function Identifier="TResistorCategory.IsValidSpecification" VirtualMethod="vmIsValidSpecification" Type="Boolean">
      <Parameters>
        <Parameter Identifier="Specification" Type="TComponentSpec"/>
      </Parameters>
      <Block>
        <Case Expression="Specification.ComponentKindVT">
          <On Select="TValueType.Specified, TValueType.SpecifiedByTemplate"/>
          <Otherwise>
            <Exit Result="False"/>
          </Otherwise>
        </Case>
        <Case Expression="Specification.ComponentKind">
          <On Select="TComponentKind.Resistor, TComponentKind.VariableResistor"/>
          <Otherwise>
            <Exit Result="False"/>
          </Otherwise>
        </Case>
        <Execute Statement="Result:= True"/>
      </Block>
    </Function>

    <Function Identifier="TResistorCategory.IndexSearchSpecifications" VirtualMethod="vmIndexSearchSpecifications" Type="Boolean">
      <Parameters>
        <Parameter Identifier="ComponentSpec" Type="TComponentSpec"/>
        <Parameter Identifier="Specifications" Type="TSpecificationLink" Direction="Output"/>
      </Parameters>
      <Block>
        <Execute Statement="Result:= False"/>
        <Choose>
          <When Expression="ResistanceSpecificationIndex.GetLinks(ComponentSpec, ComponentSpecHead, Specifications)">
            <Execute Statement="Result:= True"/>
          </When>
        </Choose>
      </Block>
    </Function>

    <Function Identifier="TResistorCategory.GetTemplate" VirtualMethod="vmGetTemplate" Type="TComponentSpec">
      <Parameters>
        <Parameter Identifier="Specification" Type="TComponentSpec"/>
      </Parameters>
      <Block>
        <Execute Statement="Result:= ObjNil"/>
        <Case Expression="Specification.ComponentKind">
          <On Select="TComponentKind.Resistor">
            <Execute Statement="Result:= TemplateTHT"/>
          </On>
          <On Select="TComponentKind.VariableResistor">
            <Execute Statement="Result:= TemplateVariableTHT"/>
          </On>
        </Case>
      </Block>
    </Function>

    <Function Identifier="TResistorCategory.CompareSpecifications" Type="Integer" VirtualMethod="vmCompareSpecifications">
      <Parameters>
        <Parameter Identifier="A" Type="TResistorSpec"/>
        <Parameter Identifier="B" Type="TResistorSpec"/>
      </Parameters>
      <Block>
        <Execute Statement="Result:= A.ComponentKind - B.ComponentKind"/>
        <Exit Condition="Result &lt;&gt; 0"/>
        <Execute Statement="Result:= CompareStateValue(A.ID, A.Resistance, A.ResistanceVT, B.ID, B.Resistance, B.ResistanceVT)"/>
        <Exit Condition="Result &lt;&gt; 0"/>
        <Execute Statement="Result:= CompareStateValue(A.ID, A.PowerRating, A.PowerRatingVT, B.ID, B.PowerRating, B.PowerRatingVT)"/>
        <Exit Condition="Result &lt;&gt; 0"/>
        <Execute Statement="Result:= CompareStateValue(A.ID, A.Technology, A.TechnologyVT, B.ID, B.Technology, B.TechnologyVT)"/>
        <Exit Condition="Result &lt;&gt; 0"/>
        <Execute Statement="Result:= CompareStateValue(A.ID, A.Tolerance, A.ToleranceVT, B.ID, B.Tolerance, B.ToleranceVT)"/>
        <Exit Condition="Result &lt;&gt; 0"/>
        <Execute Statement="Result:= inherited CompareSpecifications(A, B)"/>
      </Block>
    </Function>

    <Procedure Identifier="TResistorCategory.LoadTemplatesFromIniFile" VirtualMethod="vmLoadTemplatesFromIniFile">
      <Parameters>
        <Parameter Identifier="IniFile" Type="TCustomIniFile"/>
      </Parameters>
      <Constants>
        <Constant Identifier="sSectionTHT" Type="string" Expression="'Template.Resistor.THT'"/>
        <Constant Identifier="sSectionVariableTHT" Type="string" Expression="'Template.Resistor.Variable.THT'"/>
      </Constants>

      <Block>
        <ConditionalBlock Expression="IniFile.SectionExists(sSectionTHT)">
          <Execute Statement="TemplateTHT:= TResistorSpec.Create"/>
          <Execute Statement="TemplateTHT.LoadFromIniFileSection(IniFile, sSectionTHT)"/>
        </ConditionalBlock>
        <ConditionalBlock Expression="IniFile.SectionExists(sSectionVariableTHT)">
          <Execute Statement="TemplateVariableTHT:= TResistorSpec.Create"/>
          <Execute Statement="TemplateVariableTHT.LoadFromIniFileSection(IniFile, sSectionVariableTHT)"/>
        </ConditionalBlock>
      </Block>
    </Procedure>

    <Function Identifier="TResistorCategory.CanExtractTemplateFromIniFile" VirtualMethod="vmCanExtractTemplateFromIniFile" Type="Boolean">
      <Parameters>
        <Parameter Identifier="IniFile" Type="TCustomIniFile"/>
        <Parameter Identifier="ComponentSpec" Type="TComponentSpec" Direction="Output"/>
      </Parameters>
      <Constants>
        <Constant Identifier="cResistorSection" Type="string" Expression="'Resistor'"/>
      </Constants>
      <Block>
        <Execute Statement="Result:= IniFile.SectionExists(cResistorSection)"/>
        <Block Condition="Result">
          <Execute Statement="ComponentSpec:= TResistorSpec.Create"/>
          <Execute Statement="ComponentSpec.LoadFromIniFileSection(IniFile, cResistorSection)"/>
        </Block>
      </Block>
    </Function>

  </Procedures>

  <Initialization>
    <Execute Statement="InitResistorTechnologyIndex(ResistorTechnologyIndex)"/>
  </Initialization>

  <Finalization>
    <Free Identifier="ResistorTechnologyIndex"/>
  </Finalization>

</pkg:Library>