<?xml version="1.0" encoding="utf-8" standalone="no"?>
<pkg:Library
  xsi:schemaLocation="urn:schemas-www-wisware.nl-scriptingpackages ../XmlSchemas.Common.XmlScript/XMLScripting.Packages.xsd"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="urn:schemas-www-wisware.nl-xmlscripting"
  xmlns:fil="urn:schemas-www-wisware.nl-xmlscripting-filemanagement"
  xmlns:fw="urn:schemas-www-wisware.nl-xmlscripting-windowsfirewall"
  xmlns:su="urn:schemas-www-wisware.nl-xmlscripting-sysutils"
  xmlns:reg="urn:schemas-www-wisware.nl-xmlscripting-registry"
  xmlns:indx="urn:schemas-www-wisware.nl-xmlscripting-index"
  xmlns:rep="urn:schemas-www-wisware.nl-xmlscripting-report"
  xmlns:sts="urn:schemas-www-wisware.nl-xmlscripting-showstatus"
  xmlns:sys="urn:schemas-www-wisware.nl-xmlscripting"
  xmlns:msx="urn:schemas-www-wisware.nl-xmlscripting-xml"
  xmlns:pkg="urn:schemas-www-wisware.nl-scriptingpackages">
  <Type>
    <Enumeration Identifier="TPrefix" Elements="Tera, Giga, Mega, Kilo, None, Milli, Micro, Nano, Pico, Femto" LowAlias="Low" HighAlias="High"/>

    <Enumeration Identifier="TSiUnit" Elements="Ohm, Watt, Farad, Henry, Volt, Amp, Perc, Hz, Meter" LowAlias="Low" HighAlias="High"/>

    <Enumeration Identifier="TGranularity" Elements="Femto, Pico, Micro"/>

    <Enumeration Identifier="TConvertorKind" Elements="PicoVolt, PicoAmp, MicroOhm, FemtoFarad, FemtoHenry, MicroPerc, PicoWatt, PicoMeter, MicroHz" LowAlias="Low" HighAlias="High"/>
    <!--
PicoVolt
PicoAmp
MicroOhm
FemtoFarad
FemtoHenry
MicroPerc
PicoWatt
PicoMeter
MicroHz
      -->

    <Enumeration Identifier="TESerie" Elements="E3, E6, E12, E24, E48, E96, E192"/>

    <Enumeration Identifier="TMatchValueKind" Elements="LessOrEqual, MoreOrEqual, Closest"/>

    <DataClass Identifier="TSerieNode">
      <Field Identifier="Value" Type="UInt32"/>
      <Field Identifier="LowSerie" Type="TESerie"/>
      <Field Identifier="Previous" Type="TSerieNode"/>
      <Field Identifier="Next" Type="TSerieNode"/>
      <Field Identifier="Less" Type="TSerieNode"/>
      <Field Identifier="More" Type="TSerieNode"/>
    </DataClass>

    <DataClass Identifier="TSerie" DefaultConstructor="none">
      <Field Identifier="Scale" Type="UInt32"/>
      <Field Identifier="Head" Type="TSerieNode"/>
      <Field Identifier="Tail" Type="TSerieNode"/>
      <Field Identifier="Root" Type="TSerieNode"/>
      <Field Identifier="OverFlowFactor" Type="Int64"/>
    </DataClass>

    <DataClass Identifier="TUnitConvertor" DefaultConstructor="none">
      <Field Identifier="SiUnit" Type="TSiUnit"/>
      <Field Identifier="Granularity" Type="TGranularity"/>
      <Field Identifier="BaseScale" Type="Integer"/>
      <Field Identifier="ConvertorKind" Type="TConvertorKind"/>
      <Field Identifier="UnitS" Type="string"/>
      <Field Identifier="FactorPrefixNone" Type="Int64"/>
      <Field Identifier="ToExtendedFactor" Type="Extended"/>
      <Field Identifier="FromExtendedFactor" Type="Extended"/>
      <!--<-<TUnitConvertor.Fields-->
      <Field Identifier="AllowPrefixTera" Type="Boolean"/>
      <Field Identifier="AllowPrefixGiga" Type="Boolean"/>
      <Field Identifier="AllowPrefixMega" Type="Boolean"/>
      <Field Identifier="AllowPrefixKilo" Type="Boolean"/>
      <Field Identifier="AllowPrefixMilli" Type="Boolean"/>
      <Field Identifier="AllowPrefixMicro" Type="Boolean"/>
      <Field Identifier="AllowPrefixNano" Type="Boolean"/>
      <Field Identifier="AllowPrefixPico" Type="Boolean"/>
      <Field Identifier="AllowPrefixFemto" Type="Boolean"/>
      <!-->->-->
    </DataClass>
  </Type>
  <Constants>
    <Constant Identifier="MaxInt64" Type="Int64" Expression="9223372036854775807"/>
    <Constant Identifier="MaxInt64Div10" Type="Int64" Expression="9223372036854775807 div 10"/>
    <Constant Identifier="CopperResistivity" Type="Extended" Expression="1.75E-8"/>

    <Constant Identifier="cDeca1" Type="Char" Expression="'d'"/>
    <Constant Identifier="cDeca2" Type="Char" Expression="'a'"/>
    <!--
Yotta
Zetta
Exa
Peta
Tera
Giga
Mega
Kilo
Hecto
Deca
Deci
Centi
Milli
Micro
Nano
Pico
Femto
Atto
Zepto
Yocto
    -->
    <Constant Identifier="cYotta" Type="Char" Expression="'Y'"/>
    <Constant Identifier="cZetta" Type="Char" Expression="'Z'"/>
    <Constant Identifier="cExa" Type="Char" Expression="'E'"/>
    <Constant Identifier="cPeta" Type="Char" Expression="'P'"/>
    <Constant Identifier="cTera" Type="Char" Expression="'T'"/>
    <Constant Identifier="cGiga" Type="Char" Expression="'G'"/>
    <Constant Identifier="cMega" Type="Char" Expression="'M'"/>
    <Constant Identifier="cKilo" Type="Char" Expression="'k'"/>
    <Constant Identifier="cHecto" Type="Char" Expression="'h'"/>
    <Constant Identifier="cDeca" Type="string" Expression="cDeca1 + cDeca2"/>
    <Constant Identifier="cDeci" Type="Char" Expression="'d'"/>
    <Constant Identifier="cCenti" Type="Char" Expression="'c'"/>
    <Constant Identifier="cMilli" Type="Char" Expression="'m'"/>
    <Constant Identifier="cMicro" Type="Char" Expression="'μ'"/>
    <Constant Identifier="cNano" Type="Char" Expression="'n'"/>
    <Constant Identifier="cPico" Type="Char" Expression="'p'"/>
    <Constant Identifier="cFemto" Type="Char" Expression="'f'"/>
    <Constant Identifier="cAtto" Type="Char" Expression="'a'"/>
    <Constant Identifier="cZepto" Type="Char" Expression="'z'"/>
    <Constant Identifier="cYocto" Type="Char" Expression="'y'"/>

    <Constant Identifier="cMicroAlt" Type="Char" Expression="'µ'"/>
    <Constant Identifier="cMicroAlt2" Type="Char" Expression="'u'"/>
    <Constant Identifier="cR" Type="Char" Expression="'R'"/>
    <Constant Identifier="cE" Type="Char" Expression="'E'"/>


    <Constant Identifier="sKibi" Type="string" Expression="'Ki'"/>
    <Constant Identifier="sMebi" Type="string" Expression="'Mi'"/>
    <Constant Identifier="sGibi" Type="string" Expression="'Gi'"/>
    <Constant Identifier="sTebi" Type="string" Expression="'Ti'"/>
    <Constant Identifier="sPebi" Type="string" Expression="'Pi'"/>
    <Constant Identifier="sExbi" Type="string" Expression="'Ei'"/>
    <Constant Identifier="sZebi" Type="string" Expression="'Zi'"/>
    <Constant Identifier="sYobi" Type="string" Expression="'Yi'"/>

    <Constant Identifier="cSpace" Type="Char" Expression="' '"/>
    <Constant Identifier="cTab" Type="Char" Expression="#9"/>
    <Constant Identifier="c0" Type="Char" Expression="'0'"/>
    <Constant Identifier="cOrd0" Type="UInt32" Expression="CharOrd(c0)"/>
    <Constant Identifier="c1" Type="Char" Expression="'1'"/>
    <Constant Identifier="c9" Type="Char" Expression="'9'"/>
    <Constant Identifier="cMilliOrMeter" Type="Char" Expression="cMilli"/>
    <Constant Identifier="cDecimalSep1" Type="Char" Expression="'.'"/>
    <Constant Identifier="cDecimalSep2" Type="Char" Expression="','"/>
    <Constant Identifier="cNegative" Type="Char" Expression="'-'"/>
    <Constant Identifier="cPositive" Type="Char" Expression="'+'"/>
    <!--
Ohm
Watt
Farad
Henry
Volt
Amp
Perc
Hz
Meter
-->
    <Constant Identifier="cOhm" Type="Char" Expression="'Ω'"/>
    <Constant Identifier="cWatt" Type="Char" Expression="'W'"/>
    <Constant Identifier="cFarad" Type="Char" Expression="'F'"/>
    <Constant Identifier="cHenry" Type="Char" Expression="'H'"/>
    <Constant Identifier="cVolt" Type="Char" Expression="'V'"/>
    <Constant Identifier="cAmp" Type="Char" Expression="'A'"/>
    <Constant Identifier="cPerc" Type="Char" Expression="'%'"/>
    <Constant Identifier="sHz" Type="string" Expression="'hz'"/>
    <Constant Identifier="cHz" Type="Char" Expression="'h'"/>
    <Constant Identifier="cHz2" Type="Char" Expression="'z'"/>
    <Constant Identifier="cMeter" Type="Char" Expression="'m'"/>
    <Constant Identifier="cPercentage" Type="Char" Expression="'%'"/>

    <Constant Identifier="cScaleYotta" Type="Integer" Expression="24"/>
    <Constant Identifier="cScaleZetta" Type="Integer" Expression="21"/>
    <Constant Identifier="cScaleExa" Type="Integer" Expression="18"/>
    <Constant Identifier="cScalePeta" Type="Integer" Expression="15"/>
    <Constant Identifier="cScaleTera" Type="Integer" Expression="12"/>
    <Constant Identifier="cScaleGiga" Type="Integer" Expression="9"/>
    <Constant Identifier="cScaleMega" Type="Integer" Expression="6"/>
    <Constant Identifier="cScaleKilo" Type="Integer" Expression="3"/>
    <Constant Identifier="cScaleHecto" Type="Integer" Expression="2"/>
    <Constant Identifier="cScaleDeca" Type="Integer" Expression="1"/>
    <Constant Identifier="cScaleNone" Type="Integer" Expression="0"/>
    <Constant Identifier="cScaleDeci" Type="Integer" Expression="-1"/>
    <Constant Identifier="cScaleCenti" Type="Integer" Expression="-2"/>
    <Constant Identifier="cScaleMilli" Type="Integer" Expression="-3"/>
    <Constant Identifier="cScaleMicro" Type="Integer" Expression="-6"/>
    <Constant Identifier="cScaleNano" Type="Integer" Expression="-9"/>
    <Constant Identifier="cScalePico" Type="Integer" Expression="-12"/>
    <Constant Identifier="cScaleFemto" Type="Integer" Expression="-15"/>
    <Constant Identifier="cScaleAtto" Type="Integer" Expression="-18"/>
    <Constant Identifier="cScaleZepto" Type="Integer" Expression="-21"/>
    <Constant Identifier="cScaleYocto" Type="Integer" Expression="-24"/>



    <Constant Identifier="k" Type="Integer" Expression="1000"/>
    <Constant Identifier="M" Type="Integer" Expression="1000 * k"/>
    <Constant Identifier="G" Type="Integer" Expression="1000 * M"/>
    <Constant Identifier="facMicroToMicro" Type="Int64" Expression="1"/>
    <Constant Identifier="facMilliToMicro" Type="Int64" Expression="k*facMicroToMicro"/>
    <Constant Identifier="facToMicro" Type="Int64" Expression="k*facMilliToMicro"/>
    <Constant Identifier="facKiloToMicro" Type="Int64" Expression="k*facToMicro"/>
    <Constant Identifier="facMegaToMicro" Type="Int64" Expression="k*facKiloToMicro"/>
    <Constant Identifier="facGigaToMicro" Type="Int64" Expression="k*facMegaToMicro"/>

    <Constant Identifier="facFemtoToFemto" Type="Int64" Expression="1"/>
    <Constant Identifier="facPicoToFemto" Type="Int64" Expression="k*facFemtoToFemto"/>
    <Constant Identifier="facNanoToFemto" Type="Int64" Expression="k*facPicoToFemto"/>
    <Constant Identifier="facMicroToFemto" Type="Int64" Expression="k*facNanoToFemto"/>
    <Constant Identifier="facMilliToFemto" Type="Int64" Expression="k*facMicroToFemto"/>
    <Constant Identifier="facToFemto" Type="Int64" Expression="k*facMilliToFemto"/>
    <Constant Identifier="facKiloToFemto" Type="Int64" Expression="k*facToFemto"/>

    <Constant Identifier="nano" Type="Extended" Expression="1/1000000000"/>
    <Constant Identifier="micro" Type="Extended" Expression="1/1000000"/>
    <Constant Identifier="Milli" Type="Extended" Expression="1/1000"/>

    <Constant Identifier="cScaleFactor00" Type="UInt64" Expression="1"/>
    <Constant Identifier="cScaleFactor01" Type="UInt64" Expression="10"/>
    <Constant Identifier="cScaleFactor02" Type="UInt64" Expression="100"/>
    <Constant Identifier="cScaleFactor03" Type="UInt64" Expression="1000"/>
    <Constant Identifier="cScaleFactor04" Type="UInt64" Expression="10000"/>
    <Constant Identifier="cScaleFactor05" Type="UInt64" Expression="100000"/>
    <Constant Identifier="cScaleFactor06" Type="UInt64" Expression="1000000"/>
    <Constant Identifier="cScaleFactor07" Type="UInt64" Expression="10000000"/>
    <Constant Identifier="cScaleFactor08" Type="UInt64" Expression="100000000"/>
    <Constant Identifier="cScaleFactor09" Type="UInt64" Expression="1000000000"/>
    <Constant Identifier="cScaleFactor10" Type="UInt64" Expression="10000000000"/>
    <Constant Identifier="cScaleFactor11" Type="UInt64" Expression="100000000000"/>
    <Constant Identifier="cScaleFactor12" Type="UInt64" Expression="1000000000000"/>
    <Constant Identifier="cScaleFactor13" Type="UInt64" Expression="10000000000000"/>
    <Constant Identifier="cScaleFactor14" Type="UInt64" Expression="100000000000000"/>
    <Constant Identifier="cScaleFactor15" Type="UInt64" Expression="1000000000000000"/>
    <Constant Identifier="cScaleFactor16" Type="UInt64" Expression="10000000000000000"/>
    <Constant Identifier="cScaleFactor17" Type="UInt64" Expression="100000000000000000"/>
    <Constant Identifier="cScaleFactor18" Type="UInt64" Expression="1000000000000000000"/>
    <Constant Identifier="cScaleFactor19" Type="UInt64" Expression="10000000000000000000"/>

    <Constant Identifier="cFactorFromExa" Type="UInt64" Expression="cScaleFactor18"/>
    <Constant Identifier="cFactorFromPeta" Type="UInt64" Expression="cScaleFactor15"/>
    <Constant Identifier="cFactorFromTera" Type="UInt64" Expression="cScaleFactor12"/>
    <Constant Identifier="cFactorFromGiga" Type="UInt64" Expression="cScaleFactor09"/>
    <Constant Identifier="cFactorFromMega" Type="UInt64" Expression="cScaleFactor06"/>
    <Constant Identifier="cFactorFromKilo" Type="UInt64" Expression="cScaleFactor03"/>
    <Constant Identifier="cFactorFromHecto" Type="UInt64" Expression="cScaleFactor02"/>
    <Constant Identifier="cFactorFromDeca" Type="UInt64" Expression="cScaleFactor01"/>

    <Constant Identifier="cFactorToNone" Type="UInt64" Expression="cScaleFactor00"/>
    <Constant Identifier="cFactorToDeci" Type="UInt64" Expression="cScaleFactor01"/>
    <Constant Identifier="cFactorToCenti" Type="UInt64" Expression="cScaleFactor02"/>
    <Constant Identifier="cFactorToMilli" Type="UInt64" Expression="cScaleFactor03"/>
    <Constant Identifier="cFactorToMicro" Type="UInt64" Expression="cScaleFactor06"/>
    <Constant Identifier="cFactorToNano" Type="UInt64" Expression="cScaleFactor09"/>
    <Constant Identifier="cFactorToPico" Type="UInt64" Expression="cScaleFactor12"/>
    <Constant Identifier="cFactorToFemto" Type="UInt64" Expression="cScaleFactor15"/>
    <Constant Identifier="cFactorToAtto" Type="UInt64" Expression="cScaleFactor18"/>

    <Constant Identifier="facMegaToPico" Type="Int64"  Expression="cFactorFromMega * cFactorToPico"/>
    <Constant Identifier="facMicroToPico" Type="Int64"  Expression="cFactorToPico div cFactorToMicro"/>

    <Constant Identifier="facFromPico" Type="Extended" Expression="1/cFactorToPico"/>
    <Constant Identifier="facFromFemto" Type="Extended" Expression="1/cFactorToFemto"/>
    <Constant Identifier="facFromMicro" Type="Extended" Expression="1/cFactorToMicro"/>


  </Constants>
  <Variables>
    <Variable Identifier="_E192Serie" Type="TSerie"/>
    <Variable Identifier="_E96Serie" Type="TSerie"/>
    <Variable Identifier="_E48Serie" Type="TSerie"/>
    <Variable Identifier="_E24Serie" Type="TSerie"/>
    <Variable Identifier="_E12Serie" Type="TSerie"/>
    <Variable Identifier="_E6Serie" Type="TSerie"/>
    <Variable Identifier="_E3Serie" Type="TSerie"/>
    <!--<-<Variables.Converters-->
    <Variable Identifier="_PicoVoltConverter" Type="TUnitConvertor"/>
    <Variable Identifier="_PicoAmpConverter" Type="TUnitConvertor"/>
    <Variable Identifier="_MicroOhmConverter" Type="TUnitConvertor"/>
    <Variable Identifier="_FemtoFaradConverter" Type="TUnitConvertor"/>
    <Variable Identifier="_FemtoHenryConverter" Type="TUnitConvertor"/>
    <Variable Identifier="_MicroPercConverter" Type="TUnitConvertor"/>
    <Variable Identifier="_PicoWattConverter" Type="TUnitConvertor"/>
    <Variable Identifier="_PicoMeterConverter" Type="TUnitConvertor"/>
    <Variable Identifier="_MicroHzConverter" Type="TUnitConvertor"/>
    <!-->->-->
  </Variables>
  <Procedures>
    <Function Identifier="DecodeReference" Type="Boolean">
      <Parameters>
        <Parameter Identifier="Reference" Type="string"/>
        <Parameter Identifier="Prefix" Type="string" Direction="Output"/>
        <Parameter Identifier="Counter" Type="UInt32" Direction="Output"/>
      </Parameters>
      <Type>
        <Enumeration Identifier="TState" Elements="stStart, stInPrefix, stInNum, stInEndWhitespace"/>
      </Type>
      <Variables>
        <Variable Identifier="State" Type="TState" Init="TState.stStart"/>
        <Variable Identifier="locCounter" Type="UInt64"/>
        <Variable Identifier="locPrefix" Type="string"/>
      </Variables>
      <Block>
        <Execute Statement="Result:= False"/>
        <StringLoop StringValue="Reference" OrdinalIdentifier="ChrI" CharacterIdentifier="Chr">
          <Case Expression="State" Optimalisation="integermapping">
            <On Select="TState.stStart">
              <Case Expression="ChrI" Optimalisation="integermapping" OrdinalType="widechar">
                <On Select="' ', #9">
                </On>
                <On Select="'a'..'z', 'A'..'Z'">
                  <Execute Statement="locPrefix:= Chr"/>
                  <Execute Statement="State:= TState.stInPrefix"/>
                </On>
                <Otherwise>
                  <Exit/>
                </Otherwise>
              </Case>
            </On>
            <On Select="TState.stInPrefix">
              <Case Expression="ChrI" Optimalisation="integermapping" OrdinalType="widechar">
                <On Select="'a'..'z', 'A'..'Z'">
                  <Execute Statement="locPrefix:= locPrefix + Chr"/>
                </On>
                <On Select="'0'..'9'">
                  <Execute Statement="locCounter:= ChrI - CharOrd('0')"/>
                  <Execute Statement="State:= TState.stInNum"/>
                </On>
                <Otherwise>
                  <Exit/>
                </Otherwise>
              </Case>
            </On>
            <On Select="TState.stInNum">
              <Case Expression="ChrI" Optimalisation="integermapping" OrdinalType="widechar">
                <On Select="' ', #9">
                  <Execute Statement="State:= TState.stInEndWhitespace"/>
                </On>
                <On Select="'0'..'9'">
                  <Execute Statement="locCounter:= locCounter * 10 + (ChrI - CharOrd('0'))"/>
                </On>
                <Otherwise>
                  <Exit/>
                </Otherwise>
              </Case>
            </On>
            <On Select="TState.stInEndWhitespace">
              <Case Expression="ChrI" Optimalisation="integermapping" OrdinalType="widechar">
                <On Select="' ', #9">
                </On>
                <Otherwise>
                  <Exit/>
                </Otherwise>
              </Case>
            </On>
          </Case>
        </StringLoop>
        <Case Expression="State" Optimalisation="integermapping">
          <On Select="TState.stInNum, TState.stInEndWhitespace">
            <Execute Statement="Counter:= locCounter"/>
            <Execute Statement="Prefix:= locPrefix"/>
            <Execute Statement="Result:= True"/>
            <!--<rep:Reporter.Information Text="Format('%s = %s - %d', Reference, Prefix, Counter)"/>-->
          </On>
        </Case>
      </Block>
    </Function>

    <Function Identifier="CreatePrefix" Type="string" IsDeterministic="1">
      <Parameters>
        <Parameter Identifier="Value" Type="Extended"/>
        <Parameter Identifier="aUnit"/>
        <Parameter Identifier="IsCapacitance" Type="Boolean"/>
      </Parameters>
      <Variables>
        <Variable Identifier="Prefix" Type="string" Init="''"/>
      </Variables>
      <Block>
        <Choose>
          <When Expression="(Value &gt;= M) or (Value &lt;= -M)">
            <Execute Statement="Prefix:= cMega"/>
            <Execute Statement="Value:= Value / M"/>
          </When>
          <When Expression="(Value &gt;= k) or (Value &lt;= -k)">
            <Execute Statement="Prefix:= cKilo"/>
            <Execute Statement="Value:= Value / k"/>
          </When>
          <When Expression="(Value &gt;= 1) or (Value &lt;= -1)">
            <Execute Statement="Prefix:= ''"/>
          </When>
          <When Expression="((Value &gt;= Milli) or (Value &lt;= -Milli)) and not IsCapacitance">
            <Execute Statement="Prefix:= cMilli"/>
            <Execute Statement="Value:= Value * 1000"/>
          </When>
          <When Expression="(Value &gt;= micro) or (Value &lt;= -micro)">
            <Execute Statement="Prefix:= cMicro"/>
            <Execute Statement="Value:= Value * 1000000"/>
          </When>
          <When Expression="(Value &gt;= nano) or (Value &lt;= -nano)">
            <Execute Statement="Prefix:= cNano"/>
            <Execute Statement="Value:= Value * 1000000000"/>
          </When>
        </Choose>
        <Execute Statement="Result:= Format('%.2f%s%s', Value, Prefix, aUnit)"/>
      </Block>
    </Function>
    <Function Identifier="FormatVoltage" Type="string" IsDeterministic="1">
      <Parameters>
        <Parameter Identifier="voltValue" Type="Extended"/>
      </Parameters>
      <Block>
        <Execute Statement="Result:= CreatePrefix(voltValue, cVolt, False)"/>
      </Block>
    </Function>
    <Function Identifier="FormatDistance" Type="string" IsDeterministic="1">
      <Parameters>
        <Parameter Identifier="mValue" Type="Extended"/>
      </Parameters>
      <Block>
        <Execute Statement="Result:= CreatePrefix(mValue, cMeter, False)"/>
      </Block>
    </Function>
    <Function Identifier="FormatCurrent" Type="string" IsDeterministic="1">
      <Parameters>
        <Parameter Identifier="ampValue" Type="Extended"/>
      </Parameters>
      <Block>
        <Execute Statement="Result:= CreatePrefix(ampValue, cAmp, False)"/>
      </Block>
    </Function>
    <Function Identifier="FormatFrequency" Type="string" IsDeterministic="1">
      <Parameters>
        <Parameter Identifier="freqValue" Type="Extended"/>
      </Parameters>
      <Block>
        <Execute Statement="Result:= CreatePrefix(freqValue, cHz, False)"/>
      </Block>
    </Function>
    <Function Identifier="FormatCapacitance" Type="string" IsDeterministic="1">
      <Parameters>
        <Parameter Identifier="faradValue" Type="Extended"/>
      </Parameters>
      <Block>
        <Execute Statement="Result:= CreatePrefix(faradValue, cFarad, True)"/>
      </Block>
    </Function>
    <Function Identifier="FormatPower" Type="string" IsDeterministic="1">
      <Parameters>
        <Parameter Identifier="wattValue" Type="Extended"/>
      </Parameters>
      <Block>
        <Execute Statement="Result:= CreatePrefix(wattValue, cWatt, False)"/>
      </Block>
    </Function>
    <Function Identifier="FormatResistance" Type="string" IsDeterministic="1">
      <Parameters>
        <Parameter Identifier="Value" Type="Extended"/>
      </Parameters>
      <Block>
        <Execute Statement="Result:= CreatePrefix(Value, cOhm, False)"/>
      </Block>
    </Function>
    <Function Identifier="WireResistance" Type="Extended" IsDeterministic="1">
      <Parameters>
        <Parameter Identifier="mWireLength" Type="Extended"/>
        <Parameter Identifier="m2WireSurface" Type="Extended"/>
        <Parameter Identifier="Resistivity" Type="Extended"/>
      </Parameters>
      <Block>
        <Execute Statement="Result:= mWireLength * Resistivity / m2WireSurface"/>
      </Block>
    </Function>

    <Function Identifier="CopperWireResistance" Type="Extended" IsDeterministic="1">
      <Parameters>
        <Parameter Identifier="mWireLength" Type="Extended"/>
        <Parameter Identifier="m2WireSurface" Type="Extended"/>
      </Parameters>
      <Block>
        <Execute Statement="Result:= WireResistance(mWireLength, m2WireSurface, CopperResistivity)"/>
      </Block>
    </Function>

    <Function Identifier="RippleVoltage" Type="Extended" IsDeterministic="1">
      <Parameters>
        <Parameter Identifier="ampLoadCurrent" Type="Extended"/>
        <Parameter Identifier="faradCapacitor" Type="Extended"/>
        <Parameter Identifier="Factor" Type="Extended"/>
      </Parameters>
      <Block>
        <Execute Statement="Result:= Factor * ampLoadCurrent / (faradCapacitor * 1000)"/>
      </Block>
    </Function>

    <Function Identifier="DoubleFaseRippleVoltage" Type="Extended" IsDeterministic="1">
      <Parameters>
        <Parameter Identifier="ampLoadCurrent" Type="Extended"/>
        <Parameter Identifier="faradCapacitor" Type="Extended"/>
      </Parameters>
      <Block>
        <Execute Statement="Result:= RippleVoltage(ampLoadCurrent, faradCapacitor, 1.5)"/>
      </Block>
    </Function>

    <Function Identifier="SignificantTrunc" Type="Int64" IsDeterministic="1">
      <Parameters>
        <Parameter Identifier="Value" Type="Int64"/>
        <Parameter Identifier="OrderValue" Type="Int64"/>
      </Parameters>
      <Variables>
        <Variable Identifier="Modulus" Type="Int64" Init="1"/>
        <Variable Identifier="Factor" Type="Int64" Init="1"/>
      </Variables>
      <Block>
        <WhileLoop Expression="(Value div OrderValue) &gt; 0">
          <Execute Statement="OrderValue:= OrderValue * 10"/>
          <Execute Statement="Factor:= Factor * 10"/>
        </WhileLoop>
        <Execute Statement="Result:= Value div Factor * Factor"/>
      </Block>
    </Function>

    <Function Identifier="TSerie.FindNode" Type="TSerieNode">
      <Parameters>
        <Parameter Identifier="Value" Type="UInt64"/>
      </Parameters>
      <Block>
        <Choose>
          <When Expression="Value &gt; Tail.Value">
            <RepeatUntilLoop Expression="Value &lt;= Tail.Value">
              <Exit Result="ObjNil" Condition="Value mod 10 &lt;&gt; 0"/>
              <Execute Statement="Value:= Value div 10"/>
            </RepeatUntilLoop>
          </When>
          <When Expression="Value = 0">
            <Exit Result="ObjNil"/>
          </When>
          <When Expression="Value &lt; Head.Value">
            <RepeatUntilLoop Expression="Value &gt;= Head.Value">
              <Execute Statement="Value:= Value * 10"/>
            </RepeatUntilLoop>
          </When>
        </Choose>

        <Execute Statement="Result:= Root"/>
        <WhileLoop Expression="Assigned(Result)">
          <Choose>
            <When Expression="Value &lt; Result.Value">
              <Execute Statement="Result:= Result.Less"/>
            </When>
            <When Expression="Value &gt; Result.Value">
              <Execute Statement="Result:= Result.More"/>
            </When>
            <Otherwise>
              <Exit/>
            </Otherwise>
          </Choose>
        </WhileLoop>
      </Block>
    </Function>

    <Function Identifier="TSerie.MatchNode" Type="TSerieNode">
      <Parameters>
        <Parameter Identifier="Value" Type="Int64"/>
        <Parameter Identifier="MatchedValue" Type="Int64" Direction="Output"/>
        <Parameter Identifier="MatchKind" Type="TMatchValueKind"/>
      </Parameters>
      <Variables>
        <!--Values equal or below can be scaled one more time -->
        <Variable Identifier="Less" Type="TSerieNode"/>
        <Variable Identifier="More" Type="TSerieNode"/>
        <Variable Identifier="OverFlowFactor" Type="Int64"/>
        <Variable Identifier="MatchFactor" Type="Int64" Init="1"/>
        <Variable Identifier="ValueFactor" Type="Int64" Init="1"/>
        <Variable Identifier="ValueDivisor" Type="Int64" Init="1"/>
        <Variable Identifier="ScaledValue" Type="Int64" Init="Value"/>
        <Variable Identifier="MoreValue" Type="Int64"/>
        <Variable Identifier="LessValue" Type="Int64"/>
        <Variable Identifier="LessValueFactor" Type="Int64"/>
      </Variables>
      <Block>
        <Choose>
          <When Expression="Value &gt;= Tail.Value">
            <!-- 
            Tail.Value * 10 is max value when rapped
            Tail.Value * 10 * 10 because this value must be able to be scaled
            -->
            <Execute Statement="OverFlowFactor:= MaxInt64 div (Tail.Value * 100)" />
            <RepeatUntilLoop Expression="ScaledValue &lt;= Tail.Value * MatchFactor">
              <Choose>
                <When Expression="MatchFactor &gt; OverFlowFactor">
                  <Execute Statement="ValueDivisor:= ValueDivisor * 10"/>
                  <Case Expression="MatchKind" Optimalisation="integermapping">
                    <On Select="TMatchValueKind.LessOrEqual">
                      <Execute Statement="ScaledValue:= Value div ValueDivisor"/>
                    </On>
                    <On Select="TMatchValueKind.MoreOrEqual">
                      <Execute Statement="ScaledValue:= (Value + ValueDivisor - 1) div ValueDivisor"/>
                    </On>
                    <Otherwise>
                      <Execute Statement="ScaledValue:= (Value + ValueDivisor shr 1) div ValueDivisor"/>
                    </Otherwise>
                  </Case>
                </When>
                <Otherwise>
                  <Execute Statement="MatchFactor:= MatchFactor * 10"/>
                </Otherwise>
              </Choose>
            </RepeatUntilLoop>
          </When>
          <When Expression="Value = 0">
            <Execute Statement="MatchedValue:= 0"/>
            <Exit Result="ObjNil"/>
          </When>
          <When Expression="Value &lt; Head.Value">
            <RepeatUntilLoop Expression="ScaledValue &gt;= Head.Value">
              <Execute Statement="ValueFactor:= ValueFactor * 10"/>
              <Execute Statement="ScaledValue:= Value * ValueFactor"/>
            </RepeatUntilLoop>
          </When>
        </Choose>

        <Execute Statement="Result:= Root"/>
        <WhileLoop Expression="Assigned(Result)">
          <Choose>
            <When Expression="ScaledValue &lt; Result.Value * MatchFactor">
              <Execute Statement="More:= Result"/>
              <Execute Statement="Result:= Result.Less"/>
            </When>
            <When Expression="ScaledValue &gt; Result.Value * MatchFactor">
              <Execute Statement="Less:= Result"/>
              <Execute Statement="Result:= Result.More"/>
            </When>
            <Otherwise>
              <Case Expression="MatchKind" Optimalisation="integermapping">
                <On Select="TMatchValueKind.LessOrEqual">
                  <Execute Statement="MatchedValue:= (Result.Value * MatchFactor) div ValueFactor * ValueDivisor"/>
                </On>
                <On Select="TMatchValueKind.MoreOrEqual">
                  <Execute Statement="MatchedValue:= (Result.Value * MatchFactor + ValueFactor - 1) div ValueFactor * ValueDivisor"/>
                </On>
                <Otherwise>
                  <Execute Statement="MatchedValue:= (Result.Value * MatchFactor + ValueFactor shr 1) div ValueFactor * ValueDivisor"/>
                </Otherwise>
              </Case>
              <Exit/>
            </Otherwise>
          </Choose>
        </WhileLoop>
        <Case Expression="MatchKind" Optimalisation="integermapping">
          <On Select="TMatchValueKind.LessOrEqual">
            <Block Condition="IsEmpty(Less)">
              <Execute Statement="ValueFactor:= ValueFactor * 10"/>
              <Execute Statement="Less:= Tail"/>
            </Block>
            <Execute Statement="Result:= Less"/>
            <Execute Statement="MatchedValue:= (Result.Value * MatchFactor + ValueFactor shr 1) div ValueFactor * ValueDivisor"/>
          </On>
          <On Select="TMatchValueKind.MoreOrEqual">
            <Block Condition="IsEmpty(More)">
              <Execute Statement="MatchFactor:= MatchFactor * 10"/>
              <Execute Statement="More:= Head"/>
            </Block>
            <Execute Statement="Result:= More"/>
            <Execute Statement="MatchedValue:= (Result.Value * MatchFactor + ValueFactor shr 1) div ValueFactor * ValueDivisor"/>
          </On>
          <Otherwise>
            <Execute Statement="LessValueFactor:= ValueFactor"/>
            <Block Condition="IsEmpty(Less)">
              <Execute Statement="LessValueFactor:= LessValueFactor * 10"/>
              <Execute Statement="Less:= Tail"/>
            </Block>
            <Execute Statement="LessValue:= (Less.Value * MatchFactor + LessValueFactor shr 1) div LessValueFactor * ValueDivisor"/>
            <Block Condition="IsEmpty(More)">
              <Execute Statement="MatchFactor:= MatchFactor * 10"/>
              <Execute Statement="More:= Head"/>
            </Block>
            <Execute Statement="MoreValue:= (More.Value * MatchFactor + ValueFactor shr 1) div ValueFactor * ValueDivisor"/>
            <Choose>
              <When Expression="(Value - LessValue) &lt; (MoreValue - Value)">
                <Execute Statement="Result:= Less"/>
                <Execute Statement="MatchedValue:= LessValue"/>
              </When>
              <Otherwise>
                <Execute Statement="Result:= More"/>
                <Execute Statement="MatchedValue:= MoreValue"/>
              </Otherwise>
            </Choose>
          </Otherwise>
        </Case>
      </Block>
    </Function>

    <Function Identifier="TSerie.ExtendedValue" Type="Extended">
      <Parameters>
        <Parameter Identifier="Value" Type="Extended"/>
        <Parameter Identifier="MatchKind" Type="TMatchValueKind"/>
      </Parameters>
      <Variables>
        <Variable Identifier="MatchedValue" Type="Int64"/>
        <Variable Identifier="Factor" Type="Int64" Init="1"/>
        <Variable Identifier="Dividor" Type="Int64" Init="1"/>
      </Variables>
      <Block>
        <Choose>
          <When Expression="Value = 0">
            <Execute Statement="MatchNode(0, MatchedValue, MatchKind)"/>
            <Execute Statement="Result:= MatchedValue"/>
          </When>
          <When Expression="Value &gt; MaxInt64 - 1">
            <RepeatUntilLoop Expression="Value / Dividor &gt;= MaxInt64 - 1">
              <Execute Statement="Dividor:= Dividor * 10"/>
            </RepeatUntilLoop>
            <Execute Statement="MatchNode(Round(Value / Dividor), MatchedValue, MatchKind)"/>
            <Execute Statement="Result:= MatchedValue * Dividor"/>
          </When>
          <Otherwise>
            <WhileLoop Expression="Value * Factor &lt; MaxInt64Div10 - 1">
              <Execute Statement="Factor:= Factor * 10"/>
            </WhileLoop>
            <Execute Statement="MatchNode(Round(Value * Factor), MatchedValue, MatchKind)"/>
            <Execute Statement="Result:= MatchedValue / Factor"/>
          </Otherwise>
        </Choose>
      </Block>
    </Function>

    <Constructor Identifier="TSerie.Create">
      <Parameters>
        <Parameter Identifier="SerieType" Type="TESerie"/>
      </Parameters>
      <Variables>
        <Variable Identifier="Head" Type="TSerieNode" />
        <Variable Identifier="Tail" Type="TSerieNode" />
      </Variables>
      <Procedures>

        <Procedure Identifier="AddValue">
          <Parameters>
            <Parameter Identifier="Value" Type="UInt32"/>
            <Parameter Identifier="LowSerie" Type="TESerie"/>
          </Parameters>
          <Variables>
            <Variable Identifier="NewNode" Type="TSerieNode" Init="TSerieNode.Create(Value, LowSerie)"/>
          </Variables>
          <Block>
            <Choose>
              <When Expression="IsEmpty(Head)">
                <Execute Statement="Head:= NewNode"/>
              </When>
              <Otherwise>
                <Execute Statement="NewNode.Previous:= Tail"/>
                <Execute Statement="Tail.Next:= NewNode"/>
              </Otherwise>
            </Choose>
            <Execute Statement="Tail:= NewNode"/>
          </Block>
        </Procedure>

        <Procedure Identifier="InitESerie2">
          <Block>
            <Execute Statement="Self.Scale:= 10"/>
            <Execute Statement="AddValue(10, TESerie.E3)"  Condition="SerieType &gt;=TESerie.E3"/>
            <Execute Statement="AddValue(11, TESerie.E24)" Condition="SerieType &gt;=TESerie.E24"/>
            <Execute Statement="AddValue(12, TESerie.E12)" Condition="SerieType &gt;=TESerie.E12"/>
            <Execute Statement="AddValue(13, TESerie.E24)" Condition="SerieType &gt;=TESerie.E24"/>
            <Execute Statement="AddValue(15, TESerie.E6)"  Condition="SerieType &gt;=TESerie.E6"/>
            <Execute Statement="AddValue(16, TESerie.E24)" Condition="SerieType &gt;=TESerie.E24"/>
            <Execute Statement="AddValue(18, TESerie.E12)" Condition="SerieType &gt;=TESerie.E12"/>
            <Execute Statement="AddValue(20, TESerie.E24)" Condition="SerieType &gt;=TESerie.E24"/>
            <Execute Statement="AddValue(22, TESerie.E3)"  Condition="SerieType &gt;=TESerie.E3"/>
            <Execute Statement="AddValue(24, TESerie.E24)" Condition="SerieType &gt;=TESerie.E24"/>
            <Execute Statement="AddValue(27, TESerie.E12)" Condition="SerieType &gt;=TESerie.E12"/>
            <Execute Statement="AddValue(30, TESerie.E24)" Condition="SerieType &gt;=TESerie.E24"/>
            <Execute Statement="AddValue(33, TESerie.E6)"  Condition="SerieType &gt;=TESerie.E6"/>
            <Execute Statement="AddValue(36, TESerie.E24)" Condition="SerieType &gt;=TESerie.E24"/>
            <Execute Statement="AddValue(39, TESerie.E12)" Condition="SerieType &gt;=TESerie.E12"/>
            <Execute Statement="AddValue(43, TESerie.E24)" Condition="SerieType &gt;=TESerie.E24"/>
            <Execute Statement="AddValue(47, TESerie.E3)"  Condition="SerieType &gt;=TESerie.E3"/>
            <Execute Statement="AddValue(51, TESerie.E24)" Condition="SerieType &gt;=TESerie.E24"/>
            <Execute Statement="AddValue(56, TESerie.E12)" Condition="SerieType &gt;=TESerie.E12"/>
            <Execute Statement="AddValue(62, TESerie.E24)" Condition="SerieType &gt;=TESerie.E24"/>
            <Execute Statement="AddValue(68, TESerie.E6)"  Condition="SerieType &gt;=TESerie.E6"/>
            <Execute Statement="AddValue(75, TESerie.E24)" Condition="SerieType &gt;=TESerie.E24"/>
            <Execute Statement="AddValue(82, TESerie.E12)" Condition="SerieType &gt;=TESerie.E12"/>
            <Execute Statement="AddValue(91, TESerie.E24)" Condition="SerieType &gt;=TESerie.E24"/>
          </Block>
        </Procedure>

        <Procedure Identifier="InitESerie3">
          <Block>
            <Execute Statement="Self.Scale:= 100"/>
            <Execute Statement="AddValue(100, TESerie.E48)"  Condition="SerieType &gt;=TESerie.E48"/>
            <Execute Statement="AddValue(101, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(102, TESerie.E96)"  Condition="SerieType &gt;=TESerie.E96"/>
            <Execute Statement="AddValue(104, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(105, TESerie.E48)"  Condition="SerieType &gt;=TESerie.E48"/>
            <Execute Statement="AddValue(106, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(107, TESerie.E96)"  Condition="SerieType &gt;=TESerie.E96"/>
            <Execute Statement="AddValue(109, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(110, TESerie.E48)"  Condition="SerieType &gt;=TESerie.E48"/>
            <Execute Statement="AddValue(111, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(113, TESerie.E96)"  Condition="SerieType &gt;=TESerie.E96"/>
            <Execute Statement="AddValue(114, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(115, TESerie.E48)"  Condition="SerieType &gt;=TESerie.E48"/>
            <Execute Statement="AddValue(117, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(118, TESerie.E96)"  Condition="SerieType &gt;=TESerie.E96"/>
            <Execute Statement="AddValue(120, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(121, TESerie.E48)"  Condition="SerieType &gt;=TESerie.E48"/>
            <Execute Statement="AddValue(123, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(124, TESerie.E96)"  Condition="SerieType &gt;=TESerie.E96"/>
            <Execute Statement="AddValue(126, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(127, TESerie.E48)"  Condition="SerieType &gt;=TESerie.E48"/>
            <Execute Statement="AddValue(129, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(130, TESerie.E96)"  Condition="SerieType &gt;=TESerie.E96"/>
            <Execute Statement="AddValue(132, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(133, TESerie.E48)"  Condition="SerieType &gt;=TESerie.E48"/>
            <Execute Statement="AddValue(135, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(137, TESerie.E96)"  Condition="SerieType &gt;=TESerie.E96"/>
            <Execute Statement="AddValue(138, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(140, TESerie.E48)"  Condition="SerieType &gt;=TESerie.E48"/>
            <Execute Statement="AddValue(142, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(143, TESerie.E96)"  Condition="SerieType &gt;=TESerie.E96"/>
            <Execute Statement="AddValue(145, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(147, TESerie.E48)"  Condition="SerieType &gt;=TESerie.E48"/>
            <Execute Statement="AddValue(149, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(150, TESerie.E96)"  Condition="SerieType &gt;=TESerie.E96"/>
            <Execute Statement="AddValue(152, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(154, TESerie.E48)"  Condition="SerieType &gt;=TESerie.E48"/>
            <Execute Statement="AddValue(156, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(158, TESerie.E96)"  Condition="SerieType &gt;=TESerie.E96"/>
            <Execute Statement="AddValue(160, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(162, TESerie.E48)"  Condition="SerieType &gt;=TESerie.E48"/>
            <Execute Statement="AddValue(164, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(165, TESerie.E96)"  Condition="SerieType &gt;=TESerie.E96"/>
            <Execute Statement="AddValue(167, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(169, TESerie.E48)"  Condition="SerieType &gt;=TESerie.E48"/>
            <Execute Statement="AddValue(172, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(174, TESerie.E96)"  Condition="SerieType &gt;=TESerie.E96"/>
            <Execute Statement="AddValue(176, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(178, TESerie.E48)"  Condition="SerieType &gt;=TESerie.E48"/>
            <Execute Statement="AddValue(180, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(182, TESerie.E96)"  Condition="SerieType &gt;=TESerie.E96"/>
            <Execute Statement="AddValue(184, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(187, TESerie.E48)"  Condition="SerieType &gt;=TESerie.E48"/>
            <Execute Statement="AddValue(189, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(191, TESerie.E96)"  Condition="SerieType &gt;=TESerie.E96"/>
            <Execute Statement="AddValue(193, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(196, TESerie.E48)"  Condition="SerieType &gt;=TESerie.E48"/>
            <Execute Statement="AddValue(198, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(200, TESerie.E96)"  Condition="SerieType &gt;=TESerie.E96"/>
            <Execute Statement="AddValue(203, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(205, TESerie.E48)"  Condition="SerieType &gt;=TESerie.E48"/>
            <Execute Statement="AddValue(208, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(210, TESerie.E96)"  Condition="SerieType &gt;=TESerie.E96"/>
            <Execute Statement="AddValue(213, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(215, TESerie.E48)"  Condition="SerieType &gt;=TESerie.E48"/>
            <Execute Statement="AddValue(218, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(221, TESerie.E96)"  Condition="SerieType &gt;=TESerie.E96"/>
            <Execute Statement="AddValue(223, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(226, TESerie.E48)"  Condition="SerieType &gt;=TESerie.E48"/>
            <Execute Statement="AddValue(229, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(232, TESerie.E96)"  Condition="SerieType &gt;=TESerie.E96"/>
            <Execute Statement="AddValue(234, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(237, TESerie.E48)"  Condition="SerieType &gt;=TESerie.E48"/>
            <Execute Statement="AddValue(240, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(243, TESerie.E96)"  Condition="SerieType &gt;=TESerie.E96"/>
            <Execute Statement="AddValue(246, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(249, TESerie.E48)"  Condition="SerieType &gt;=TESerie.E48"/>
            <Execute Statement="AddValue(252, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(255, TESerie.E96)"  Condition="SerieType &gt;=TESerie.E96"/>
            <Execute Statement="AddValue(258, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(261, TESerie.E48)"  Condition="SerieType &gt;=TESerie.E48"/>
            <Execute Statement="AddValue(264, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(267, TESerie.E96)"  Condition="SerieType &gt;=TESerie.E96"/>
            <Execute Statement="AddValue(271, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(274, TESerie.E48)"  Condition="SerieType &gt;=TESerie.E48"/>
            <Execute Statement="AddValue(277, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(280, TESerie.E96)"  Condition="SerieType &gt;=TESerie.E96"/>
            <Execute Statement="AddValue(284, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(287, TESerie.E48)"  Condition="SerieType &gt;=TESerie.E48"/>
            <Execute Statement="AddValue(291, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(294, TESerie.E96)" Condition="SerieType &gt;=TESerie.E96"/>
            <Execute Statement="AddValue(298, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(301, TESerie.E48)" Condition="SerieType &gt;=TESerie.E48"/>
            <Execute Statement="AddValue(305, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(309, TESerie.E96)" Condition="SerieType &gt;=TESerie.E96"/>
            <Execute Statement="AddValue(312, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(316, TESerie.E48)"  Condition="SerieType &gt;=TESerie.E48"/>
            <Execute Statement="AddValue(320, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(324, TESerie.E96)"  Condition="SerieType &gt;=TESerie.E96"/>
            <Execute Statement="AddValue(328, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(332, TESerie.E48)"  Condition="SerieType &gt;=TESerie.E48"/>
            <Execute Statement="AddValue(336, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(340, TESerie.E96)"  Condition="SerieType &gt;=TESerie.E96"/>
            <Execute Statement="AddValue(344, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(348, TESerie.E48)"  Condition="SerieType &gt;=TESerie.E48"/>
            <Execute Statement="AddValue(352, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(357, TESerie.E96)"  Condition="SerieType &gt;=TESerie.E96"/>
            <Execute Statement="AddValue(361, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(365, TESerie.E48)"  Condition="SerieType &gt;=TESerie.E48"/>
            <Execute Statement="AddValue(370, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(374, TESerie.E96)"  Condition="SerieType &gt;=TESerie.E96"/>
            <Execute Statement="AddValue(379, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(383, TESerie.E48)"  Condition="SerieType &gt;=TESerie.E48"/>
            <Execute Statement="AddValue(388, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(392, TESerie.E96)"  Condition="SerieType &gt;=TESerie.E96"/>
            <Execute Statement="AddValue(397, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(402, TESerie.E48)"  Condition="SerieType &gt;=TESerie.E48"/>
            <Execute Statement="AddValue(407, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(412, TESerie.E96)"  Condition="SerieType &gt;=TESerie.E96"/>
            <Execute Statement="AddValue(417, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(422, TESerie.E48)"  Condition="SerieType &gt;=TESerie.E48"/>
            <Execute Statement="AddValue(427, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(432, TESerie.E96)"  Condition="SerieType &gt;=TESerie.E96"/>
            <Execute Statement="AddValue(437, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(442, TESerie.E48)"  Condition="SerieType &gt;=TESerie.E48"/>
            <Execute Statement="AddValue(448, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(453, TESerie.E96)"  Condition="SerieType &gt;=TESerie.E96"/>
            <Execute Statement="AddValue(459, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(464, TESerie.E48)"  Condition="SerieType &gt;=TESerie.E48"/>
            <Execute Statement="AddValue(470, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(475, TESerie.E96)"  Condition="SerieType &gt;=TESerie.E96"/>
            <Execute Statement="AddValue(481, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(487, TESerie.E48)"  Condition="SerieType &gt;=TESerie.E48"/>
            <Execute Statement="AddValue(493, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(499, TESerie.E96)"  Condition="SerieType &gt;=TESerie.E96"/>
            <Execute Statement="AddValue(505, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(511, TESerie.E48)"  Condition="SerieType &gt;=TESerie.E48"/>
            <Execute Statement="AddValue(517, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(523, TESerie.E96)"  Condition="SerieType &gt;=TESerie.E96"/>
            <Execute Statement="AddValue(530, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(536, TESerie.E48)"  Condition="SerieType &gt;=TESerie.E48"/>
            <Execute Statement="AddValue(542, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(549, TESerie.E96)"  Condition="SerieType &gt;=TESerie.E96"/>
            <Execute Statement="AddValue(556, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(562, TESerie.E48)"  Condition="SerieType &gt;=TESerie.E48"/>
            <Execute Statement="AddValue(569, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(576, TESerie.E96)"  Condition="SerieType &gt;=TESerie.E96"/>
            <Execute Statement="AddValue(583, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(590, TESerie.E48)"  Condition="SerieType &gt;=TESerie.E48"/>
            <Execute Statement="AddValue(597, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(604, TESerie.E96)"  Condition="SerieType &gt;=TESerie.E96"/>
            <Execute Statement="AddValue(612, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(619, TESerie.E48)"  Condition="SerieType &gt;=TESerie.E48"/>
            <Execute Statement="AddValue(626, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(634, TESerie.E96)"  Condition="SerieType &gt;=TESerie.E96"/>
            <Execute Statement="AddValue(642, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(649, TESerie.E48)"  Condition="SerieType &gt;=TESerie.E48"/>
            <Execute Statement="AddValue(657, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(665, TESerie.E96)"  Condition="SerieType &gt;=TESerie.E96"/>
            <Execute Statement="AddValue(673, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(681, TESerie.E48)"  Condition="SerieType &gt;=TESerie.E48"/>
            <Execute Statement="AddValue(690, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(698, TESerie.E96)"  Condition="SerieType &gt;=TESerie.E96"/>
            <Execute Statement="AddValue(706, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(715, TESerie.E48)"  Condition="SerieType &gt;=TESerie.E48"/>
            <Execute Statement="AddValue(723, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(732, TESerie.E96)"  Condition="SerieType &gt;=TESerie.E96"/>
            <Execute Statement="AddValue(741, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(750, TESerie.E48)"  Condition="SerieType &gt;=TESerie.E48"/>
            <Execute Statement="AddValue(759, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(768, TESerie.E96)"  Condition="SerieType &gt;=TESerie.E96"/>
            <Execute Statement="AddValue(777, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(787, TESerie.E48)"  Condition="SerieType &gt;=TESerie.E48"/>
            <Execute Statement="AddValue(796, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(806, TESerie.E96)"  Condition="SerieType &gt;=TESerie.E96"/>
            <Execute Statement="AddValue(816, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(825, TESerie.E48)"  Condition="SerieType &gt;=TESerie.E48"/>
            <Execute Statement="AddValue(835, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(845, TESerie.E96)"  Condition="SerieType &gt;=TESerie.E96"/>
            <Execute Statement="AddValue(856, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(866, TESerie.E48)"  Condition="SerieType &gt;=TESerie.E48"/>
            <Execute Statement="AddValue(876, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(887, TESerie.E96)"  Condition="SerieType &gt;=TESerie.E96"/>
            <Execute Statement="AddValue(898, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(909, TESerie.E48)"  Condition="SerieType &gt;=TESerie.E48"/>
            <Execute Statement="AddValue(920, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(931, TESerie.E96)"  Condition="SerieType &gt;=TESerie.E96"/>
            <Execute Statement="AddValue(942, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(953, TESerie.E48)"  Condition="SerieType &gt;=TESerie.E48"/>
            <Execute Statement="AddValue(965, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(976, TESerie.E96)"  Condition="SerieType &gt;=TESerie.E96"/>
            <Execute Statement="AddValue(988, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
          </Block>
        </Procedure>

        <FunctionHeader Identifier="GetRootNode" Type="TSerieNode">
          <Parameters>
            <Parameter Identifier="Head" Type="TSerieNode"/>
            <Parameter Identifier="Tail" Type="TSerieNode"/>
          </Parameters>
        </FunctionHeader>
        <Implementation Identifier="GetRootNode">
          <Variables>
            <Variable Identifier="Head2x" Type="TSerieNode"/>
          </Variables>
          <Block>
            <!--
Result := Head;
  if Head = Tail then
  begin
    Result^.RecLess := nil;
    Result^.RecMore := nil;
    Exit;
  end;
            -->
            <Execute Statement="Result:= Head"/>
            <Block Condition="Head = Tail">
              <Execute Statement="Result.Less := ObjNil"/>
              <Execute Statement="Result.More := ObjNil"/>
              <Exit/>
            </Block>
            <!--
  Head2x := Head;
Continue:
  Head2x := Head2x^.RecNext;
  if Head2x = Tail then
    goto Done;
  Head2x := Head2x^.RecNext;
  Result := Result^.RecNext;
  if Head2x = Tail then
    goto Done;
  goto Continue;
Done:
            -->
            <Execute Statement="Head2x:= Head"/>
            <RepeatUntilLoop Expression="Head2x = Tail">
              <Execute Statement="Head2x:= Head2x.Next"/>
              <Break Condition="Head2x = Tail"/>
              <Execute Statement="Head2x:= Head2x.Next"/>
              <Execute Statement="Result:= Result.Next"/>
            </RepeatUntilLoop>
            <!--
  Result^.RecLess := nil;
  Result^.RecMore := nil;
  if Result <> Head then
  begin
    Result^.RecLess := GetRootNode(Head, Result^.RecPrev);
  end;
  if Result <> Tail then
  begin
    Result^.RecMore := GetRootNode(Result^.RecNext, Tail);
  end;
            -->
            <Choose>
              <When Expression="Result &lt;&gt; Head">
                <Execute Statement="Result.Less := GetRootNode(Head, Result.Previous)"/>
              </When>
              <Otherwise>
                <Execute Statement="Result.Less := ObjNil"/>
              </Otherwise>
            </Choose>
            <Choose>
              <When Expression="Result &lt;&gt; Tail">
                <Execute Statement="Result.More := GetRootNode(Result.Next, Tail)"/>
              </When>
              <Otherwise>
                <Execute Statement="Result.More := ObjNil"/>
              </Otherwise>
            </Choose>
          </Block>
        </Implementation>

      </Procedures>
      <Block>
        <Choose>
          <When Expression="SerieType &gt;= TESerie.E48">
            <Execute Statement="InitESerie3"/>
          </When>
          <Otherwise>
            <Execute Statement="InitESerie2"/>
          </Otherwise>
        </Choose>
        <Execute Statement="Self.Head:= Head"/>
        <Execute Statement="Self.Tail:= Tail"/>
        <Execute Statement="Self.Root:= GetRootNode(Head, Tail)"/>
      </Block>
    </Constructor>

    <Procedure Identifier="TSerie.Report">
      <Variables>
        <Variable Identifier="RunningValue" Type="TSerieNode" Init="Head"/>
        <Variable Identifier="Scale" Type="UInt32" Init="Self.Scale"/>
      </Variables>
      <Block>
        <Choose>
          <When Expression="Scale &gt;= 100">
            <WhileLoop Expression="Assigned(RunningValue)">
              <rep:Reporter.Information Text="Format('%d: %.2f',  RunningValue.Value, RunningValue.Value / Scale)"/>
              <Execute Statement="RunningValue:= RunningValue.Next"/>
            </WhileLoop>
          </When>
          <Otherwise>
            <WhileLoop Expression="Assigned(RunningValue)">
              <rep:Reporter.Information Text="Format('%d: %.1f',  RunningValue.Value, RunningValue.Value / Scale)"/>
              <Execute Statement="RunningValue:= RunningValue.Next"/>
            </WhileLoop>
          </Otherwise>
        </Choose>
      </Block>
    </Procedure>
    <Function Identifier="GetESerie" Type="TSerie">
      <Parameters>
        <Parameter Identifier="ESerie" Type="TESerie"/>
      </Parameters>
      <Block>
        <Case Expression="ESerie" Optimalisation="integermapping">
          <On Select="TESerie.E3">
            <Choose>
              <When Expression="IsEmpty(_E3Serie)">
                <Execute Statement="Result:= TSerie.Create(ESerie)"/>
                <Execute Statement="_E3Serie:= Result"/>
              </When>
              <Otherwise>
                <Execute Statement="Result:= _E3Serie"/>
              </Otherwise>
            </Choose>
          </On>
          <On Select="TESerie.E6">
            <Choose>
              <When Expression="IsEmpty(_E6Serie)">
                <Execute Statement="Result:= TSerie.Create(ESerie)"/>
                <Execute Statement="_E6Serie:= Result"/>
              </When>
              <Otherwise>
                <Execute Statement="Result:= _E6Serie"/>
              </Otherwise>
            </Choose>
          </On>
          <On Select="TESerie.E12">
            <Choose>
              <When Expression="IsEmpty(_E12Serie)">
                <Execute Statement="Result:= TSerie.Create(ESerie)"/>
                <Execute Statement="_E12Serie:= Result"/>
              </When>
              <Otherwise>
                <Execute Statement="Result:= _E12Serie"/>
              </Otherwise>
            </Choose>
          </On>
          <On Select="TESerie.E24">
            <Choose>
              <When Expression="IsEmpty(_E24Serie)">
                <Execute Statement="Result:= TSerie.Create(ESerie)"/>
                <Execute Statement="_E24Serie:= Result"/>
              </When>
              <Otherwise>
                <Execute Statement="Result:= _E24Serie"/>
              </Otherwise>
            </Choose>
          </On>
          <On Select="TESerie.E48">
            <Choose>
              <When Expression="IsEmpty(_E48Serie)">
                <Execute Statement="Result:= TSerie.Create(ESerie)"/>
                <Execute Statement="_E48Serie:= Result"/>
              </When>
              <Otherwise>
                <Execute Statement="Result:= _E48Serie"/>
              </Otherwise>
            </Choose>
          </On>
          <On Select="TESerie.E96">
            <Choose>
              <When Expression="IsEmpty(_E96Serie)">
                <Execute Statement="Result:= TSerie.Create(ESerie)"/>
                <Execute Statement="_E96Serie:= Result"/>
              </When>
              <Otherwise>
                <Execute Statement="Result:= _E96Serie"/>
              </Otherwise>
            </Choose>
          </On>
          <On Select="TESerie.E192">
            <Choose>
              <When Expression="IsEmpty(_E192Serie)">
                <Execute Statement="Result:= TSerie.Create(ESerie)"/>
                <Execute Statement="_E192Serie:= Result"/>
              </When>
              <Otherwise>
                <Execute Statement="Result:= _E192Serie"/>
              </Otherwise>
            </Choose>
          </On>
          <Otherwise>
            <Raise Expression="Exception.Create(Format('Invalid Eserie: %d', ESerie))"/>
          </Otherwise>
        </Case>
      </Block>
    </Function>

    <Function Identifier="TUnitConvertor.StrToIntValue" Type="Boolean">
      <Parameters>
        <Parameter Identifier="TextValue" Type="string"/>
        <Parameter Identifier="IntValue" Type="Int64" Direction="Output"/>
      </Parameters>
      <Type>
        <Enumeration Identifier="TState" Elements="Start, AfterSign, InNum, AfterDecimalChar, InDecimalFrac, AfterDecimalPrefix, AfterMilliOrMeter, AfterPrefix, InPrefixFrac, AfterFirstUnitChar, Final"/>
      </Type>
      <Variables>
        <Variable Identifier="State" Type="TState" Init="TState.Start"/>
        <Variable Identifier="Num" Type="UInt64"/>
        <Variable Identifier="Scale" Type="Integer" Init="0"/>
        <Variable Identifier="FracScale" Type="Integer" Init="0"/>
        <Variable Identifier="Frac" Type="UInt64"/>
        <Variable Identifier="CheckIntValue" Type="Int64" DisabledChecks="error"/>
        <Variable Identifier="FracNumScale" Type="Integer" Init="0"/>
        <Variable Identifier="NumNumScale" Type="Integer" Init="0"/>
        <Variable Identifier="IsNegative" Type="Boolean" Init="False"/>
      </Variables>
      <Block>
        <Execute Statement="Result:= False"/>
        <StringLoop StringValue="TextValue" OrdinalIdentifier="ChrI">
          <Case Expression="State" Optimalisation="integermapping">
            <!--<-<TUnitConvertor.StrToIntValue.StringLoop-->
            <On Select="TState.Start">
              <Case Expression="ChrI" Optimalisation="integermapping" OrdinalType="widechar">
                <On Select="cSpace, cTab">
                </On>
                <On Select="cNegative">
                  <Execute Statement="IsNegative:= True"/>
                  <Execute Statement="State:= TState.AfterSign"/>
                </On>
                <On Select="cPositive">
                  <Execute Statement="State:= TState.AfterSign"/>
                </On>
                <On Select="c0">
                  <Execute Statement="Num:= 0"/>
                  <Execute Statement="NumNumScale:= 0"/>
                  <Execute Statement="State:= TState.InNum"/>
                </On>
                <On Select="c1..c9">
                  <Execute Statement="Num:= ChrI - CharOrd(c0)"/>
                  <Execute Statement="NumNumScale:= 0"/>
                  <Execute Statement="State:= TState.InNum"/>
                </On>
                <Otherwise>
                  <Exit/>
                </Otherwise>
              </Case>
            </On>
            <On Select="TState.AfterSign">
              <Case Expression="ChrI" Optimalisation="integermapping" OrdinalType="widechar">
                <On Select="c0">
                  <Execute Statement="Num:= 0"/>
                  <Execute Statement="NumNumScale:= 0"/>
                  <Execute Statement="State:= TState.InNum"/>
                </On>
                <On Select="c1..c9">
                  <Execute Statement="Num:= ChrI - CharOrd(c0)"/>
                  <Execute Statement="NumNumScale:= 0"/>
                  <Execute Statement="State:= TState.InNum"/>
                </On>
                <Otherwise>
                  <Exit/>
                </Otherwise>
              </Case>
            </On>
            <On Select="TState.InNum">
              <Case Expression="ChrI" Optimalisation="integermapping" OrdinalType="widechar">
                <On Select="cSpace, cTab">
                  <Execute Statement="State:= TState.Final"/>
                </On>
                <On Select="c0">
                  <Execute Statement="NumNumScale:= NumNumScale + 1"/>
                </On>
                <On Select="c1..c9">
                  <ForLoop Indexer="I" From="0" To="NumNumScale - 1">
                    <Execute Statement="Num:= Num * 10"/>
                  </ForLoop>
                  <Execute Statement="NumNumScale:= 0"/>
                  <Execute Statement="Num:= Num * 10 + ChrI - CharOrd(c0)"/>
                </On>
                <On Select="cDecimalSep1, cDecimalSep2">
                  <Execute Statement="State:= TState.AfterDecimalChar"/>
                </On>
                <On Select="cTera">
                  <Execute Statement="Scale:= cScaleTera"/>
                  <Execute Statement="State:= TState.AfterPrefix"/>
                </On>
                <On Select="cGiga">
                  <Execute Statement="Scale:= cScaleGiga"/>
                  <Execute Statement="State:= TState.AfterPrefix"/>
                </On>
                <On Select="cMega">
                  <Execute Statement="Scale:= cScaleMega"/>
                  <Execute Statement="State:= TState.AfterPrefix"/>
                </On>
                <On Select="cKilo">
                  <Execute Statement="Scale:= cScaleKilo"/>
                  <Execute Statement="State:= TState.AfterPrefix"/>
                </On>
                <On Select="cR, cE">
                  <Exit Condition="SiUnit &lt;&gt; TSiUnit.Ohm"/>
                  <Execute Statement="State:= TState.AfterPrefix"/>
                </On>
                <On Select="cMilliOrMeter">
                  <Choose>
                    <When Expression="SiUnit = TSiUnit.Meter">
                      <Execute Statement="State:= TState.AfterMilliOrMeter"/>
                    </When>
                    <Otherwise>
                      <Execute Statement="Scale:= cScaleMilli"/>
                      <Execute Statement="State:= TState.AfterPrefix"/>
                    </Otherwise>
                  </Choose>
                </On>
                <On Select="cMicro, cMicroAlt, cMicroAlt2">
                  <Execute Statement="Scale:= cScaleMicro"/>
                  <Execute Statement="State:= TState.AfterPrefix"/>
                </On>
                <On Select="cNano">
                  <Execute Statement="Scale:= cScaleNano"/>
                  <Execute Statement="State:= TState.AfterPrefix"/>
                </On>
                <On Select="cPico">
                  <Execute Statement="Scale:= cScalePico"/>
                  <Execute Statement="State:= TState.AfterPrefix"/>
                </On>
                <On Select="cFemto">
                  <Execute Statement="Scale:= cScaleFemto"/>
                  <Execute Statement="State:= TState.AfterPrefix"/>
                </On>
                <On Select="cOhm">
                  <Exit Condition="SiUnit &lt;&gt; TSiUnit.Ohm"/>
                  <Execute Statement="State:= TState.Final"/>
                </On>
                <On Select="cWatt">
                  <Exit Condition="SiUnit &lt;&gt; TSiUnit.Watt"/>
                  <Execute Statement="State:= TState.Final"/>
                </On>
                <On Select="cFarad">
                  <Exit Condition="SiUnit &lt;&gt; TSiUnit.Farad"/>
                  <Execute Statement="State:= TState.Final"/>
                </On>
                <On Select="cHenry">
                  <Exit Condition="SiUnit &lt;&gt; TSiUnit.Henry"/>
                  <Execute Statement="State:= TState.Final"/>
                </On>
                <On Select="cVolt">
                  <Exit Condition="SiUnit &lt;&gt; TSiUnit.Volt"/>
                  <Execute Statement="State:= TState.AfterPrefix"/>
                </On>
                <On Select="cAmp">
                  <Exit Condition="SiUnit &lt;&gt; TSiUnit.Amp"/>
                  <Execute Statement="State:= TState.Final"/>
                </On>
                <On Select="cPerc">
                  <Exit Condition="SiUnit &lt;&gt; TSiUnit.Perc"/>
                  <Execute Statement="State:= TState.Final"/>
                </On>
                <On Select="cHz">
                  <Exit Condition="SiUnit &lt;&gt; TSiUnit.Hz"/>
                  <Execute Statement="State:= TState.AfterFirstUnitChar"/>
                </On>
                <Otherwise>
                  <Exit/>
                </Otherwise>
              </Case>
            </On>
            <On Select="TState.AfterDecimalChar">
              <Case Expression="ChrI" Optimalisation="integermapping" OrdinalType="widechar">
                <On Select="c0">
                  <Execute Statement="Frac:= 0"/>
                  <Execute Statement="FracScale:= - NumNumScale"/>
                  <Execute Statement="FracNumScale:= 1"/>
                  <Execute Statement="State:= TState.InDecimalFrac"/>
                </On>
                <On Select="c1..c9">
                  <Execute Statement="Frac:= ChrI - CharOrd(c0)"/>
                  <Execute Statement="FracScale:= -1 - NumNumScale"/>
                  <Execute Statement="FracNumScale:= 0"/>
                  <Execute Statement="State:= TState.InDecimalFrac"/>
                </On>
                <Otherwise>
                  <Exit/>
                </Otherwise>
              </Case>
            </On>
            <On Select="TState.InDecimalFrac">
              <Case Expression="ChrI" Optimalisation="integermapping" OrdinalType="widechar">
                <On Select="cSpace, cTab">
                  <Execute Statement="State:= TState.Final"/>
                </On>
                <On Select="c0">
                  <Execute Statement="FracNumScale:= FracNumScale + 1"/>
                </On>
                <On Select="c1..c9">
                  <ForLoop Indexer="I" From="0" To="FracNumScale - 1">
                    <Execute Statement="Frac:= Frac * 10"/>
                    <Execute Statement="FracScale:= FracScale - 1"/>
                  </ForLoop>
                  <Execute Statement="FracScale:= FracScale - 1"/>
                  <Execute Statement="FracNumScale:= 0"/>
                  <Execute Statement="Frac:= Frac * 10 + ChrI - CharOrd(c0)"/>
                </On>
                <On Select="cTera">
                  <Execute Statement="Scale:= cScaleTera"/>
                  <Execute Statement="State:= TState.AfterDecimalPrefix"/>
                </On>
                <On Select="cGiga">
                  <Execute Statement="Scale:= cScaleGiga"/>
                  <Execute Statement="State:= TState.AfterDecimalPrefix"/>
                </On>
                <On Select="cMega">
                  <Execute Statement="Scale:= cScaleMega"/>
                  <Execute Statement="State:= TState.AfterDecimalPrefix"/>
                </On>
                <On Select="cKilo">
                  <Execute Statement="Scale:= cScaleKilo"/>
                  <Execute Statement="State:= TState.AfterDecimalPrefix"/>
                </On>
                <On Select="cR, cE">
                  <Exit Condition="SiUnit &lt;&gt; TSiUnit.Ohm"/>
                  <Execute Statement="State:= TState.AfterDecimalPrefix"/>
                </On>
                <On Select="cMilliOrMeter">
                  <Execute Statement="Scale:= cScaleMilli"/>
                  <Execute Statement="State:= TState.AfterDecimalPrefix"/>
                </On>
                <On Select="cMicro, cMicroAlt, cMicroAlt2">
                  <Execute Statement="Scale:= cScaleMicro"/>
                  <Execute Statement="State:= TState.AfterDecimalPrefix"/>
                </On>
                <On Select="cNano">
                  <Execute Statement="Scale:= cScaleNano"/>
                  <Execute Statement="State:= TState.AfterDecimalPrefix"/>
                </On>
                <On Select="cPico">
                  <Execute Statement="Scale:= cScalePico"/>
                  <Execute Statement="State:= TState.AfterDecimalPrefix"/>
                </On>
                <On Select="cFemto">
                  <Execute Statement="Scale:= cScaleFemto"/>
                  <Execute Statement="State:= TState.AfterDecimalPrefix"/>
                </On>
                <On Select="cOhm">
                  <Exit Condition="SiUnit &lt;&gt; TSiUnit.Ohm"/>
                  <Execute Statement="State:= TState.Final"/>
                </On>
                <On Select="cWatt">
                  <Exit Condition="SiUnit &lt;&gt; TSiUnit.Watt"/>
                  <Execute Statement="State:= TState.Final"/>
                </On>
                <On Select="cFarad">
                  <Exit Condition="SiUnit &lt;&gt; TSiUnit.Farad"/>
                  <Execute Statement="State:= TState.Final"/>
                </On>
                <On Select="cHenry">
                  <Exit Condition="SiUnit &lt;&gt; TSiUnit.Henry"/>
                  <Execute Statement="State:= TState.Final"/>
                </On>
                <On Select="cVolt">
                  <Exit Condition="SiUnit &lt;&gt; TSiUnit.Volt"/>
                  <Execute Statement="State:= TState.Final"/>
                </On>
                <On Select="cAmp">
                  <Exit Condition="SiUnit &lt;&gt; TSiUnit.Amp"/>
                  <Execute Statement="State:= TState.Final"/>
                </On>
                <On Select="cPerc">
                  <Exit Condition="SiUnit &lt;&gt; TSiUnit.Perc"/>
                  <Execute Statement="State:= TState.Final"/>
                </On>
                <On Select="cHz">
                  <Exit Condition="SiUnit &lt;&gt; TSiUnit.Hz"/>
                  <Execute Statement="State:= TState.AfterFirstUnitChar"/>
                </On>
                <Otherwise>
                  <Exit/>
                </Otherwise>
              </Case>
            </On>
            <On Select="TState.AfterDecimalPrefix">
              <Case Expression="ChrI" Optimalisation="integermapping" OrdinalType="widechar">
                <On Select="cSpace, cTab">
                  <Execute Statement="State:= TState.Final"/>
                </On>
                <On Select="cMeter">
                  <Execute Statement="State:= TState.Final"/>
                </On>
                <On Select="cOhm">
                  <Exit Condition="SiUnit &lt;&gt; TSiUnit.Ohm"/>
                  <Execute Statement="State:= TState.Final"/>
                </On>
                <On Select="cWatt">
                  <Exit Condition="SiUnit &lt;&gt; TSiUnit.Watt"/>
                  <Execute Statement="State:= TState.Final"/>
                </On>
                <On Select="cFarad">
                  <Exit Condition="SiUnit &lt;&gt; TSiUnit.Farad"/>
                  <Execute Statement="State:= TState.Final"/>
                </On>
                <On Select="cHenry">
                  <Exit Condition="SiUnit &lt;&gt; TSiUnit.Henry"/>
                  <Execute Statement="State:= TState.Final"/>
                </On>
                <On Select="cVolt">
                  <Exit Condition="SiUnit &lt;&gt; TSiUnit.Volt"/>
                  <Execute Statement="State:= TState.Final"/>
                </On>
                <On Select="cAmp">
                  <Exit Condition="SiUnit &lt;&gt; TSiUnit.Amp"/>
                  <Execute Statement="State:= TState.Final"/>
                </On>
                <On Select="cPerc">
                  <Exit Condition="SiUnit &lt;&gt; TSiUnit.Perc"/>
                  <Execute Statement="State:= TState.Final"/>
                </On>
                <On Select="cHz">
                  <Exit Condition="SiUnit &lt;&gt; TSiUnit.Hz"/>
                  <Execute Statement="State:= TState.AfterFirstUnitChar"/>
                </On>
                <Otherwise>
                  <Exit/>
                </Otherwise>
              </Case>
            </On>
            <On Select="TState.AfterMilliOrMeter">
              <Case Expression="ChrI" Optimalisation="integermapping" OrdinalType="widechar">
                <On Select="cSpace, cTab">
                  <Execute Statement="State:= TState.Final"/>
                </On>
                <On Select="cMeter">
                  <Execute Statement="Scale:= cScaleMilli"/>
                  <Execute Statement="State:= TState.Final"/>
                </On>
                <Otherwise>
                  <Exit/>
                </Otherwise>
              </Case>
            </On>
            <On Select="TState.AfterPrefix">
              <Case Expression="ChrI" Optimalisation="integermapping" OrdinalType="widechar">
                <On Select="cSpace, cTab">
                  <Execute Statement="State:= TState.Final"/>
                </On>
                <On Select="c0">
                  <Execute Statement="Frac:= 0"/>
                  <Execute Statement="FracScale:= - NumNumScale"/>
                  <Execute Statement="FracNumScale:= 1"/>
                  <Execute Statement="State:= TState.InPrefixFrac"/>
                </On>
                <On Select="c1..c9">
                  <Execute Statement="Frac:= ChrI - CharOrd(c0)"/>
                  <Execute Statement="FracScale:= -1 - NumNumScale"/>
                  <Execute Statement="FracNumScale:= 0"/>
                  <Execute Statement="State:= TState.InPrefixFrac"/>
                </On>
                <On Select="cMeter">
                  <Execute Statement="State:= TState.Final"/>
                </On>
                <On Select="cOhm">
                  <Exit Condition="SiUnit &lt;&gt; TSiUnit.Ohm"/>
                  <Execute Statement="State:= TState.Final"/>
                </On>
                <On Select="cWatt">
                  <Exit Condition="SiUnit &lt;&gt; TSiUnit.Watt"/>
                  <Execute Statement="State:= TState.Final"/>
                </On>
                <On Select="cFarad">
                  <Exit Condition="SiUnit &lt;&gt; TSiUnit.Farad"/>
                  <Execute Statement="State:= TState.Final"/>
                </On>
                <On Select="cHenry">
                  <Exit Condition="SiUnit &lt;&gt; TSiUnit.Henry"/>
                  <Execute Statement="State:= TState.Final"/>
                </On>
                <On Select="cVolt">
                  <Exit Condition="SiUnit &lt;&gt; TSiUnit.Volt"/>
                  <Execute Statement="State:= TState.Final"/>
                </On>
                <On Select="cAmp">
                  <Exit Condition="SiUnit &lt;&gt; TSiUnit.Amp"/>
                  <Execute Statement="State:= TState.Final"/>
                </On>
                <On Select="cPerc">
                  <Exit Condition="SiUnit &lt;&gt; TSiUnit.Perc"/>
                  <Execute Statement="State:= TState.Final"/>
                </On>
                <On Select="cHz">
                  <Exit Condition="SiUnit &lt;&gt; TSiUnit.Hz"/>
                  <Execute Statement="State:= TState.AfterFirstUnitChar"/>
                </On>
                <Otherwise>
                  <Exit/>
                </Otherwise>
              </Case>
            </On>
            <On Select="TState.InPrefixFrac">
              <Case Expression="ChrI" Optimalisation="integermapping" OrdinalType="widechar">
                <On Select="cSpace, cTab">
                  <Execute Statement="State:= TState.Final"/>
                </On>
                <On Select="c0">
                  <Execute Statement="FracNumScale:= FracNumScale + 1"/>
                </On>
                <On Select="c1..c9">
                  <ForLoop Indexer="I" From="0" To="FracNumScale - 1">
                    <Execute Statement="Frac:= Frac * 10"/>
                    <Execute Statement="FracScale:= FracScale - 1"/>
                  </ForLoop>
                  <Execute Statement="FracScale:= FracScale - 1"/>
                  <Execute Statement="FracNumScale:= 0"/>
                  <Execute Statement="Frac:= Frac * 10 + ChrI - CharOrd(c0)"/>
                </On>
                <On Select="cMeter">
                  <Execute Statement="State:= TState.Final"/>
                </On>
                <On Select="cOhm">
                  <Exit Condition="SiUnit &lt;&gt; TSiUnit.Ohm"/>
                  <Execute Statement="State:= TState.Final"/>
                </On>
                <On Select="cWatt">
                  <Exit Condition="SiUnit &lt;&gt; TSiUnit.Watt"/>
                  <Execute Statement="State:= TState.Final"/>
                </On>
                <On Select="cFarad">
                  <Exit Condition="SiUnit &lt;&gt; TSiUnit.Farad"/>
                  <Execute Statement="State:= TState.Final"/>
                </On>
                <On Select="cHenry">
                  <Exit Condition="SiUnit &lt;&gt; TSiUnit.Henry"/>
                  <Execute Statement="State:= TState.Final"/>
                </On>
                <On Select="cVolt">
                  <Exit Condition="SiUnit &lt;&gt; TSiUnit.Volt"/>
                  <Execute Statement="State:= TState.Final"/>
                </On>
                <On Select="cAmp">
                  <Exit Condition="SiUnit &lt;&gt; TSiUnit.Amp"/>
                  <Execute Statement="State:= TState.Final"/>
                </On>
                <On Select="cPerc">
                  <Exit Condition="SiUnit &lt;&gt; TSiUnit.Perc"/>
                  <Execute Statement="State:= TState.Final"/>
                </On>
                <On Select="cHz">
                  <Exit Condition="SiUnit &lt;&gt; TSiUnit.Hz"/>
                  <Execute Statement="State:= TState.AfterFirstUnitChar"/>
                </On>
                <Otherwise>
                  <Exit/>
                </Otherwise>
              </Case>
            </On>
            <On Select="TState.AfterFirstUnitChar">
              <Case Expression="ChrI" Optimalisation="integermapping" OrdinalType="widechar">
                <On Select="cHz2">
                  <Exit Condition="SiUnit &lt;&gt; TSiUnit.Hz"/>
                  <Execute Statement="State:= TState.Final"/>
                </On>
                <Otherwise>
                  <Exit/>
                </Otherwise>
              </Case>
            </On>
            <On Select="TState.Final">
              <Case Expression="ChrI" Optimalisation="integermapping" OrdinalType="widechar">
                <On Select="cSpace, cTab">
                </On>
                <Otherwise>
                  <Exit/>
                </Otherwise>
              </Case>
            </On>
            <!-->->-->
          </Case>
        </StringLoop>
        <Case Expression="State" Optimalisation="integermapping">
          <On Select="TState.InNum, TState.InDecimalFrac, TState.AfterMilliOrMeter, TState.AfterPrefix, TState.InPrefixFrac, TState.AfterDecimalPrefix, TState.Final">
            <!--<rep:Reporter.Information Text="Format('Num: %d', Num)" Condition="IsDebugging"/>
            <rep:Reporter.Information Text="Format('Scale: %d', Scale)" Condition="IsDebugging"/>
            <rep:Reporter.Information Text="Format('NumNumScale: %d', NumNumScale)" Condition="IsDebugging"/>
            <rep:Reporter.Information Text="Format('BaseScale: %d', BaseScale)" Condition="IsDebugging"/>-->
            <Execute Statement="Scale:= Scale + NumNumScale - BaseScale"/>
            <!--<rep:Reporter.Information Text="Format('Scale: %d', Scale)" Condition="IsDebugging"/>-->
            <Case Expression="Scale" Optimalisation="integermapping">
              <!--<-<TUnitConvertor.StrToIntValue.NumScaling-->
              <On Select="-19">
                <Exit Condition="(Num mod cScaleFactor19) &gt; 0"/>
                <Execute Statement="CheckIntValue:= Num div cScaleFactor19"/>
              </On>
              <On Select="-18">
                <Exit Condition="(Num mod cScaleFactor18) &gt; 0"/>
                <Execute Statement="CheckIntValue:= Num div cScaleFactor18"/>
              </On>
              <On Select="-17">
                <Exit Condition="(Num mod cScaleFactor17) &gt; 0"/>
                <Execute Statement="CheckIntValue:= Num div cScaleFactor17"/>
              </On>
              <On Select="-16">
                <Exit Condition="(Num mod cScaleFactor16) &gt; 0"/>
                <Execute Statement="CheckIntValue:= Num div cScaleFactor16"/>
              </On>
              <On Select="-15">
                <Exit Condition="(Num mod cScaleFactor15) &gt; 0"/>
                <Execute Statement="CheckIntValue:= Num div cScaleFactor15"/>
              </On>
              <On Select="-14">
                <Exit Condition="(Num mod cScaleFactor14) &gt; 0"/>
                <Execute Statement="CheckIntValue:= Num div cScaleFactor14"/>
              </On>
              <On Select="-13">
                <Exit Condition="(Num mod cScaleFactor13) &gt; 0"/>
                <Execute Statement="CheckIntValue:= Num div cScaleFactor13"/>
              </On>
              <On Select="-12">
                <Exit Condition="(Num mod cScaleFactor12) &gt; 0"/>
                <Execute Statement="CheckIntValue:= Num div cScaleFactor12"/>
              </On>
              <On Select="-11">
                <Exit Condition="(Num mod cScaleFactor11) &gt; 0"/>
                <Execute Statement="CheckIntValue:= Num div cScaleFactor11"/>
              </On>
              <On Select="-10">
                <Exit Condition="(Num mod cScaleFactor10) &gt; 0"/>
                <Execute Statement="CheckIntValue:= Num div cScaleFactor10"/>
              </On>
              <On Select="-9">
                <Exit Condition="(Num mod cScaleFactor09) &gt; 0"/>
                <Execute Statement="CheckIntValue:= Num div cScaleFactor09"/>
              </On>
              <On Select="-8">
                <Exit Condition="(Num mod cScaleFactor08) &gt; 0"/>
                <Execute Statement="CheckIntValue:= Num div cScaleFactor08"/>
              </On>
              <On Select="-7">
                <Exit Condition="(Num mod cScaleFactor07) &gt; 0"/>
                <Execute Statement="CheckIntValue:= Num div cScaleFactor07"/>
              </On>
              <On Select="-6">
                <Exit Condition="(Num mod cScaleFactor06) &gt; 0"/>
                <Execute Statement="CheckIntValue:= Num div cScaleFactor06"/>
              </On>
              <On Select="-5">
                <Exit Condition="(Num mod cScaleFactor05) &gt; 0"/>
                <Execute Statement="CheckIntValue:= Num div cScaleFactor05"/>
              </On>
              <On Select="-4">
                <Exit Condition="(Num mod cScaleFactor04) &gt; 0"/>
                <Execute Statement="CheckIntValue:= Num div cScaleFactor04"/>
              </On>
              <On Select="-3">
                <Exit Condition="(Num mod cScaleFactor03) &gt; 0"/>
                <Execute Statement="CheckIntValue:= Num div cScaleFactor03"/>
              </On>
              <On Select="-2">
                <Exit Condition="(Num mod cScaleFactor02) &gt; 0"/>
                <Execute Statement="CheckIntValue:= Num div cScaleFactor02"/>
              </On>
              <On Select="-1">
                <Exit Condition="(Num mod cScaleFactor01) &gt; 0"/>
                <Execute Statement="CheckIntValue:= Num div cScaleFactor01"/>
              </On>
              <On Select="1">
                <Execute Statement="CheckIntValue:= Num * cScaleFactor01"/>
              </On>
              <On Select="2">
                <Execute Statement="CheckIntValue:= Num * cScaleFactor02"/>
              </On>
              <On Select="3">
                <Execute Statement="CheckIntValue:= Num * cScaleFactor03"/>
              </On>
              <On Select="4">
                <Execute Statement="CheckIntValue:= Num * cScaleFactor04"/>
              </On>
              <On Select="5">
                <Execute Statement="CheckIntValue:= Num * cScaleFactor05"/>
              </On>
              <On Select="6">
                <Execute Statement="CheckIntValue:= Num * cScaleFactor06"/>
              </On>
              <On Select="7">
                <Execute Statement="CheckIntValue:= Num * cScaleFactor07"/>
              </On>
              <On Select="8">
                <Execute Statement="CheckIntValue:= Num * cScaleFactor08"/>
              </On>
              <On Select="9">
                <Execute Statement="CheckIntValue:= Num * cScaleFactor09"/>
              </On>
              <On Select="10">
                <Execute Statement="CheckIntValue:= Num * cScaleFactor10"/>
              </On>
              <On Select="11">
                <Execute Statement="CheckIntValue:= Num * cScaleFactor11"/>
              </On>
              <On Select="12">
                <Execute Statement="CheckIntValue:= Num * cScaleFactor12"/>
              </On>
              <On Select="13">
                <Execute Statement="CheckIntValue:= Num * cScaleFactor13"/>
              </On>
              <On Select="14">
                <Execute Statement="CheckIntValue:= Num * cScaleFactor14"/>
              </On>
              <On Select="15">
                <Execute Statement="CheckIntValue:= Num * cScaleFactor15"/>
              </On>
              <On Select="16">
                <Execute Statement="CheckIntValue:= Num * cScaleFactor16"/>
              </On>
              <On Select="17">
                <Execute Statement="CheckIntValue:= Num * cScaleFactor17"/>
              </On>
              <On Select="18">
                <Execute Statement="CheckIntValue:= Num * cScaleFactor18"/>
              </On>
              <On Select="19">
                <Execute Statement="CheckIntValue:= Num * cScaleFactor19"/>
              </On>
              <!-->->-->
              <On Select="0">
                <Execute Statement="CheckIntValue:= Num"/>
              </On>
              <Otherwise>
                <Exit/>
              </Otherwise>
            </Case>
            <rep:Reporter.Information Text="Format('FracScale: %d', FracScale)" Condition="IsDebugging"/>
            <Block Condition="FracScale &lt; 0">
              <!--<rep:Reporter.Information Text="'*****************'" Condition="IsDebugging"/>
              <rep:Reporter.Information Text="Format('Scale: %d', Scale)" Condition="IsDebugging"/>
              <rep:Reporter.Information Text="Format('FracScale: %d', FracScale)" Condition="IsDebugging"/>
              <rep:Reporter.Information Text="Format('FracNumScale: %d', FracNumScale)" Condition="IsDebugging"/>-->
              <Execute Statement="FracScale:= Scale + FracScale"/>
              <!--<rep:Reporter.Information Text="Format('FracScale: %d', FracScale)" Condition="IsDebugging"/>-->
              <Case Expression="FracScale" Optimalisation="integermapping">
                <!--<-<TUnitConvertor.StrToIntValue.FracScaling-->
                <On Select="-19">
                  <Exit Condition="(Frac mod cScaleFactor19) &gt; 0"/>
                  <Execute Statement="CheckIntValue:= CheckIntValue + Frac div cScaleFactor19"/>
                </On>
                <On Select="-18">
                  <Exit Condition="(Frac mod cScaleFactor18) &gt; 0"/>
                  <Execute Statement="CheckIntValue:= CheckIntValue + Frac div cScaleFactor18"/>
                </On>
                <On Select="-17">
                  <Exit Condition="(Frac mod cScaleFactor17) &gt; 0"/>
                  <Execute Statement="CheckIntValue:= CheckIntValue + Frac div cScaleFactor17"/>
                </On>
                <On Select="-16">
                  <Exit Condition="(Frac mod cScaleFactor16) &gt; 0"/>
                  <Execute Statement="CheckIntValue:= CheckIntValue + Frac div cScaleFactor16"/>
                </On>
                <On Select="-15">
                  <Exit Condition="(Frac mod cScaleFactor15) &gt; 0"/>
                  <Execute Statement="CheckIntValue:= CheckIntValue + Frac div cScaleFactor15"/>
                </On>
                <On Select="-14">
                  <Exit Condition="(Frac mod cScaleFactor14) &gt; 0"/>
                  <Execute Statement="CheckIntValue:= CheckIntValue + Frac div cScaleFactor14"/>
                </On>
                <On Select="-13">
                  <Exit Condition="(Frac mod cScaleFactor13) &gt; 0"/>
                  <Execute Statement="CheckIntValue:= CheckIntValue + Frac div cScaleFactor13"/>
                </On>
                <On Select="-12">
                  <Exit Condition="(Frac mod cScaleFactor12) &gt; 0"/>
                  <Execute Statement="CheckIntValue:= CheckIntValue + Frac div cScaleFactor12"/>
                </On>
                <On Select="-11">
                  <Exit Condition="(Frac mod cScaleFactor11) &gt; 0"/>
                  <Execute Statement="CheckIntValue:= CheckIntValue + Frac div cScaleFactor11"/>
                </On>
                <On Select="-10">
                  <Exit Condition="(Frac mod cScaleFactor10) &gt; 0"/>
                  <Execute Statement="CheckIntValue:= CheckIntValue + Frac div cScaleFactor10"/>
                </On>
                <On Select="-9">
                  <Exit Condition="(Frac mod cScaleFactor09) &gt; 0"/>
                  <Execute Statement="CheckIntValue:= CheckIntValue + Frac div cScaleFactor09"/>
                </On>
                <On Select="-8">
                  <Exit Condition="(Frac mod cScaleFactor08) &gt; 0"/>
                  <Execute Statement="CheckIntValue:= CheckIntValue + Frac div cScaleFactor08"/>
                </On>
                <On Select="-7">
                  <Exit Condition="(Frac mod cScaleFactor07) &gt; 0"/>
                  <Execute Statement="CheckIntValue:= CheckIntValue + Frac div cScaleFactor07"/>
                </On>
                <On Select="-6">
                  <Exit Condition="(Frac mod cScaleFactor06) &gt; 0"/>
                  <Execute Statement="CheckIntValue:= CheckIntValue + Frac div cScaleFactor06"/>
                </On>
                <On Select="-5">
                  <Exit Condition="(Frac mod cScaleFactor05) &gt; 0"/>
                  <Execute Statement="CheckIntValue:= CheckIntValue + Frac div cScaleFactor05"/>
                </On>
                <On Select="-4">
                  <Exit Condition="(Frac mod cScaleFactor04) &gt; 0"/>
                  <Execute Statement="CheckIntValue:= CheckIntValue + Frac div cScaleFactor04"/>
                </On>
                <On Select="-3">
                  <Exit Condition="(Frac mod cScaleFactor03) &gt; 0"/>
                  <Execute Statement="CheckIntValue:= CheckIntValue + Frac div cScaleFactor03"/>
                </On>
                <On Select="-2">
                  <Exit Condition="(Frac mod cScaleFactor02) &gt; 0"/>
                  <Execute Statement="CheckIntValue:= CheckIntValue + Frac div cScaleFactor02"/>
                </On>
                <On Select="-1">
                  <Exit Condition="(Frac mod cScaleFactor01) &gt; 0"/>
                  <Execute Statement="CheckIntValue:= CheckIntValue + Frac div cScaleFactor01"/>
                </On>
                <On Select="1">
                  <Execute Statement="CheckIntValue:= CheckIntValue + Frac * cScaleFactor01"/>
                </On>
                <On Select="2">
                  <Execute Statement="CheckIntValue:= CheckIntValue + Frac * cScaleFactor02"/>
                </On>
                <On Select="3">
                  <Execute Statement="CheckIntValue:= CheckIntValue + Frac * cScaleFactor03"/>
                </On>
                <On Select="4">
                  <Execute Statement="CheckIntValue:= CheckIntValue + Frac * cScaleFactor04"/>
                </On>
                <On Select="5">
                  <Execute Statement="CheckIntValue:= CheckIntValue + Frac * cScaleFactor05"/>
                </On>
                <On Select="6">
                  <Execute Statement="CheckIntValue:= CheckIntValue + Frac * cScaleFactor06"/>
                </On>
                <On Select="7">
                  <Execute Statement="CheckIntValue:= CheckIntValue + Frac * cScaleFactor07"/>
                </On>
                <On Select="8">
                  <Execute Statement="CheckIntValue:= CheckIntValue + Frac * cScaleFactor08"/>
                </On>
                <On Select="9">
                  <Execute Statement="CheckIntValue:= CheckIntValue + Frac * cScaleFactor09"/>
                </On>
                <On Select="10">
                  <Execute Statement="CheckIntValue:= CheckIntValue + Frac * cScaleFactor10"/>
                </On>
                <On Select="11">
                  <Execute Statement="CheckIntValue:= CheckIntValue + Frac * cScaleFactor11"/>
                </On>
                <On Select="12">
                  <Execute Statement="CheckIntValue:= CheckIntValue + Frac * cScaleFactor12"/>
                </On>
                <On Select="13">
                  <Execute Statement="CheckIntValue:= CheckIntValue + Frac * cScaleFactor13"/>
                </On>
                <On Select="14">
                  <Execute Statement="CheckIntValue:= CheckIntValue + Frac * cScaleFactor14"/>
                </On>
                <On Select="15">
                  <Execute Statement="CheckIntValue:= CheckIntValue + Frac * cScaleFactor15"/>
                </On>
                <On Select="16">
                  <Execute Statement="CheckIntValue:= CheckIntValue + Frac * cScaleFactor16"/>
                </On>
                <On Select="17">
                  <Execute Statement="CheckIntValue:= CheckIntValue + Frac * cScaleFactor17"/>
                </On>
                <On Select="18">
                  <Execute Statement="CheckIntValue:= CheckIntValue + Frac * cScaleFactor18"/>
                </On>
                <On Select="19">
                  <Execute Statement="CheckIntValue:= CheckIntValue + Frac * cScaleFactor19"/>
                </On>
                <!-->->-->
                <On Select="0">
                  <Execute Statement="CheckIntValue:= CheckIntValue + Frac"/>
                </On>
                <Otherwise>
                  <Exit/>
                </Otherwise>
              </Case>
            </Block>
            <Execute Statement="CheckIntValue:= -CheckIntValue" Condition="IsNegative"/>
            <Exit Condition="IsError(CheckIntValue)"/>
            <Execute Statement="IntValue:= CheckIntValue"/>
            <Exit Result="True"/>
          </On>
        </Case>
      </Block>
    </Function>

    <Function Identifier="TUnitConvertor.GetScale" Type="Integer">
      <Parameters>
        <Parameter Identifier="Value" Type="Int64"/>
        <Parameter Identifier="Prefix" Type="TPrefix" Direction="Output"/>
      </Parameters>
      <Variables>
        <Variable Identifier="Factor" Type="Int64"/>
        <!--<Variable Identifier="Prefix" Type="TPrefix"/>-->
        <Variable Identifier="NumValue" Type="Int64" Init="0"/>
        <Variable Identifier="IntScale" Type="Integer"/>
        <Variable Identifier="Scale" Type="Integer"/>
        <Variable Identifier="PrefixScale" Type="Integer"/>
      </Variables>
      <Block>
        <Execute Statement="Value:= -Value" Condition="Value &lt; 0"/>
        <Case Expression="Value">
          <On Select="0">
            <Execute Statement="IntScale  := 0"/>
            <Execute Statement="Prefix:= TPrefix.None"/>
            <Exit Result="0"/>
          </On>
          <!--<-<TUnitConvertor.GetScale.DetermineScale-->
          <On Select="cScaleFactor00..cScaleFactor01 - 1">
            <Execute Statement="IntScale  := 0"/>
          </On>
          <On Select="cScaleFactor01..cScaleFactor02 - 1">
            <Execute Statement="IntScale  := 1"/>
          </On>
          <On Select="cScaleFactor02..cScaleFactor03 - 1">
            <Execute Statement="IntScale  := 2"/>
          </On>
          <On Select="cScaleFactor03..cScaleFactor04 - 1">
            <Execute Statement="IntScale  := 3"/>
          </On>
          <On Select="cScaleFactor04..cScaleFactor05 - 1">
            <Execute Statement="IntScale  := 4"/>
          </On>
          <On Select="cScaleFactor05..cScaleFactor06 - 1">
            <Execute Statement="IntScale  := 5"/>
          </On>
          <On Select="cScaleFactor06..cScaleFactor07 - 1">
            <Execute Statement="IntScale  := 6"/>
          </On>
          <On Select="cScaleFactor07..cScaleFactor08 - 1">
            <Execute Statement="IntScale  := 7"/>
          </On>
          <On Select="cScaleFactor08..cScaleFactor09 - 1">
            <Execute Statement="IntScale  := 8"/>
          </On>
          <On Select="cScaleFactor09..cScaleFactor10 - 1">
            <Execute Statement="IntScale  := 9"/>
          </On>
          <On Select="cScaleFactor10..cScaleFactor11 - 1">
            <Execute Statement="IntScale  := 10"/>
          </On>
          <On Select="cScaleFactor11..cScaleFactor12 - 1">
            <Execute Statement="IntScale  := 11"/>
          </On>
          <On Select="cScaleFactor12..cScaleFactor13 - 1">
            <Execute Statement="IntScale  := 12"/>
          </On>
          <On Select="cScaleFactor13..cScaleFactor14 - 1">
            <Execute Statement="IntScale  := 13"/>
          </On>
          <On Select="cScaleFactor14..cScaleFactor15 - 1">
            <Execute Statement="IntScale  := 14"/>
          </On>
          <On Select="cScaleFactor15..cScaleFactor16 - 1">
            <Execute Statement="IntScale  := 15"/>
          </On>
          <On Select="cScaleFactor16..cScaleFactor17 - 1">
            <Execute Statement="IntScale  := 16"/>
          </On>
          <On Select="cScaleFactor17..cScaleFactor18 - 1">
            <Execute Statement="IntScale  := 17"/>
          </On>
          <On Select="cScaleFactor18..cScaleFactor19 - 1">
            <Execute Statement="IntScale  := 18"/>
          </On>
          <!-->->-->
          <Otherwise>
            <Execute Statement="IntScale:= 19"/>
          </Otherwise>
        </Case>
        <Execute Statement="Scale:= IntScale + BaseScale"/>
        <RepeatUntilLoop Expression="True" >
          <!--<-<TUnitConvertor.GetScale.DeterminePrefix-->
          <Block Condition="AllowPrefixTera">
            <Block Condition="(Scale &gt;= cScaleTera)">
              <Block Condition="IsEmpty(PrefixScale) or ((Scale - cScaleTera) &lt;= (PrefixScale-Scale+1))">
                <Execute Statement="Prefix:= TPrefix.Tera"/>
                <Execute Statement="PrefixScale:= cScaleTera"/>
              </Block>
              <Break/>
            </Block>
            <Execute Statement="Prefix:= TPrefix.Tera"/>
            <Execute Statement="PrefixScale:= cScaleTera"/>
          </Block>
          <Block Condition="AllowPrefixGiga">
            <Block Condition="(Scale &gt;= cScaleGiga)">
              <Block Condition="IsEmpty(PrefixScale) or ((Scale - cScaleGiga) &lt;= (PrefixScale-Scale+1))">
                <Execute Statement="Prefix:= TPrefix.Giga"/>
                <Execute Statement="PrefixScale:= cScaleGiga"/>
              </Block>
              <Break/>
            </Block>
            <Execute Statement="Prefix:= TPrefix.Giga"/>
            <Execute Statement="PrefixScale:= cScaleGiga"/>
          </Block>
          <Block Condition="AllowPrefixMega">
            <Block Condition="(Scale &gt;= cScaleMega)">
              <Block Condition="IsEmpty(PrefixScale) or ((Scale - cScaleMega) &lt;= (PrefixScale-Scale+1))">
                <Execute Statement="Prefix:= TPrefix.Mega"/>
                <Execute Statement="PrefixScale:= cScaleMega"/>
              </Block>
              <Break/>
            </Block>
            <Execute Statement="Prefix:= TPrefix.Mega"/>
            <Execute Statement="PrefixScale:= cScaleMega"/>
          </Block>
          <Block Condition="AllowPrefixKilo">
            <Block Condition="(Scale &gt;= cScaleKilo)">
              <Block Condition="IsEmpty(PrefixScale) or ((Scale - cScaleKilo) &lt;= (PrefixScale-Scale+1))">
                <Execute Statement="Prefix:= TPrefix.Kilo"/>
                <Execute Statement="PrefixScale:= cScaleKilo"/>
              </Block>
              <Break/>
            </Block>
            <Execute Statement="Prefix:= TPrefix.Kilo"/>
            <Execute Statement="PrefixScale:= cScaleKilo"/>
          </Block>
          <Block Condition="(Scale &gt;= 0)">
            <Execute Statement="Prefix:= TPrefix.None"/>
            <Execute Statement="PrefixScale:= 0"/>
            <Break/>
          </Block>
          <Execute Statement="Prefix:= TPrefix.None"/>
          <Execute Statement="PrefixScale:= 0"/>
          <Block Condition="AllowPrefixMilli">
            <Block Condition="(Scale &gt;= cScaleMilli)">
              <Block Condition="IsEmpty(PrefixScale) or ((Scale - cScaleMilli) &lt;= (PrefixScale-Scale+1))">
                <Execute Statement="Prefix:= TPrefix.Milli"/>
                <Execute Statement="PrefixScale:= cScaleMilli"/>
              </Block>
              <Break/>
            </Block>
            <Execute Statement="Prefix:= TPrefix.Milli"/>
            <Execute Statement="PrefixScale:= cScaleMilli"/>
          </Block>
          <Block Condition="AllowPrefixMicro">
            <Block Condition="(Scale &gt;= cScaleMicro)">
              <Block Condition="IsEmpty(PrefixScale) or ((Scale - cScaleMicro) &lt;= (PrefixScale-Scale+1))">
                <Execute Statement="Prefix:= TPrefix.Micro"/>
                <Execute Statement="PrefixScale:= cScaleMicro"/>
              </Block>
              <Break/>
            </Block>
            <Execute Statement="Prefix:= TPrefix.Micro"/>
            <Execute Statement="PrefixScale:= cScaleMicro"/>
          </Block>
          <Block Condition="AllowPrefixNano">
            <Block Condition="(Scale &gt;= cScaleNano)">
              <Block Condition="IsEmpty(PrefixScale) or ((Scale - cScaleNano) &lt;= (PrefixScale-Scale+1))">
                <Execute Statement="Prefix:= TPrefix.Nano"/>
                <Execute Statement="PrefixScale:= cScaleNano"/>
              </Block>
              <Break/>
            </Block>
            <Execute Statement="Prefix:= TPrefix.Nano"/>
            <Execute Statement="PrefixScale:= cScaleNano"/>
          </Block>
          <Block Condition="AllowPrefixPico">
            <Block Condition="(Scale &gt;= cScalePico)">
              <Block Condition="IsEmpty(PrefixScale) or ((Scale - cScalePico) &lt;= (PrefixScale-Scale+1))">
                <Execute Statement="Prefix:= TPrefix.Pico"/>
                <Execute Statement="PrefixScale:= cScalePico"/>
              </Block>
              <Break/>
            </Block>
            <Execute Statement="Prefix:= TPrefix.Pico"/>
            <Execute Statement="PrefixScale:= cScalePico"/>
          </Block>
          <Block Condition="AllowPrefixFemto">
            <Block Condition="(Scale &gt;= cScaleFemto)">
              <Block Condition="IsEmpty(PrefixScale) or ((Scale - cScaleFemto) &lt;= (PrefixScale-Scale+1))">
                <Execute Statement="Prefix:= TPrefix.Femto"/>
                <Execute Statement="PrefixScale:= cScaleFemto"/>
              </Block>
              <Break/>
            </Block>
            <Execute Statement="Prefix:= TPrefix.Femto"/>
            <Execute Statement="PrefixScale:= cScaleFemto"/>
          </Block>
          <!-->->-->
        </RepeatUntilLoop>
        <Execute Statement="Scale:= BaseScale - PrefixScale"/>
        <Execute Statement="Result:= Scale"/>
      </Block>
    </Function>

    <Function Identifier="TUnitConvertor.IntValueToStr" Type="string">
      <Parameters>
        <Parameter Identifier="Value" Type="Int64"/>
      </Parameters>
      <Variables>
        <Variable Identifier="Prefix" Type="TPrefix"/>
        <Variable Identifier="Scale" Type="Integer"/>
        <Variable Identifier="ModVal" Type="UInt32"/>
        <Variable Identifier="MandatoryDecimal" Type="Boolean"/>
        <Variable Identifier="IsNegative" Type="Boolean" Init="False"/>
      </Variables>
      <Block>
        <Block Condition="Value &lt; 0">
          <Execute Statement="IsNegative:= True"/>
          <Execute Statement="Value:= -Value"/>
        </Block>
        <Execute Statement="Scale:= GetScale(Value, Prefix)"/>
        <Case Expression="Prefix" Optimalisation="integermapping">
          <!--<-<TUnitConvertor.IntValueToStr.PrefixLookup-->
          <On Select="TPrefix.Tera">
            <Execute Statement="Result:= cTera"/>
          </On>
          <On Select="TPrefix.Giga">
            <Execute Statement="Result:= cGiga"/>
          </On>
          <On Select="TPrefix.Mega">
            <Execute Statement="Result:= cMega"/>
          </On>
          <On Select="TPrefix.Kilo">
            <Execute Statement="Result:= cKilo"/>
          </On>
          <On Select="TPrefix.None">
            <Execute Statement="Result:= ''"/>
          </On>
          <On Select="TPrefix.Milli">
            <Execute Statement="Result:= cMilli"/>
          </On>
          <On Select="TPrefix.Micro">
            <Execute Statement="Result:= cMicro"/>
          </On>
          <On Select="TPrefix.Nano">
            <Execute Statement="Result:= cNano"/>
          </On>
          <On Select="TPrefix.Pico">
            <Execute Statement="Result:= cPico"/>
          </On>
          <On Select="TPrefix.Femto">
            <Execute Statement="Result:= cFemto"/>
          </On>
          <!-->->-->
        </Case>
        <Execute Statement="Result:= Result + UnitS"/>
        <Choose>
          <When Expression="Scale = 0">
            <Execute Statement="Result:= '0' + Result"/>
          </When>
          <When Expression="Scale &lt; 0">
            <Execute Statement="MandatoryDecimal:= False"/>
            <ForLoop Indexer="I" From="Scale" To="-1">
              <Execute Statement="ModVal:= Value mod 10"/>
              <Execute Statement="MandatoryDecimal:= True" Condition="ModVal &gt; 0"/>
              <Execute Statement="Value:= Value div 10"/>
              <Execute Statement="Result:= ToChar(ModVal + cOrd0) + Result" Condition="MandatoryDecimal"/>
            </ForLoop>
            <Execute Statement="Result:= ',' + Result" Condition="MandatoryDecimal"/>
            <RepeatUntilLoop Expression="Value = 0">
              <Execute Statement="ModVal:= Value mod 10"/>
              <Execute Statement="Value:= Value div 10"/>
              <Execute Statement="Result:= ToChar(ModVal + cOrd0) + Result"/>
            </RepeatUntilLoop>
          </When>
          <Otherwise>
            <ForLoop Indexer="I" From="0" To="Scale-1">
              <Execute Statement="Value:= Value * 10"/>
            </ForLoop>
            <Execute Statement="Result:= StrToInt(Value) + Result"/>
          </Otherwise>
        </Choose>
        <Execute Statement="Result:= '-' + Result" Condition="IsNegative"/>
      </Block>
    </Function>

    <Constructor Identifier="TUnitConvertor.Create">
      <Parameters>
        <Parameter Identifier="ConvertorKind" Type="TConvertorKind"/>
      </Parameters>
      <Block>
        <Execute Statement="Self.ConvertorKind:= ConvertorKind"/>
        <Case Expression="ConvertorKind" Optimalisation="integermapping">
          <On Select="TConvertorKind.PicoVolt">
            <Execute Statement="SiUnit:= TSiUnit.Volt"/>
            <Execute Statement="UnitS:= cVolt"/>
            <Execute Statement="Granularity:= TGranularity.Pico"/>
          </On>
          <On Select="TConvertorKind.PicoAmp">
            <Execute Statement="SiUnit:= TSiUnit.Amp"/>
            <Execute Statement="UnitS:= cAmp"/>
            <Execute Statement="Granularity:= TGranularity.Pico"/>
          </On>
          <On Select="TConvertorKind.MicroOhm">
            <Execute Statement="SiUnit:= TSiUnit.Ohm"/>
            <Execute Statement="UnitS:= cOhm"/>
            <Execute Statement="Granularity:= TGranularity.Micro"/>
          </On>
          <On Select="TConvertorKind.FemtoFarad">
            <Execute Statement="SiUnit:= TSiUnit.Farad"/>
            <Execute Statement="UnitS:= cFarad"/>
            <Execute Statement="Granularity:= TGranularity.Femto"/>
          </On>
          <On Select="TConvertorKind.FemtoHenry">
            <Execute Statement="SiUnit:= TSiUnit.Henry"/>
            <Execute Statement="UnitS:= cHenry"/>
            <Execute Statement="Granularity:= TGranularity.Femto"/>
          </On>
          <On Select="TConvertorKind.MicroPerc">
            <Execute Statement="SiUnit:= TSiUnit.Perc"/>
            <Execute Statement="UnitS:= cPerc"/>
            <Execute Statement="Granularity:= TGranularity.Micro"/>
          </On>
          <On Select="TConvertorKind.PicoWatt">
            <Execute Statement="SiUnit:= TSiUnit.Watt"/>
            <Execute Statement="UnitS:= cWatt"/>
            <Execute Statement="Granularity:= TGranularity.Pico"/>
          </On>
          <On Select="TConvertorKind.PicoMeter">
            <Execute Statement="SiUnit:= TSiUnit.Meter"/>
            <Execute Statement="UnitS:= cMeter"/>
            <Execute Statement="Granularity:= TGranularity.Pico"/>
          </On>
          <On Select="TConvertorKind.MicroHz">
            <Execute Statement="SiUnit:= TSiUnit.Hz"/>
            <Execute Statement="UnitS:= sHz"/>
            <Execute Statement="Granularity:= TGranularity.Micro"/>
          </On>
          <Otherwise>
            <Raise Expression="Exception.Create(Format('TUnitConvertor.Create - unsupported ConvertorKind: %d', ConvertorKind))"/>
          </Otherwise>
        </Case>
        <Case Expression="SiUnit" Optimalisation="integermapping">
          <On Select="TSiUnit.Farad">
            <Execute Statement="AllowPrefixMicro:= True"/>
            <Execute Statement="AllowPrefixNano:= True"/>
            <Execute Statement="AllowPrefixPico:= True"/>
          </On>
          <On Select="TSiUnit.Perc">
          </On>
          <Otherwise>
            <Execute Statement="AllowPrefixTera:= False"/>
            <Execute Statement="AllowPrefixGiga:= True"/>
            <Execute Statement="AllowPrefixMega:= True"/>
            <Execute Statement="AllowPrefixKilo:= True"/>
            <Execute Statement="AllowPrefixMilli:= True"/>
            <Execute Statement="AllowPrefixMicro:= True"/>
            <Execute Statement="AllowPrefixNano:= True"/>
            <Execute Statement="AllowPrefixPico:= True"/>
            <Execute Statement="AllowPrefixFemto:= True"/>
          </Otherwise>
        </Case>
        <Case Expression="Granularity">
          <On Select="TGranularity.Micro">
            <Execute Statement="BaseScale:= cScaleMicro"/>
          </On>
          <On Select="TGranularity.Femto">
            <Execute Statement="BaseScale:= cScaleFemto"/>
          </On>
          <On Select="TGranularity.Pico">
            <Execute Statement="BaseScale:= cScalePico"/>
          </On>
          <Otherwise>
            <Raise Expression="Exception.Create(Format('TUnitConvertor.Create - unsupported granularity: %d', Granularity))"/>
          </Otherwise>
        </Case>
        <Execute Statement="ToExtendedFactor:= Power(10, BaseScale)"/>
        <Execute Statement="FromExtendedFactor:= Power(10, -BaseScale)"/>
      </Block>
    </Constructor>

    <Function Identifier="GetUnitConvertor" Type="TUnitConvertor">
      <Parameters>
        <Parameter Identifier="ConvertorKind" Type="TConvertorKind"/>
      </Parameters>
      <Block>
        <Case Expression="ConvertorKind" Optimalisation="integermapping">
          <!--<-<GetConverter.Case-->
          <On Select="TConvertorKind.PicoVolt">
            <Choose>
              <When Expression="IsEmpty(_PicoVoltConverter)">
                <Execute Statement="Result:= TUnitConvertor.Create(ConvertorKind)"/>
                <Execute Statement="_PicoVoltConverter:= Result"/>
              </When>
              <Otherwise>
                <Execute Statement="Result:= _PicoVoltConverter"/>
              </Otherwise>
            </Choose>
          </On>
          <On Select="TConvertorKind.PicoAmp">
            <Choose>
              <When Expression="IsEmpty(_PicoAmpConverter)">
                <Execute Statement="Result:= TUnitConvertor.Create(ConvertorKind)"/>
                <Execute Statement="_PicoAmpConverter:= Result"/>
              </When>
              <Otherwise>
                <Execute Statement="Result:= _PicoAmpConverter"/>
              </Otherwise>
            </Choose>
          </On>
          <On Select="TConvertorKind.MicroOhm">
            <Choose>
              <When Expression="IsEmpty(_MicroOhmConverter)">
                <Execute Statement="Result:= TUnitConvertor.Create(ConvertorKind)"/>
                <Execute Statement="_MicroOhmConverter:= Result"/>
              </When>
              <Otherwise>
                <Execute Statement="Result:= _MicroOhmConverter"/>
              </Otherwise>
            </Choose>
          </On>
          <On Select="TConvertorKind.FemtoFarad">
            <Choose>
              <When Expression="IsEmpty(_FemtoFaradConverter)">
                <Execute Statement="Result:= TUnitConvertor.Create(ConvertorKind)"/>
                <Execute Statement="_FemtoFaradConverter:= Result"/>
              </When>
              <Otherwise>
                <Execute Statement="Result:= _FemtoFaradConverter"/>
              </Otherwise>
            </Choose>
          </On>
          <On Select="TConvertorKind.FemtoHenry">
            <Choose>
              <When Expression="IsEmpty(_FemtoHenryConverter)">
                <Execute Statement="Result:= TUnitConvertor.Create(ConvertorKind)"/>
                <Execute Statement="_FemtoHenryConverter:= Result"/>
              </When>
              <Otherwise>
                <Execute Statement="Result:= _FemtoHenryConverter"/>
              </Otherwise>
            </Choose>
          </On>
          <On Select="TConvertorKind.MicroPerc">
            <Choose>
              <When Expression="IsEmpty(_MicroPercConverter)">
                <Execute Statement="Result:= TUnitConvertor.Create(ConvertorKind)"/>
                <Execute Statement="_MicroPercConverter:= Result"/>
              </When>
              <Otherwise>
                <Execute Statement="Result:= _MicroPercConverter"/>
              </Otherwise>
            </Choose>
          </On>
          <On Select="TConvertorKind.PicoWatt">
            <Choose>
              <When Expression="IsEmpty(_PicoWattConverter)">
                <Execute Statement="Result:= TUnitConvertor.Create(ConvertorKind)"/>
                <Execute Statement="_PicoWattConverter:= Result"/>
              </When>
              <Otherwise>
                <Execute Statement="Result:= _PicoWattConverter"/>
              </Otherwise>
            </Choose>
          </On>
          <On Select="TConvertorKind.PicoMeter">
            <Choose>
              <When Expression="IsEmpty(_PicoMeterConverter)">
                <Execute Statement="Result:= TUnitConvertor.Create(ConvertorKind)"/>
                <Execute Statement="_PicoMeterConverter:= Result"/>
              </When>
              <Otherwise>
                <Execute Statement="Result:= _PicoMeterConverter"/>
              </Otherwise>
            </Choose>
          </On>
          <On Select="TConvertorKind.MicroHz">
            <Choose>
              <When Expression="IsEmpty(_MicroHzConverter)">
                <Execute Statement="Result:= TUnitConvertor.Create(ConvertorKind)"/>
                <Execute Statement="_MicroHzConverter:= Result"/>
              </When>
              <Otherwise>
                <Execute Statement="Result:= _MicroHzConverter"/>
              </Otherwise>
            </Choose>
          </On>
          <!-->->-->
          <Otherwise>
            <Raise Expression="Exception.Create(Format('Invalid ConvertorKind: %d', ConvertorKind))"/>
          </Otherwise>
        </Case>
      </Block>
    </Function>


  </Procedures>
</pkg:Library>