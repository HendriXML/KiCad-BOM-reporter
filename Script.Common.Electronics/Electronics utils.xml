<?xml version="1.0" encoding="utf-8" standalone="no"?>
<pkg:Library
  xsi:schemaLocation="urn:schemas-www-wisware.nl-scriptingpackages ../XmlSchemas.Common.XmlScript/XMLScripting.Packages.xsd"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="urn:schemas-www-wisware.nl-xmlscripting"
  xmlns:pkg="urn:schemas-www-wisware.nl-scriptingpackages"
  xmlns:sys="urn:schemas-www-wisware.nl-xmlscripting"
  xmlns:ado="urn:schemas-www-wisware.nl-xmlscripting-ado"
  xmlns:rep="urn:schemas-www-wisware.nl-xmlscripting-report"
  xmlns:msx="urn:schemas-www-wisware.nl-xmlscripting-xml"
  xmlns:sts="urn:schemas-www-wisware.nl-xmlscripting-showstatus"
  xmlns:inx="urn:schemas-www-wisware.nl-xmlscripting-index"
  xmlns:reg="urn:schemas-www-wisware.nl-xmlscripting-registry"
  xmlns:syu="urn:schemas-www-wisware.nl-xmlscripting-sysutils"
  xmlns:sim="urn:schemas-www-wisware.nl-xmlscripting-simulateuserinput"
  xmlns:fil="urn:schemas-www-wisware.nl-xmlscripting-filemanagement"
  xmlns:fwl="urn:schemas-www-wisware.nl-xmlscripting-windowsfirewall"
  xmlns:cod="urn:schemas-www-wisware.nl-xmlscripting-codeparser"
  xmlns:lil="urn:schemas-www-wisware.nl-xmlscripting-linkedlist"
  xmlns:div="urn:schemas-www-wisware.nl-xmlscripting-dividers"
  xmlns:stm="urn:schemas-www-wisware.nl-xmlscripting-statemanagement">
  <Uses>
    <Use Identifier="SiUnits"/>
  </Uses>
  <Type>
    <DataClass.Forwarded Identifier="TSerie"/>

    <Enumeration Identifier="TESerie" Elements="E3, E6, E12, E24, E48, E96, E192"/>

    <Enumeration Identifier="TMatchValueKind" Elements="LessOrEqual, MoreOrEqual, Closest"/>

    <DataClass Identifier="TSerieNode">
      <Field Identifier="Value" Type="Decimal"/>
      <Field Identifier="LowSerie" Type="TESerie"/>
      <Field Identifier="OrderedPosition" Type="UInt32"/>
      <Field Identifier="Previous" Type="TSerieNode"/>
      <Field Identifier="Next" Type="TSerieNode"/>
      <Field Identifier="Less" Type="TSerieNode"/>
      <Field Identifier="More" Type="TSerieNode"/>
      <Field Identifier="Serie" Type="TSerie"/>
    </DataClass>

    <DataClass Identifier="TSerie" DefaultConstructor="none">
      <Field Identifier="Scale" Type="UInt32"/>
      <Field Identifier="Count" Type="UInt32"/>
      <Field Identifier="Head" Type="TSerieNode"/>
      <Field Identifier="Tail" Type="TSerieNode"/>
      <Field Identifier="Root" Type="TSerieNode"/>
      <Field Identifier="OverFlowFactor" Type="Int64"/>
      <Field Identifier="ESerie" Type="TESerie"/>
    </DataClass>

    <DataClass Identifier="TValueLink">
      <Field Identifier="Value" Type="Quantity"/>
      <Field Identifier="Next" Type="TValueLink"/>
    </DataClass>

    <DataClass Identifier="TESerieValueLink" Inherit="TValueLink">
      <Field Identifier="SerieNode" Type="TSerieNode"/>
      <Field Identifier="LogScale" Type="Integer"/>
    </DataClass>

  </Type>
  <Constants>
    <Constant Identifier="cDeca1" Type="Char" Expression="'d'"/>
    <Constant Identifier="cDeca2" Type="Char" Expression="'a'"/>
    <!--
Yotta
Zetta
Exa
Peta
Tera
Giga
Mega
Kilo
Hecto
Deca
Deci
Centi
Milli
Micro
Nano
Pico
Femto
Atto
Zepto
Yocto
    -->
    <Constant Identifier="cYotta" Type="Char" Expression="'Y'"/>
    <Constant Identifier="cZetta" Type="Char" Expression="'Z'"/>
    <Constant Identifier="cExa" Type="Char" Expression="'E'"/>
    <Constant Identifier="cPeta" Type="Char" Expression="'P'"/>
    <Constant Identifier="cTera" Type="Char" Expression="'T'"/>
    <Constant Identifier="cGiga" Type="Char" Expression="'G'"/>
    <Constant Identifier="cMega" Type="Char" Expression="'M'"/>
    <Constant Identifier="cKilo" Type="Char" Expression="'k'"/>
    <Constant Identifier="cHecto" Type="Char" Expression="'h'"/>
    <Constant Identifier="cDeca" Type="string" Expression="cDeca1 + cDeca2"/>
    <Constant Identifier="cDeci" Type="Char" Expression="'d'"/>
    <Constant Identifier="cCenti" Type="Char" Expression="'c'"/>
    <Constant Identifier="cMilli" Type="Char" Expression="'m'"/>
    <Constant Identifier="cMicro" Type="Char" Expression="'μ'"/>
    <Constant Identifier="cNano" Type="Char" Expression="'n'"/>
    <Constant Identifier="cPico" Type="Char" Expression="'p'"/>
    <Constant Identifier="cFemto" Type="Char" Expression="'f'"/>
    <Constant Identifier="cAtto" Type="Char" Expression="'a'"/>
    <Constant Identifier="cZepto" Type="Char" Expression="'z'"/>
    <Constant Identifier="cYocto" Type="Char" Expression="'y'"/>

    <Constant Identifier="cMicroAlt" Type="Char" Expression="'µ'"/>
    <Constant Identifier="cMicroAlt2" Type="Char" Expression="'u'"/>
    <Constant Identifier="cR" Type="Char" Expression="'R'"/>
    <Constant Identifier="cE" Type="Char" Expression="'E'"/>
    <Constant Identifier="cE2" Type="Char" Expression="'e'"/>
    <Constant Identifier="cK" Type="Char" Expression="'K'"/>


    <Constant Identifier="sKibi" Type="string" Expression="'Ki'"/>
    <Constant Identifier="sMebi" Type="string" Expression="'Mi'"/>
    <Constant Identifier="sGibi" Type="string" Expression="'Gi'"/>
    <Constant Identifier="sTebi" Type="string" Expression="'Ti'"/>
    <Constant Identifier="sPebi" Type="string" Expression="'Pi'"/>
    <Constant Identifier="sExbi" Type="string" Expression="'Ei'"/>
    <Constant Identifier="sZebi" Type="string" Expression="'Zi'"/>
    <Constant Identifier="sYobi" Type="string" Expression="'Yi'"/>

    <Constant Identifier="cSpace" Type="Char" Expression="' '"/>
    <Constant Identifier="cTab" Type="Char" Expression="#9"/>
    <Constant Identifier="c0" Type="Char" Expression="'0'"/>
    <Constant Identifier="cOrd0" Type="UInt32" Expression="CharOrd(c0)"/>
    <Constant Identifier="c1" Type="Char" Expression="'1'"/>
    <Constant Identifier="c9" Type="Char" Expression="'9'"/>
    <Constant Identifier="cMilliOrMeter" Type="Char" Expression="cMilli"/>
    <Constant Identifier="cDecimalSep1" Type="Char" Expression="'.'"/>
    <Constant Identifier="cDecimalSep2" Type="Char" Expression="','"/>
    <Constant Identifier="cNegative" Type="Char" Expression="'-'"/>
    <Constant Identifier="cPositive" Type="Char" Expression="'+'"/>
    <!--
Ohm
Watt
Farad
Henry
Volt
Amp
Perc
Hz
Meter
-->
    <Constant Identifier="cOhm" Type="Char" Expression="'Ω'"/>
    <Constant Identifier="cWatt" Type="Char" Expression="'W'"/>
    <Constant Identifier="cFarad" Type="Char" Expression="'F'"/>
    <Constant Identifier="cHenry" Type="Char" Expression="'H'"/>
    <Constant Identifier="cVolt" Type="Char" Expression="'V'"/>
    <Constant Identifier="cAmp" Type="Char" Expression="'A'"/>
    <Constant Identifier="cPerc" Type="Char" Expression="'%'"/>
    <Constant Identifier="sHz" Type="string" Expression="'Hz'"/>
    <Constant Identifier="cHz" Type="Char" Expression="'H'"/>
    <Constant Identifier="cHz2" Type="Char" Expression="'z'"/>
    <Constant Identifier="cHenry_Hz" Type="Char" Expression="'H'"/>
    <Constant Identifier="cMeter" Type="Char" Expression="'m'"/>
    <Constant Identifier="cPercentage" Type="Char" Expression="'%'"/>
    <Constant Identifier="cSecond" Type="Char" Expression="'s'"/>
    <Constant Identifier="sKW" Type="string" Expression="'K/W'"/>
    <Constant Identifier="sCelcius" Type="string" Expression="'°C'"/>

    <Constant Identifier="cScaleYotta" Type="Integer" Expression="24"/>
    <Constant Identifier="cScaleZetta" Type="Integer" Expression="21"/>
    <Constant Identifier="cScaleExa" Type="Integer" Expression="18"/>
    <Constant Identifier="cScalePeta" Type="Integer" Expression="15"/>
    <Constant Identifier="cScaleTera" Type="Integer" Expression="12"/>
    <Constant Identifier="cScaleGiga" Type="Integer" Expression="9"/>
    <Constant Identifier="cScaleMega" Type="Integer" Expression="6"/>
    <Constant Identifier="cScaleKilo" Type="Integer" Expression="3"/>
    <Constant Identifier="cScaleHecto" Type="Integer" Expression="2"/>
    <Constant Identifier="cScaleDeca" Type="Integer" Expression="1"/>
    <Constant Identifier="cScaleNone" Type="Integer" Expression="0"/>
    <Constant Identifier="cScaleDeci" Type="Integer" Expression="-1"/>
    <Constant Identifier="cScaleCenti" Type="Integer" Expression="-2"/>
    <Constant Identifier="cScaleMilli" Type="Integer" Expression="-3"/>
    <Constant Identifier="cScaleMicro" Type="Integer" Expression="-6"/>
    <Constant Identifier="cScaleNano" Type="Integer" Expression="-9"/>
    <Constant Identifier="cScalePico" Type="Integer" Expression="-12"/>
    <Constant Identifier="cScaleFemto" Type="Integer" Expression="-15"/>
    <Constant Identifier="cScaleAtto" Type="Integer" Expression="-18"/>
    <Constant Identifier="cScaleZepto" Type="Integer" Expression="-21"/>
    <Constant Identifier="cScaleYocto" Type="Integer" Expression="-24"/>

    <Constant Identifier="kilo" Type="Integer" Expression="1000"/>
    <Constant Identifier="Mega" Type="Integer" Expression="1000 * kilo"/>
    <Constant Identifier="Giga" Type="Integer" Expression="1000 * Mega"/>

    <Constant Identifier="k" Type="Integer" Expression="kilo"/>
    <Constant Identifier="M" Type="Integer" Expression="Mega"/>
    <Constant Identifier="G" Type="Integer" Expression="Giga"/>

    <Constant Identifier="nano" Type="Extended" Expression="1/1000000000"/>
    <Constant Identifier="micro" Type="Extended" Expression="1/1000000"/>
    <Constant Identifier="Milli" Type="Extended" Expression="1/1000"/>
  </Constants>
  <Variables>
    <Variable Identifier="_E192Serie" Type="TSerie"/>
    <Variable Identifier="_E96Serie" Type="TSerie"/>
    <Variable Identifier="_E48Serie" Type="TSerie"/>
    <Variable Identifier="_E24Serie" Type="TSerie"/>
    <Variable Identifier="_E12Serie" Type="TSerie"/>
    <Variable Identifier="_E6Serie" Type="TSerie"/>
    <Variable Identifier="_E3Serie" Type="TSerie"/>
  </Variables>
  <Procedures>

    <Function Identifier="DecodeReference" Type="Boolean">
      <Parameters>
        <Parameter Identifier="Reference" Type="string"/>
        <Parameter Identifier="Prefix" Type="string" Direction="Output"/>
        <Parameter Identifier="Counter" Type="UInt32" Direction="Output"/>
      </Parameters>
      <Variables>
        <Variable Identifier="ValidEndState" Type="Boolean" Init="False"/>
        <Variable Identifier="locCounter" Type="UInt64"/>
        <Variable Identifier="locPrefix" Type="string"/>
      </Variables>
      <Block>
        <Execute Statement="Result:= False"/>
        <stm:StateHandler InitialState="Start">
          <StringLoop StringValue="Reference" OrdinalIdentifier="ChrI" CharacterIdentifier="Chr">
            <stm:HandleStates>
              <stm:State Name="Start">
                <Case Expression="ChrI" Optimalisation="integermapping" OrdinalType="widechar">
                  <On Select="' ', #9">
                  </On>
                  <On Select="'a'..'z', 'A'..'Z'">
                    <Execute Statement="locPrefix:= Chr"/>
                    <stm:SetState Name="InPrefix"/>
                  </On>
                  <Otherwise>
                    <Exit/>
                  </Otherwise>
                </Case>
              </stm:State>
              <stm:State Name="InPrefix">
                <Case Expression="ChrI" Optimalisation="integermapping" OrdinalType="widechar">
                  <On Select="'a'..'z', 'A'..'Z'">
                    <Execute Statement="locPrefix:= locPrefix + Chr"/>
                  </On>
                  <On Select="'0'..'9'">
                    <Execute Statement="locCounter:= ChrI - CharOrd('0')"/>
                    <stm:SetState Name="InNum"/>
                    <Execute Statement="ValidEndState:= True"/>
                  </On>
                  <Otherwise>
                    <Exit/>
                  </Otherwise>
                </Case>
              </stm:State>
              <stm:State Name="InNum">
                <Case Expression="ChrI" Optimalisation="integermapping" OrdinalType="widechar">
                  <On Select="' ', #9">
                    <stm:SetState Name="InEndWhitespace"/>
                  </On>
                  <On Select="'0'..'9'">
                    <Execute Statement="locCounter:= locCounter * 10 + (ChrI - CharOrd('0'))"/>
                  </On>
                  <Otherwise>
                    <Exit/>
                  </Otherwise>
                </Case>
              </stm:State>
              <stm:State Name="InEndWhitespace">
                <Case Expression="ChrI" Optimalisation="integermapping" OrdinalType="widechar">
                  <On Select="' ', #9">
                  </On>
                  <Otherwise>
                    <Exit/>
                  </Otherwise>
                </Case>
              </stm:State>
            </stm:HandleStates>
          </StringLoop>
        </stm:StateHandler>
        <Block Condition="ValidEndState">
          <Execute Statement="Counter:= locCounter"/>
          <Execute Statement="Prefix:= locPrefix"/>
          <Execute Statement="Result:= True"/>
        </Block>
      </Block>
    </Function>

    <Function Identifier="TSerie.RangeItemCount" Type="Int64">
      <Parameters>
        <Parameter Identifier="NodeLow" Type="TSerieNode"/>
        <Parameter Identifier="LogScaleLow" Type="Integer"/>
        <Parameter Identifier="NodeHigh" Type="TSerieNode"/>
        <Parameter Identifier="LogScaleHigh" Type="Integer"/>
      </Parameters>
      <Block>
        <Execute Statement="Result:= (LogScaleHigh * Count + NodeHigh.OrderedPosition) - (LogScaleLow * Count + NodeLow.OrderedPosition)"/>
      </Block>
    </Function>

    <Function Identifier="TSerie.GetRangeValues" Type="TESerieValueLink">
      <Parameters>
        <Parameter Identifier="NodeLow" Type="TSerieNode"/>
        <Parameter Identifier="LogScaleLow" Type="Integer"/>
        <Parameter Identifier="NodeHigh" Type="TSerieNode"/>
        <Parameter Identifier="LogScaleHigh" Type="Integer"/>
        <Parameter Identifier="UnitS" Type="UnitString"/>
        <Parameter Identifier="ToleranceV" Type="Extended"/>
      </Parameters>
      <Variables>
        <Variable Identifier="RunningNode" Type="TSerieNode" Init="NodeLow"/>
        <Variable Identifier="RunningLogScale" Type="Integer" Init="LogScaleLow"/>
        <Variable Identifier="Scale" Type="Extended" Init="Power10(1, RunningLogScale)"/>
        <Variable Identifier="Tail" Type="TESerieValueLink"/>
        <Variable Identifier="NewLink" Type="TESerieValueLink"/>
        <Variable Identifier="Value" Type="Extended"/>
      </Variables>
      <Block>
        <Execute Statement="Result:= TESerieValueLink.Create"/>
        <Execute Statement="Value:= (RunningNode.Value * Scale)"/>
        <Execute Statement="Result.Value:= Value ~ UnitS ± ((Value * ToleranceV) ~ UnitS)"/>
        <Execute Statement="Result.SerieNode:= RunningNode"/>
        <Execute Statement="Result.LogScale:= RunningLogScale"/>
        <Execute Statement="Tail:= Result"/>
        <Exit Condition="(RunningNode = NodeHigh) and (RunningLogScale = LogScaleHigh)"/>
        <RepeatUntilLoop Expression="(RunningNode = NodeHigh) and (RunningLogScale = LogScaleHigh)">
          <Choose>
            <When Expression="Assigned(RunningNode.Next)">
              <Execute Statement="RunningNode:= RunningNode.Next"/>
            </When>
            <Otherwise>
              <Execute Statement="RunningNode:= Self.Head"/>
              <Execute Statement="RunningLogScale:= RunningLogScale + 1"/>
              <Execute Statement="Scale:= Scale * 10"/>
            </Otherwise>
          </Choose>
          <Execute Statement="NewLink:= TESerieValueLink.Create"/>
          <Execute Statement="Value:= (RunningNode.Value * Scale)"/>
          <Execute Statement="NewLink.Value:= Value ~ UnitS ± ((Value * ToleranceV) ~ UnitS)"/>
          <Execute Statement="NewLink.SerieNode:= RunningNode"/>
          <Execute Statement="NewLink.LogScale:= RunningLogScale"/>
          <Execute Statement="Tail.Next:= NewLink"/>
          <Execute Statement="Tail:= NewLink"/>
          <ExitOnAbortRequest/>
        </RepeatUntilLoop>
      </Block>
    </Function>

    <Function Identifier="TSerie.FindNode" Type="TSerieNode">
      <Parameters>
        <Parameter Identifier="Value" Type="Decimal"/>
      </Parameters>
      <Block>
        <Variable Identifier="Scale" Type="Integer"/>
        <Variable Identifier="UnscaledValue" Type="Decimal" Init="ExtractDecimalScale(Value, Scale)"/>
        <Execute Statement="Result:= Root"/>
        <WhileLoop Expression="Assigned(Result)">
          <Choose>
            <When Expression="UnscaledValue &lt; Result.Value">
              <Execute Statement="Result:= Result.Less"/>
            </When>
            <When Expression="UnscaledValue &gt; Result.Value">
              <Execute Statement="Result:= Result.More"/>
            </When>
            <Otherwise>
              <Exit/>
            </Otherwise>
          </Choose>
        </WhileLoop>
      </Block>
    </Function>

    <Function Identifier="TSerie.MatchNode" Type="TSerieNode">
      <Parameters>
        <Parameter Identifier="Value" Type="Decimal"/>
        <Parameter Identifier="MatchKind" Type="TMatchValueKind"/>
        <Parameter Identifier="MatchedValue" Type="Decimal" Direction="Output"/>
      </Parameters>
      <Variables>
        <Variable Identifier="Less" Type="TSerieNode" Init="ObjNil"/>
        <Variable Identifier="More" Type="TSerieNode" Init="ObjNil"/>
        <Variable Identifier="Scale" Type="Integer"/>
        <Variable Identifier="UnscaledValue" Type="Decimal"/>
      </Variables>
      <Block>
        <Execute Statement="UnscaledValue:= ExtractDecimalScale(Value, Scale)"/>
        <Choose>
          <When Expression="IsZeroDecimal(Value)">
            <Execute Statement="MatchedValue:= Value"/>
            <Exit Result="ObjNil"/>
          </When>
          <Otherwise>
            <Execute Statement="Result:= Root"/>
            <WhileLoop Expression="Assigned(Result)">
              <Choose>
                <When Expression="UnscaledValue &lt; Result.Value">
                  <Execute Statement="More:= Result"/>
                  <Execute Statement="Result:= Result.Less"/>
                </When>
                <When Expression="UnscaledValue &gt; Result.Value">
                  <Execute Statement="Less:= Result"/>
                  <Execute Statement="Result:= Result.More"/>
                </When>
                <Otherwise>
                  <Execute Statement="MatchedValue:= Value"/>
                  <Exit/>
                </Otherwise>
              </Choose>
            </WhileLoop>
            <Case Expression="MatchKind" Optimalisation="integermapping">
              <On Select="TMatchValueKind.LessOrEqual">
                <Choose>
                  <When Expression="Assigned(Less)">
                    <Execute Statement="Result:= Less"/>
                    <Execute Statement="MatchedValue:= ScaleDecimal(Result.Value, Scale)"/>
                  </When>
                  <Otherwise>
                    <Execute Statement="Result:= Tail"/>
                    <Execute Statement="MatchedValue:= ScaleDecimal(Tail.Value, Scale - 1)"/>
                  </Otherwise>
                </Choose>
              </On>
              <On Select="TMatchValueKind.MoreOrEqual">
                <Choose>
                  <When Expression="Assigned(More)">
                    <Execute Statement="Result:= More"/>
                    <Execute Statement="MatchedValue:= ScaleDecimal(Result.Value, Scale)"/>
                  </When>
                  <Otherwise>
                    <Execute Statement="Result:= Head"/>
                    <Execute Statement="MatchedValue:= ScaleDecimal(Result.Value, Scale + 1)"/>
                  </Otherwise>
                </Choose>
              </On>
              <On Select="TMatchValueKind.Closest">
                <Variable Identifier="CenterValueE" Type="Extended"/>
                <Variable Identifier="CenterValue" Type="Decimal"/>
                <Choose>
                  <When Expression="Assigned(Less) and Assigned(More)">
                    <Execute Statement="CenterValueE:= (Less.Value * 0.5) + (More.Value * 0.5)"/>
                    <Execute Statement="CenterValue:= CenterValueE"/>
                    <Choose>
                      <When Expression="UnscaledValue &lt;= CenterValue">
                        <Execute Statement="Result:= Less"/>
                        <Execute Statement="MatchedValue:= ScaleDecimal(Result.Value, Scale)"/>
                      </When>
                      <Otherwise>
                        <Execute Statement="Result:= More"/>
                        <Execute Statement="MatchedValue:= ScaleDecimal(Result.Value, Scale)"/>
                      </Otherwise>
                    </Choose>
                  </When>
                  <When Expression="not Assigned(Less)">
                    <Execute Statement="CenterValueE:= (ScaleDecimal(Tail.Value, - 1) * 0.5) + (More.Value * 0.5)"/>
                    <Execute Statement="CenterValue:= CenterValueE"/>
                    <Choose>
                      <When Expression="UnscaledValue &lt;= CenterValue">
                        <Execute Statement="Result:= Tail"/>
                        <Execute Statement="MatchedValue:= ScaleDecimal(Result.Value, Scale - 1)"/>
                      </When>
                      <Otherwise>
                        <Execute Statement="Result:= More"/>
                        <Execute Statement="MatchedValue:= ScaleDecimal(Result.Value, Scale)"/>
                      </Otherwise>
                    </Choose>
                  </When>
                  <When Expression="not Assigned(More)">
                    <Execute Statement="CenterValueE:= (ScaleDecimal(Head.Value, 1) * 0.5) + (Less.Value * 0.5)"/>
                    <Execute Statement="CenterValue:= CenterValueE"/>
                    <!--<rep:Reporter.Information Text="Format('%s', DecimalToStr(UnscaledValue, 32, TDF.ScientificNoTrailingZero, True))"/>
                    <rep:Reporter.Information Text="Format('More: %s', DecimalToStr(ScaleDecimal(Head.Value, Scale + 1), 32, TDF.ScientificNoTrailingZero, True))"/>
                    <rep:Reporter.Information Text="Format('Less: %s', DecimalToStr(Less.Value, 32, TDF.ScientificNoTrailingZero, True))"/>
                    <rep:Reporter.Information Text="Format('Mid: %s', DecimalToStr(CenterValue, 32, TDF.ScientificNoTrailingZero, True))"/>-->
                    <Choose>
                      <When Expression="UnscaledValue &lt;= CenterValue">
                        <Execute Statement="Result:= Less"/>
                        <Execute Statement="MatchedValue:= ScaleDecimal(Result.Value, Scale)"/>
                      </When>
                      <Otherwise>
                        <Execute Statement="Result:= Head"/>
                        <Execute Statement="MatchedValue:= ScaleDecimal(Result.Value, Scale + 1)"/>
                      </Otherwise>
                    </Choose>
                  </When>
                  <Otherwise>
                    <Raise Expression="Exception.Create('Invalid operation')"/>
                  </Otherwise>
                </Choose>
              </On>
            </Case>
          </Otherwise>
        </Choose>
      </Block>
    </Function>

    <Constructor Identifier="TSerie.Create">
      <Parameters>
        <Parameter Identifier="SerieType" Type="TESerie"/>
      </Parameters>
      <Variables>
        <Variable Identifier="Head" Type="TSerieNode" />
        <Variable Identifier="Tail" Type="TSerieNode" />
      </Variables>
      <Procedures>

        <Procedure Identifier="AddValue">
          <Parameters>
            <Parameter Identifier="Value" Type="Decimal"/>
            <Parameter Identifier="LowSerie" Type="TESerie"/>
          </Parameters>
          <Variables>
            <Variable Identifier="Scale" Type="Integer"/>
            <Variable Identifier="NewNode" Type="TSerieNode" Init="TSerieNode.Create(ExtractDecimalScale(Value, Scale), LowSerie)"/>
          </Variables>
          <Block>
            <Choose>
              <When Expression="IsEmpty(Head)">
                <Execute Statement="Head:= NewNode"/>
              </When>
              <Otherwise>
                <Execute Statement="NewNode.Previous:= Tail"/>
                <Execute Statement="Tail.Next:= NewNode"/>
              </Otherwise>
            </Choose>
            <Execute Statement="Tail:= NewNode"/>
          </Block>
        </Procedure>

        <Procedure Identifier="InitESerie2">
          <Block>
            <Execute Statement="AddValue(10, TESerie.E3)"  Condition="SerieType &gt;=TESerie.E3"/>
            <Execute Statement="AddValue(11, TESerie.E24)" Condition="SerieType &gt;=TESerie.E24"/>
            <Execute Statement="AddValue(12, TESerie.E12)" Condition="SerieType &gt;=TESerie.E12"/>
            <Execute Statement="AddValue(13, TESerie.E24)" Condition="SerieType &gt;=TESerie.E24"/>
            <Execute Statement="AddValue(15, TESerie.E6)"  Condition="SerieType &gt;=TESerie.E6"/>
            <Execute Statement="AddValue(16, TESerie.E24)" Condition="SerieType &gt;=TESerie.E24"/>
            <Execute Statement="AddValue(18, TESerie.E12)" Condition="SerieType &gt;=TESerie.E12"/>
            <Execute Statement="AddValue(20, TESerie.E24)" Condition="SerieType &gt;=TESerie.E24"/>
            <Execute Statement="AddValue(22, TESerie.E3)"  Condition="SerieType &gt;=TESerie.E3"/>
            <Execute Statement="AddValue(24, TESerie.E24)" Condition="SerieType &gt;=TESerie.E24"/>
            <Execute Statement="AddValue(27, TESerie.E12)" Condition="SerieType &gt;=TESerie.E12"/>
            <Execute Statement="AddValue(30, TESerie.E24)" Condition="SerieType &gt;=TESerie.E24"/>
            <Execute Statement="AddValue(33, TESerie.E6)"  Condition="SerieType &gt;=TESerie.E6"/>
            <Execute Statement="AddValue(36, TESerie.E24)" Condition="SerieType &gt;=TESerie.E24"/>
            <Execute Statement="AddValue(39, TESerie.E12)" Condition="SerieType &gt;=TESerie.E12"/>
            <Execute Statement="AddValue(43, TESerie.E24)" Condition="SerieType &gt;=TESerie.E24"/>
            <Execute Statement="AddValue(47, TESerie.E3)"  Condition="SerieType &gt;=TESerie.E3"/>
            <Execute Statement="AddValue(51, TESerie.E24)" Condition="SerieType &gt;=TESerie.E24"/>
            <Execute Statement="AddValue(56, TESerie.E12)" Condition="SerieType &gt;=TESerie.E12"/>
            <Execute Statement="AddValue(62, TESerie.E24)" Condition="SerieType &gt;=TESerie.E24"/>
            <Execute Statement="AddValue(68, TESerie.E6)"  Condition="SerieType &gt;=TESerie.E6"/>
            <Execute Statement="AddValue(75, TESerie.E24)" Condition="SerieType &gt;=TESerie.E24"/>
            <Execute Statement="AddValue(82, TESerie.E12)" Condition="SerieType &gt;=TESerie.E12"/>
            <Execute Statement="AddValue(91, TESerie.E24)" Condition="SerieType &gt;=TESerie.E24"/>
          </Block>
        </Procedure>

        <Procedure Identifier="InitESerie3">
          <Block>
            <Execute Statement="AddValue(100, TESerie.E48)"  Condition="SerieType &gt;=TESerie.E48"/>
            <Execute Statement="AddValue(101, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(102, TESerie.E96)"  Condition="SerieType &gt;=TESerie.E96"/>
            <Execute Statement="AddValue(104, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(105, TESerie.E48)"  Condition="SerieType &gt;=TESerie.E48"/>
            <Execute Statement="AddValue(106, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(107, TESerie.E96)"  Condition="SerieType &gt;=TESerie.E96"/>
            <Execute Statement="AddValue(109, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(110, TESerie.E48)"  Condition="SerieType &gt;=TESerie.E48"/>
            <Execute Statement="AddValue(111, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(113, TESerie.E96)"  Condition="SerieType &gt;=TESerie.E96"/>
            <Execute Statement="AddValue(114, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(115, TESerie.E48)"  Condition="SerieType &gt;=TESerie.E48"/>
            <Execute Statement="AddValue(117, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(118, TESerie.E96)"  Condition="SerieType &gt;=TESerie.E96"/>
            <Execute Statement="AddValue(120, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(121, TESerie.E48)"  Condition="SerieType &gt;=TESerie.E48"/>
            <Execute Statement="AddValue(123, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(124, TESerie.E96)"  Condition="SerieType &gt;=TESerie.E96"/>
            <Execute Statement="AddValue(126, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(127, TESerie.E48)"  Condition="SerieType &gt;=TESerie.E48"/>
            <Execute Statement="AddValue(129, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(130, TESerie.E96)"  Condition="SerieType &gt;=TESerie.E96"/>
            <Execute Statement="AddValue(132, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(133, TESerie.E48)"  Condition="SerieType &gt;=TESerie.E48"/>
            <Execute Statement="AddValue(135, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(137, TESerie.E96)"  Condition="SerieType &gt;=TESerie.E96"/>
            <Execute Statement="AddValue(138, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(140, TESerie.E48)"  Condition="SerieType &gt;=TESerie.E48"/>
            <Execute Statement="AddValue(142, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(143, TESerie.E96)"  Condition="SerieType &gt;=TESerie.E96"/>
            <Execute Statement="AddValue(145, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(147, TESerie.E48)"  Condition="SerieType &gt;=TESerie.E48"/>
            <Execute Statement="AddValue(149, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(150, TESerie.E96)"  Condition="SerieType &gt;=TESerie.E96"/>
            <Execute Statement="AddValue(152, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(154, TESerie.E48)"  Condition="SerieType &gt;=TESerie.E48"/>
            <Execute Statement="AddValue(156, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(158, TESerie.E96)"  Condition="SerieType &gt;=TESerie.E96"/>
            <Execute Statement="AddValue(160, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(162, TESerie.E48)"  Condition="SerieType &gt;=TESerie.E48"/>
            <Execute Statement="AddValue(164, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(165, TESerie.E96)"  Condition="SerieType &gt;=TESerie.E96"/>
            <Execute Statement="AddValue(167, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(169, TESerie.E48)"  Condition="SerieType &gt;=TESerie.E48"/>
            <Execute Statement="AddValue(172, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(174, TESerie.E96)"  Condition="SerieType &gt;=TESerie.E96"/>
            <Execute Statement="AddValue(176, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(178, TESerie.E48)"  Condition="SerieType &gt;=TESerie.E48"/>
            <Execute Statement="AddValue(180, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(182, TESerie.E96)"  Condition="SerieType &gt;=TESerie.E96"/>
            <Execute Statement="AddValue(184, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(187, TESerie.E48)"  Condition="SerieType &gt;=TESerie.E48"/>
            <Execute Statement="AddValue(189, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(191, TESerie.E96)"  Condition="SerieType &gt;=TESerie.E96"/>
            <Execute Statement="AddValue(193, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(196, TESerie.E48)"  Condition="SerieType &gt;=TESerie.E48"/>
            <Execute Statement="AddValue(198, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(200, TESerie.E96)"  Condition="SerieType &gt;=TESerie.E96"/>
            <Execute Statement="AddValue(203, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(205, TESerie.E48)"  Condition="SerieType &gt;=TESerie.E48"/>
            <Execute Statement="AddValue(208, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(210, TESerie.E96)"  Condition="SerieType &gt;=TESerie.E96"/>
            <Execute Statement="AddValue(213, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(215, TESerie.E48)"  Condition="SerieType &gt;=TESerie.E48"/>
            <Execute Statement="AddValue(218, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(221, TESerie.E96)"  Condition="SerieType &gt;=TESerie.E96"/>
            <Execute Statement="AddValue(223, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(226, TESerie.E48)"  Condition="SerieType &gt;=TESerie.E48"/>
            <Execute Statement="AddValue(229, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(232, TESerie.E96)"  Condition="SerieType &gt;=TESerie.E96"/>
            <Execute Statement="AddValue(234, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(237, TESerie.E48)"  Condition="SerieType &gt;=TESerie.E48"/>
            <Execute Statement="AddValue(240, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(243, TESerie.E96)"  Condition="SerieType &gt;=TESerie.E96"/>
            <Execute Statement="AddValue(246, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(249, TESerie.E48)"  Condition="SerieType &gt;=TESerie.E48"/>
            <Execute Statement="AddValue(252, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(255, TESerie.E96)"  Condition="SerieType &gt;=TESerie.E96"/>
            <Execute Statement="AddValue(258, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(261, TESerie.E48)"  Condition="SerieType &gt;=TESerie.E48"/>
            <Execute Statement="AddValue(264, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(267, TESerie.E96)"  Condition="SerieType &gt;=TESerie.E96"/>
            <Execute Statement="AddValue(271, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(274, TESerie.E48)"  Condition="SerieType &gt;=TESerie.E48"/>
            <Execute Statement="AddValue(277, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(280, TESerie.E96)"  Condition="SerieType &gt;=TESerie.E96"/>
            <Execute Statement="AddValue(284, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(287, TESerie.E48)"  Condition="SerieType &gt;=TESerie.E48"/>
            <Execute Statement="AddValue(291, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(294, TESerie.E96)" Condition="SerieType &gt;=TESerie.E96"/>
            <Execute Statement="AddValue(298, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(301, TESerie.E48)" Condition="SerieType &gt;=TESerie.E48"/>
            <Execute Statement="AddValue(305, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(309, TESerie.E96)" Condition="SerieType &gt;=TESerie.E96"/>
            <Execute Statement="AddValue(312, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(316, TESerie.E48)"  Condition="SerieType &gt;=TESerie.E48"/>
            <Execute Statement="AddValue(320, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(324, TESerie.E96)"  Condition="SerieType &gt;=TESerie.E96"/>
            <Execute Statement="AddValue(328, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(332, TESerie.E48)"  Condition="SerieType &gt;=TESerie.E48"/>
            <Execute Statement="AddValue(336, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(340, TESerie.E96)"  Condition="SerieType &gt;=TESerie.E96"/>
            <Execute Statement="AddValue(344, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(348, TESerie.E48)"  Condition="SerieType &gt;=TESerie.E48"/>
            <Execute Statement="AddValue(352, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(357, TESerie.E96)"  Condition="SerieType &gt;=TESerie.E96"/>
            <Execute Statement="AddValue(361, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(365, TESerie.E48)"  Condition="SerieType &gt;=TESerie.E48"/>
            <Execute Statement="AddValue(370, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(374, TESerie.E96)"  Condition="SerieType &gt;=TESerie.E96"/>
            <Execute Statement="AddValue(379, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(383, TESerie.E48)"  Condition="SerieType &gt;=TESerie.E48"/>
            <Execute Statement="AddValue(388, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(392, TESerie.E96)"  Condition="SerieType &gt;=TESerie.E96"/>
            <Execute Statement="AddValue(397, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(402, TESerie.E48)"  Condition="SerieType &gt;=TESerie.E48"/>
            <Execute Statement="AddValue(407, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(412, TESerie.E96)"  Condition="SerieType &gt;=TESerie.E96"/>
            <Execute Statement="AddValue(417, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(422, TESerie.E48)"  Condition="SerieType &gt;=TESerie.E48"/>
            <Execute Statement="AddValue(427, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(432, TESerie.E96)"  Condition="SerieType &gt;=TESerie.E96"/>
            <Execute Statement="AddValue(437, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(442, TESerie.E48)"  Condition="SerieType &gt;=TESerie.E48"/>
            <Execute Statement="AddValue(448, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(453, TESerie.E96)"  Condition="SerieType &gt;=TESerie.E96"/>
            <Execute Statement="AddValue(459, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(464, TESerie.E48)"  Condition="SerieType &gt;=TESerie.E48"/>
            <Execute Statement="AddValue(470, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(475, TESerie.E96)"  Condition="SerieType &gt;=TESerie.E96"/>
            <Execute Statement="AddValue(481, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(487, TESerie.E48)"  Condition="SerieType &gt;=TESerie.E48"/>
            <Execute Statement="AddValue(493, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(499, TESerie.E96)"  Condition="SerieType &gt;=TESerie.E96"/>
            <Execute Statement="AddValue(505, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(511, TESerie.E48)"  Condition="SerieType &gt;=TESerie.E48"/>
            <Execute Statement="AddValue(517, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(523, TESerie.E96)"  Condition="SerieType &gt;=TESerie.E96"/>
            <Execute Statement="AddValue(530, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(536, TESerie.E48)"  Condition="SerieType &gt;=TESerie.E48"/>
            <Execute Statement="AddValue(542, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(549, TESerie.E96)"  Condition="SerieType &gt;=TESerie.E96"/>
            <Execute Statement="AddValue(556, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(562, TESerie.E48)"  Condition="SerieType &gt;=TESerie.E48"/>
            <Execute Statement="AddValue(569, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(576, TESerie.E96)"  Condition="SerieType &gt;=TESerie.E96"/>
            <Execute Statement="AddValue(583, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(590, TESerie.E48)"  Condition="SerieType &gt;=TESerie.E48"/>
            <Execute Statement="AddValue(597, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(604, TESerie.E96)"  Condition="SerieType &gt;=TESerie.E96"/>
            <Execute Statement="AddValue(612, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(619, TESerie.E48)"  Condition="SerieType &gt;=TESerie.E48"/>
            <Execute Statement="AddValue(626, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(634, TESerie.E96)"  Condition="SerieType &gt;=TESerie.E96"/>
            <Execute Statement="AddValue(642, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(649, TESerie.E48)"  Condition="SerieType &gt;=TESerie.E48"/>
            <Execute Statement="AddValue(657, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(665, TESerie.E96)"  Condition="SerieType &gt;=TESerie.E96"/>
            <Execute Statement="AddValue(673, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(681, TESerie.E48)"  Condition="SerieType &gt;=TESerie.E48"/>
            <Execute Statement="AddValue(690, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(698, TESerie.E96)"  Condition="SerieType &gt;=TESerie.E96"/>
            <Execute Statement="AddValue(706, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(715, TESerie.E48)"  Condition="SerieType &gt;=TESerie.E48"/>
            <Execute Statement="AddValue(723, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(732, TESerie.E96)"  Condition="SerieType &gt;=TESerie.E96"/>
            <Execute Statement="AddValue(741, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(750, TESerie.E48)"  Condition="SerieType &gt;=TESerie.E48"/>
            <Execute Statement="AddValue(759, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(768, TESerie.E96)"  Condition="SerieType &gt;=TESerie.E96"/>
            <Execute Statement="AddValue(777, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(787, TESerie.E48)"  Condition="SerieType &gt;=TESerie.E48"/>
            <Execute Statement="AddValue(796, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(806, TESerie.E96)"  Condition="SerieType &gt;=TESerie.E96"/>
            <Execute Statement="AddValue(816, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(825, TESerie.E48)"  Condition="SerieType &gt;=TESerie.E48"/>
            <Execute Statement="AddValue(835, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(845, TESerie.E96)"  Condition="SerieType &gt;=TESerie.E96"/>
            <Execute Statement="AddValue(856, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(866, TESerie.E48)"  Condition="SerieType &gt;=TESerie.E48"/>
            <Execute Statement="AddValue(876, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(887, TESerie.E96)"  Condition="SerieType &gt;=TESerie.E96"/>
            <Execute Statement="AddValue(898, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(909, TESerie.E48)"  Condition="SerieType &gt;=TESerie.E48"/>
            <Execute Statement="AddValue(920, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(931, TESerie.E96)"  Condition="SerieType &gt;=TESerie.E96"/>
            <Execute Statement="AddValue(942, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(953, TESerie.E48)"  Condition="SerieType &gt;=TESerie.E48"/>
            <Execute Statement="AddValue(965, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
            <Execute Statement="AddValue(976, TESerie.E96)"  Condition="SerieType &gt;=TESerie.E96"/>
            <Execute Statement="AddValue(988, TESerie.E192)" Condition="SerieType &gt;=TESerie.E192"/>
          </Block>
        </Procedure>

        <FunctionHeader Identifier="GetRootNode" Type="TSerieNode">
          <Parameters>
            <Parameter Identifier="Head" Type="TSerieNode"/>
            <Parameter Identifier="Tail" Type="TSerieNode"/>
          </Parameters>
        </FunctionHeader>
        <Implementation Identifier="GetRootNode">
          <Variables>
            <Variable Identifier="Head2x" Type="TSerieNode"/>
          </Variables>
          <Block>
            <Execute Statement="Result:= Head"/>
            <Block Condition="Head = Tail">
              <Execute Statement="Result.Less := ObjNil"/>
              <Execute Statement="Result.More := ObjNil"/>
              <Exit/>
            </Block>
            <Execute Statement="Head2x:= Head"/>
            <RepeatUntilLoop Expression="Head2x = Tail">
              <Execute Statement="Head2x:= Head2x.Next"/>
              <Break Condition="Head2x = Tail"/>
              <Execute Statement="Head2x:= Head2x.Next"/>
              <Execute Statement="Result:= Result.Next"/>
            </RepeatUntilLoop>
            <Choose>
              <When Expression="Result &lt;&gt; Head">
                <Execute Statement="Result.Less := GetRootNode(Head, Result.Previous)"/>
              </When>
              <Otherwise>
                <Execute Statement="Result.Less := ObjNil"/>
              </Otherwise>
            </Choose>
            <Choose>
              <When Expression="Result &lt;&gt; Tail">
                <Execute Statement="Result.More := GetRootNode(Result.Next, Tail)"/>
              </When>
              <Otherwise>
                <Execute Statement="Result.More := ObjNil"/>
              </Otherwise>
            </Choose>
          </Block>
        </Implementation>

      </Procedures>
      <Block>
        <Execute Statement="Self.ESerie:= SerieType"/>
        <Choose>
          <When Expression="SerieType &gt;= TESerie.E48">
            <Execute Statement="InitESerie3"/>
          </When>
          <Otherwise>
            <Execute Statement="InitESerie2"/>
          </Otherwise>
        </Choose>
        <Execute Statement="Self.Head:= Head"/>
        <Execute Statement="Self.Tail:= Tail"/>
        <Execute Statement="Self.Root:= GetRootNode(Head, Tail)"/>
        <Variable Identifier="ItemCount" Type="UInt32" Init="0"/>
        <lil:LinkedList.Iterate Head="Head" ItemType="TSerieNode" RunningItem="SerieNode" Next="SerieNode.Next">
          <Execute Statement="SerieNode.OrderedPosition:= ItemCount"/>
          <Execute Statement="SerieNode.Serie:= Self"/>
          <Execute Statement="ItemCount:= ItemCount + 1"/>
        </lil:LinkedList.Iterate>
        <Execute Statement="Self.Count:= ItemCount"/>
      </Block>
    </Constructor>

    <Procedure Identifier="TSerie.Report">
      <Variables>
        <Variable Identifier="RunningValue" Type="TSerieNode" Init="Head"/>
        <Variable Identifier="Scale" Type="UInt32" Init="Self.Scale"/>
      </Variables>
      <Block>
        <Choose>
          <When Expression="Scale &gt;= 100">
            <WhileLoop Expression="Assigned(RunningValue)">
              <rep:Reporter.Information Text="Format('%d: %.2f',  RunningValue.Value, RunningValue.Value / Scale)"/>
              <Execute Statement="RunningValue:= RunningValue.Next"/>
            </WhileLoop>
          </When>
          <Otherwise>
            <WhileLoop Expression="Assigned(RunningValue)">
              <rep:Reporter.Information Text="Format('%d: %.1f',  RunningValue.Value, RunningValue.Value / Scale)"/>
              <Execute Statement="RunningValue:= RunningValue.Next"/>
            </WhileLoop>
          </Otherwise>
        </Choose>
      </Block>
    </Procedure>
    
    <Function Identifier="GetESerie" Type="TSerie">
      <Parameters>
        <Parameter Identifier="ESerie" Type="TESerie"/>
      </Parameters>
      <Block>
        <Case Expression="ESerie" Optimalisation="integermapping">
          <On Select="TESerie.E3">
            <Choose>
              <When Expression="IsEmpty(_E3Serie)">
                <Execute Statement="Result:= TSerie.Create(ESerie)"/>
                <Execute Statement="_E3Serie:= Result"/>
              </When>
              <Otherwise>
                <Execute Statement="Result:= _E3Serie"/>
              </Otherwise>
            </Choose>
          </On>
          <On Select="TESerie.E6">
            <Choose>
              <When Expression="IsEmpty(_E6Serie)">
                <Execute Statement="Result:= TSerie.Create(ESerie)"/>
                <Execute Statement="_E6Serie:= Result"/>
              </When>
              <Otherwise>
                <Execute Statement="Result:= _E6Serie"/>
              </Otherwise>
            </Choose>
          </On>
          <On Select="TESerie.E12">
            <Choose>
              <When Expression="IsEmpty(_E12Serie)">
                <Execute Statement="Result:= TSerie.Create(ESerie)"/>
                <Execute Statement="_E12Serie:= Result"/>
              </When>
              <Otherwise>
                <Execute Statement="Result:= _E12Serie"/>
              </Otherwise>
            </Choose>
          </On>
          <On Select="TESerie.E24">
            <Choose>
              <When Expression="IsEmpty(_E24Serie)">
                <Execute Statement="Result:= TSerie.Create(ESerie)"/>
                <Execute Statement="_E24Serie:= Result"/>
              </When>
              <Otherwise>
                <Execute Statement="Result:= _E24Serie"/>
              </Otherwise>
            </Choose>
          </On>
          <On Select="TESerie.E48">
            <Choose>
              <When Expression="IsEmpty(_E48Serie)">
                <Execute Statement="Result:= TSerie.Create(ESerie)"/>
                <Execute Statement="_E48Serie:= Result"/>
              </When>
              <Otherwise>
                <Execute Statement="Result:= _E48Serie"/>
              </Otherwise>
            </Choose>
          </On>
          <On Select="TESerie.E96">
            <Choose>
              <When Expression="IsEmpty(_E96Serie)">
                <Execute Statement="Result:= TSerie.Create(ESerie)"/>
                <Execute Statement="_E96Serie:= Result"/>
              </When>
              <Otherwise>
                <Execute Statement="Result:= _E96Serie"/>
              </Otherwise>
            </Choose>
          </On>
          <On Select="TESerie.E192">
            <Choose>
              <When Expression="IsEmpty(_E192Serie)">
                <Execute Statement="Result:= TSerie.Create(ESerie)"/>
                <Execute Statement="_E192Serie:= Result"/>
              </When>
              <Otherwise>
                <Execute Statement="Result:= _E192Serie"/>
              </Otherwise>
            </Choose>
          </On>
          <Otherwise>
            <Raise Expression="Exception.Create(Format('Invalid Eserie: %d', ESerie))"/>
          </Otherwise>
        </Case>
      </Block>
    </Function>

  </Procedures>
</pkg:Library>