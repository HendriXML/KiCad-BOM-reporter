<?xml version="1.0" encoding="UTF-8"?>
<Document xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 xmlns="urn:schemas-www-wisware.nl-codegen-document"
 xmlns:doc="urn:schemas-www-wisware.nl-codegen-document"
 xmlns:scg="urn:schemas-www-wisware.nl-codegen-scriptcodegenerator"
 xmlns:pkg="urn:schemas-www-wisware.nl-scriptingpackages"
 xmlns:fil="urn:schemas-www-wisware.nl-xmlscripting-filemanagement"
 xmlns:syu="urn:schemas-www-wisware.nl-xmlscripting-sysutils"
 xmlns:reg="urn:schemas-www-wisware.nl-xmlscripting-registry"
 xmlns:indx="urn:schemas-www-wisware.nl-xmlscripting-index"
 xmlns:lil="urn:schemas-www-wisware.nl-xmlscripting-linkedlist"
 xmlns:rep="urn:schemas-www-wisware.nl-xmlscripting-report"
 xmlns:sts="urn:schemas-www-wisware.nl-xmlscripting-showstatus"
 xmlns:msx="urn:schemas-www-wisware.nl-xmlscripting-xml"
 xmlns:sys="urn:schemas-www-wisware.nl-xmlscripting"
 xsi:schemaLocation="urn:schemas-www-wisware.nl-codegen-document ..\XmlSchemas.Common.CodeGen\CodeGen.xsd"
   Codepage="0" NameEncapsulation="xml">
  <CodeGenerators>
    <scg:ScriptCodeGenerator Description="Genereer functies">
      <pkg:Program xmlns="urn:schemas-www-wisware.nl-xmlscripting">
        <pkg:ReportTargets>
          <pkg:Target Identifier="Type.TComponentKind"/>
          <pkg:Target Identifier="TUnitConvertor.EStrToIntValue.StringLoop"/>
          <pkg:Target Identifier="TUnitConvertor.EStrToIntValue.NumScaling"/>
          <pkg:Target Identifier="TUnitConvertor.EStrToIntValue.FracScaling"/>
          <pkg:Target Identifier="TUnitConvertor.Fields"/>
          <pkg:Target Identifier="TUnitConvertor.GetScale.DetermineScale"/>
          <pkg:Target Identifier="TUnitConvertor.GetScale.DeterminePrefix"/>
          <pkg:Target Identifier="Variables.Converters"/>
          <pkg:Target Identifier="GetConverter.Case"/>
        </pkg:ReportTargets>

        <Type>
          <Enumeration Identifier="TPrefix" Elements="Tera, Giga, Mega, Kilo, None, Milli, Micro, Nano, Pico, Femto" LowAlias="Low" HighAlias="High"/>
          <Enumeration Identifier="TSiUnit" Elements="None, Ohm, Watt, Farad, Henry, Volt, Amp, Perc, Hz, Meter, Second" LowAlias="Low" HighAlias="High"/>
        </Type>

        <Variables>
          <Variable Identifier="XmlDoc" Type="IXmlDomDocument"/>
        </Variables>

        <Procedures>

          <Function Identifier="PrefixName" Type="string">
            <Parameters>
              <Parameter Identifier="Prefix" Type="TPrefix"/>
            </Parameters>
            <Block>
              <Case Expression="Prefix" Optimalisation="integermapping">
                <!--<On Select="TPrefix.Yotta">
            <Execute Statement="Result:= 'Yotta'"/>
          </On>
          <On Select="TPrefix.Zetta">
            <Execute Statement="Result:= 'Zetta'"/>
          </On>
          <On Select="TPrefix.Exa">
            <Execute Statement="Result:= 'Exa'"/>
          </On>
          <On Select="TPrefix.Peta">
            <Execute Statement="Result:= 'Peta'"/>
          </On>-->
                <On Select="TPrefix.Tera">
                  <Execute Statement="Result:= 'Tera'"/>
                </On>
                <On Select="TPrefix.Giga">
                  <Execute Statement="Result:= 'Giga'"/>
                </On>
                <On Select="TPrefix.Mega">
                  <Execute Statement="Result:= 'Mega'"/>
                </On>
                <On Select="TPrefix.Kilo">
                  <Execute Statement="Result:= 'Kilo'"/>
                </On>
                <!--<On Select="TPrefix.Hecto">
            <Execute Statement="Result:= 'Hecto'"/>
          </On>
          <On Select="TPrefix.Deca">
            <Execute Statement="Result:= 'Deca'"/>
          </On>
          <On Select="TPrefix.Deci">
            <Execute Statement="Result:= 'Deci'"/>
          </On>
          <On Select="TPrefix.Centi">
            <Execute Statement="Result:= 'Centi'"/>
          </On>-->
                <On Select="TPrefix.Milli">
                  <Execute Statement="Result:= 'Milli'"/>
                </On>
                <On Select="TPrefix.Micro">
                  <Execute Statement="Result:= 'Micro'"/>
                </On>
                <On Select="TPrefix.Nano">
                  <Execute Statement="Result:= 'Nano'"/>
                </On>
                <On Select="TPrefix.Pico">
                  <Execute Statement="Result:= 'Pico'"/>
                </On>
                <On Select="TPrefix.Femto">
                  <Execute Statement="Result:= 'Femto'"/>
                </On>
                <!--<On Select="TPrefix.Atto">
            <Execute Statement="Result:= 'Atto'"/>
          </On>
          <On Select="TPrefix.Zepto">
            <Execute Statement="Result:= 'Zepto'"/>
          </On>
          <On Select="TPrefix.Yocto">
            <Execute Statement="Result:= 'Yocto'"/>
          </On>-->
                <Otherwise>
                  <Raise Expression="Exception.Create(Format('Invalid prefix: %d', Prefix))"/>
                </Otherwise>
              </Case>
            </Block>
          </Function>

          <Function Identifier="SiUnitName" Type="string">
            <Parameters>
              <Parameter Identifier="SiUnit" Type="TSiUnit"/>
            </Parameters>
            <Block>
              <Case Expression="SiUnit" Optimalisation="integermapping">
                <On Select="TSiUnit.None">
                  <Execute Statement="Result:= 'None'"/>
                </On>
                <On Select="TSiUnit.Ohm">
                  <Execute Statement="Result:= 'Ohm'"/>
                </On>
                <On Select="TSiUnit.Watt">
                  <Execute Statement="Result:= 'Watt'"/>
                </On>
                <On Select="TSiUnit.Farad">
                  <Execute Statement="Result:= 'Farad'"/>
                </On>
                <On Select="TSiUnit.Henry">
                  <Execute Statement="Result:= 'Henry'"/>
                </On>
                <On Select="TSiUnit.Volt">
                  <Execute Statement="Result:= 'Volt'"/>
                </On>
                <On Select="TSiUnit.Amp">
                  <Execute Statement="Result:= 'Amp'"/>
                </On>
                <On Select="TSiUnit.Perc">
                  <Execute Statement="Result:= 'Perc'"/>
                </On>
                <On Select="TSiUnit.Hz">
                  <Execute Statement="Result:= 'Hz'"/>
                </On>
                <On Select="TSiUnit.Meter">
                  <Execute Statement="Result:= 'Meter'"/>
                </On>
                <On Select="TSiUnit.Second">
                  <Execute Statement="Result:= 'Second'"/>
                </On>
                <Otherwise>
                  <Raise Expression="Exception.Create(Format('Invalid SiUnit: %d', SiUnit))"/>
                </Otherwise>
              </Case>
            </Block>
          </Function>

          <Procedure Identifier="GenerateClassFields">
            <Block>
              <ForLoop Indexer="I" From="TPrefix.Low" To="TPrefix.High">
                <rep:Reporter.Information Text="Format('      &lt;Field Identifier=&quot;AllowPrefix%s&quot; Type=&quot;Boolean&quot;/&gt;', PrefixName(I))" Condition="I &lt;&gt; TPrefix.None"/>
              </ForLoop>
              <!--<ForLoop Indexer="I" From="TPrefix.Low" To="TPrefix.High">
                <rep:Reporter.Information Text="Format('      &lt;Field Identifier=&quot;FactorPrefix%s&quot; Type=&quot;Int64&quot;/&gt;', PrefixName(I))" Condition="I &lt;&gt; TPrefix.None"/>
              </ForLoop>-->
            </Block>
          </Procedure>


          <Procedure Identifier="GenerateEStrToIntValueStringLoop">
            <Type>
              <Enumeration Identifier="TState" Elements="Start, AfterSign, InNum, AfterDecimalChar, InDecimalFrac, AfterNumSep, AfterPrefix, AfterMilliOrMeter, AfterPrefixFracSep, AfterUnitFracSep, InUnitFrac, InPrefixFrac, AfterFirstUnitChar, AfterMilliOrMeter2, Final" LowAlias="Low" HighAlias="High"/>

              <DataClass Identifier="TBaseCharacterEvent">
                <VirtualMethod Identifier="vmHandleState"/>
                <Field Identifier="Next" Type="TBaseCharacterEvent"/>
              </DataClass>

              <DataClass Identifier="TWhiteSpaceEvent" Inherit="TBaseCharacterEvent">
                <VirtualMethod Identifier="vmHandleState" Override="true"/>
              </DataClass>

              <DataClass Identifier="TSignCharacterEvent" Inherit="TBaseCharacterEvent">
                <VirtualMethod Identifier="vmHandleState" Override="true"/>
              </DataClass>

              <DataClass Identifier="TNumCharacterEvent" Inherit="TBaseCharacterEvent">
                <VirtualMethod Identifier="vmHandleState" Override="true"/>
              </DataClass>

              <DataClass Identifier="TDecimalCharacterEvent" Inherit="TBaseCharacterEvent">
                <VirtualMethod Identifier="vmHandleState" Override="true"/>
              </DataClass>

              <DataClass Identifier="TUnitCharacterEvent" Inherit="TBaseCharacterEvent">
                <VirtualMethod Identifier="vmHandleState" Override="true"/>
                <Field Identifier="SiUnit" Type="TSiUnit"/>
              </DataClass>

              <DataClass Identifier="TPrefixCharacterEvent" Inherit="TBaseCharacterEvent">
                <VirtualMethod Identifier="vmHandleState" Override="true"/>
                <Field Identifier="Prefix" Type="TPrefix"/>
              </DataClass>

              <DataClass Identifier="TMeterOrMilliCharacterEvent" Inherit="TBaseCharacterEvent">
                <VirtualMethod Identifier="vmHandleState" Override="true"/>
              </DataClass>

              <DataClass Identifier="THenryOrHzCharacterEvent" Inherit="TBaseCharacterEvent">
                <VirtualMethod Identifier="vmHandleState" Override="true"/>
              </DataClass>
            </Type>
            <Variables>
              <Variable Identifier="EventsHead" Type="TBaseCharacterEvent"/>
              <Variable Identifier="EventsTail" Type="TBaseCharacterEvent"/>
            </Variables>
            <Procedures>

              <Function Identifier="StateName" Type="string">
                <Parameters>
                  <Parameter Identifier="State" Type="TState"/>
                </Parameters>
                <Block>
                  <Case Expression="State" Optimalisation="integermapping">
                    <On Select="TState.Start">
                      <Execute Statement="Result:= 'Start'"/>
                    </On>
                    <On Select="TState.AfterSign">
                      <Execute Statement="Result:= 'AfterSign'"/>
                    </On>
                    <On Select="TState.InNum">
                      <Execute Statement="Result:= 'InNum'"/>
                    </On>
                    <On Select="TState.AfterPrefixFracSep">
                      <Execute Statement="Result:= 'AfterPrefixFracSep'"/>
                    </On>
                    <On Select="TState.AfterUnitFracSep">
                      <Execute Statement="Result:= 'AfterUnitFracSep'"/>
                    </On>
                    <On Select="TState.InUnitFrac">
                      <Execute Statement="Result:= 'InUnitFrac'"/>
                    </On>
                    <On Select="TState.InPrefixFrac">
                      <Execute Statement="Result:= 'InPrefixFrac'"/>
                    </On>
                    <On Select="TState.AfterDecimalChar">
                      <Execute Statement="Result:= 'AfterDecimalChar'"/>
                    </On>
                    <On Select="TState.InDecimalFrac">
                      <Execute Statement="Result:= 'InDecimalFrac'"/>
                    </On>
                    <On Select="TState.AfterNumSep">
                      <Execute Statement="Result:= 'AfterNumSep'"/>
                    </On>
                    <On Select="TState.AfterPrefix">
                      <Execute Statement="Result:= 'AfterPrefix'"/>
                    </On>
                    <On Select="TState.AfterMilliOrMeter">
                      <Execute Statement="Result:= 'AfterMilliOrMeter'"/>
                    </On>
                    <On Select="TState.AfterMilliOrMeter2">
                      <Execute Statement="Result:= 'AfterMilliOrMeter2'"/>
                    </On>
                    <On Select="TState.AfterFirstUnitChar">
                      <Execute Statement="Result:= 'AfterFirstUnitChar'"/>
                    </On>
                    <On Select="TState.Final">
                      <Execute Statement="Result:= 'Final'"/>
                    </On>
                    <Otherwise>
                      <Raise Expression="Exception.Create(Format('Invalid state: %d', State))"/>
                    </Otherwise>
                  </Case>
                </Block>
              </Function>

              <Procedure Identifier="TBaseCharacterEvent.HandleState" VirtualMethod="vmHandleState">
                <Parameters>
                  <Parameter Identifier="State" Type="TState"/>
                </Parameters>
                <Block>
                </Block>
              </Procedure>

              <Procedure Identifier="TBaseCharacterEvent.BeginCharSelector">
                <Parameters>
                  <Parameter Identifier="Selector" Type="string"/>
                </Parameters>
                <Block>
                  <rep:Reporter.Information Text="Format('                &lt;On Select=&quot;%s&quot;&gt;', Selector)"/>
                </Block>
              </Procedure>

              <Procedure Identifier="TBaseCharacterEvent.ChangeVariable">
                <Parameters>
                  <Parameter Identifier="Name" Type="string"/>
                  <Parameter Identifier="Value" Type="string"/>
                </Parameters>
                <Block>
                  <rep:Reporter.Information Text="Format('                  &lt;Execute Statement=&quot;%s:= %s&quot;/&gt;', Name, Value)"/>
                </Block>
              </Procedure>

              <Procedure Identifier="TBaseCharacterEvent.AddDigit">
                <Parameters>
                  <Parameter Identifier="Value" Type="string"/>
                </Parameters>
                <Block>
                  <rep:Reporter.Information Text="Format('                  &lt;Execute Statement=&quot;Digits.Add(%s)&quot;/&gt;', Value)"/>
                </Block>
              </Procedure>

              <Procedure Identifier="TBaseCharacterEvent.AddDigitC">
                <Parameters>
                  <Parameter Identifier="Value" Type="string"/>
                </Parameters>
                <Block>
                  <rep:Reporter.Information Text="Format('                  &lt;Execute Statement=&quot;Digits.Add(%s)&quot; Condition=&quot;(Digits.Count &amp;lt;&amp;gt;0)&quot;/&gt;', Value)"/>
                </Block>
              </Procedure>

              <Procedure Identifier="TBaseCharacterEvent.ChangeState">
                <Parameters>
                  <Parameter Identifier="State" Type="TState"/>
                </Parameters>
                <Block>
                  <!--<Execute Statement="ChangeVariable('State', Format('TState.%s', StateName(State)))"/>-->
                  <rep:Reporter.Information Text="Format('                  &lt;stm:SetState Name=&quot;%s&quot;/&gt;', StateName(State))"/>
                  <Case Expression="State" Optimalisation="integermapping">
                    <On Select="TState.InNum, TState.AfterDecimalChar, TState.InDecimalFrac, TState.InUnitFrac, TState.AfterNumSep, TState.AfterPrefix, TState.AfterMilliOrMeter, TState.AfterPrefixFracSep, TState.AfterUnitFracSep, TState.InPrefixFrac, TState.Final, TState.AfterMilliOrMeter2">
                      <Execute Statement="ChangeVariable('ValidEndState', 'True')"/>
                    </On>
                    <Otherwise>
                      <Execute Statement="ChangeVariable('ValidEndState', 'False')"/>
                    </Otherwise>
                  </Case>
                </Block>
              </Procedure>

              <Procedure Identifier="TBaseCharacterEvent.EndCharSelector">
                <Block>
                  <rep:Reporter.Information Text="Format('                &lt;/On&gt;')"/>
                </Block>
              </Procedure>

              <Procedure Identifier="TWhiteSpaceEvent.HandleState" VirtualMethod="vmHandleState">
                <Parameters>
                  <Parameter Identifier="State" Type="TState"/>
                </Parameters>
                <Constants>
                  <Constant Identifier="sSelector" Type="string" Expression="'cSpace, cTab'"/>
                </Constants>
                <Block>
                  <Case Expression="State">
                    <On Select="TState.Start, TState.Final">
                      <Execute Statement="BeginCharSelector(sSelector)"/>
                      <Execute Statement="EndCharSelector"/>
                    </On>
                    <On Select="TState.InNum, TState.InDecimalFrac">
                      <Execute Statement="BeginCharSelector('cSpace')"/>
                      <Execute Statement="ChangeState(TState.AfterNumSep)"/>
                      <Execute Statement="EndCharSelector"/>

                      <Execute Statement="BeginCharSelector('cTab')"/>
                      <Execute Statement="ChangeState(TState.Final)"/>
                      <Execute Statement="EndCharSelector"/>
                    </On>
                    <On Select="TState.AfterPrefixFracSep, TState.AfterUnitFracSep, TState.InPrefixFrac, TState.InUnitFrac, TState.AfterPrefix, TState.AfterMilliOrMeter, TState.AfterMilliOrMeter2, TState.AfterNumSep">
                      <Execute Statement="BeginCharSelector(sSelector)"/>
                      <Execute Statement="ChangeState(TState.Final)"/>
                      <Execute Statement="EndCharSelector"/>
                    </On>
                  </Case>
                </Block>
              </Procedure>

              <Procedure Identifier="TSignCharacterEvent.HandleState" VirtualMethod="vmHandleState">
                <Parameters>
                  <Parameter Identifier="State" Type="TState"/>
                </Parameters>
                <Block>
                  <Case Expression="State">
                    <On Select="TState.Start">
                      <Execute Statement="BeginCharSelector('cNegative')"/>
                      <Execute Statement="ChangeVariable('IsNegative', 'True')"/>
                      <Execute Statement="ChangeState(TState.AfterSign)"/>
                      <Execute Statement="EndCharSelector"/>
                      <Execute Statement="BeginCharSelector('cPositive')"/>
                      <Execute Statement="ChangeState(TState.AfterSign)"/>
                      <Execute Statement="EndCharSelector"/>
                    </On>
                  </Case>
                </Block>
              </Procedure>

              <Procedure Identifier="TNumCharacterEvent.HandleState" VirtualMethod="vmHandleState">
                <Parameters>
                  <Parameter Identifier="State" Type="TState"/>
                </Parameters>
                <Constants>
                  <Constant Identifier="sSelector" Type="string" Expression="'c0..c9'"/>
                </Constants>
                <Procedures>
                  <Procedure Identifier="ProcessFrac">
                    <Parameters>
                      <Parameter Identifier="IsStart" Type="Boolean"/>
                      <Parameter Identifier="ToState" Type="TState"/>
                    </Parameters>
                    <Block>
                      <Execute Statement="BeginCharSelector('c0')"/>
                      <Execute Statement="ChangeVariable('FracScale', 'FracScale - 1')"/>
                      <Execute Statement="AddDigitC('0')"/>
                      <Execute Statement="ChangeState(ToState)" Condition="IsStart"/>
                      <Execute Statement="EndCharSelector"/>
                      <Execute Statement="BeginCharSelector('c1..c9')"/>
                      <Execute Statement="ChangeVariable('FracScale', 'FracScale - 1')"/>
                      <Execute Statement="AddDigit('ChrI - CharOrd(c0)')"/>
                      <Execute Statement="ChangeState(ToState)" Condition="IsStart"/>
                      <Execute Statement="EndCharSelector"/>
                    </Block>
                  </Procedure>
                  <Procedure Identifier="ProcessNum">
                    <Parameters>
                      <Parameter Identifier="IsStart" Type="Boolean"/>
                      <Parameter Identifier="ToState" Type="TState"/>
                    </Parameters>
                    <Block>
                      <Choose>
                        <When Expression="IsStart">
                          <Execute Statement="BeginCharSelector('c0')"/>
                          <Execute Statement="AddDigitC('0')"/>
                          <!--<Execute Statement="ChangeVariable('Scale', '0')"/>-->
                          <Execute Statement="ChangeState(ToState)"/>
                          <Execute Statement="EndCharSelector"/>

                          <Execute Statement="BeginCharSelector('c1..c9')"/>
                          <Execute Statement="AddDigit('ChrI - CharOrd(c0)')"/>
                          <!--<Execute Statement="ChangeVariable('Scale', '0')"/>-->
                          <Execute Statement="ChangeState(ToState)"/>
                          <Execute Statement="EndCharSelector"/>
                        </When>
                        <Otherwise>
                          <Execute Statement="BeginCharSelector('c0')"/>
                          <!--<Execute Statement="ChangeVariable('Scale', 'Scale + 1')"/>-->
                          <Execute Statement="AddDigitC('0')"/>
                          <Execute Statement="EndCharSelector"/>
                          <Execute Statement="BeginCharSelector('c1..c9')"/>
                          <!--<Execute Statement="ChangeVariable('Scale', 'Scale + 1')"/>-->
                          <Execute Statement="AddDigit('ChrI - CharOrd(c0)')"/>
                          <Execute Statement="EndCharSelector"/>
                        </Otherwise>
                      </Choose>
                    </Block>
                  </Procedure>
                </Procedures>
                <Block>
                  <Case Expression="State">
                    <On Select="TState.Start, TState.AfterSign">
                      <Execute Statement="ProcessNum(True, TState.InNum)"/>
                    </On>
                    <On Select="TState.InNum">
                      <Execute Statement="ProcessNum(False, TState.InNum)"/>
                    </On>
                    <On Select="TState.AfterPrefixFracSep, TState.AfterMilliOrMeter">
                      <Execute Statement="ProcessFrac(True, TState.InPrefixFrac)"/>
                    </On>
                    <On Select="TState.AfterDecimalChar">
                      <Execute Statement="ProcessFrac(True, TState.InDecimalFrac)"/>
                    </On>
                    <On Select="TState.AfterUnitFracSep">
                      <Execute Statement="ProcessFrac(True, TState.InUnitFrac)"/>
                    </On>
                    <On Select="TState.InUnitFrac">
                      <Execute Statement="ProcessFrac(False, TState.InUnitFrac)"/>
                    </On>
                    <On Select="TState.InPrefixFrac, TState.InDecimalFrac">
                      <Execute Statement="ProcessFrac(False, State)"/>
                    </On>
                  </Case>
                </Block>
              </Procedure>

              <Procedure Identifier="TDecimalCharacterEvent.HandleState" VirtualMethod="vmHandleState">
                <Parameters>
                  <Parameter Identifier="State" Type="TState"/>
                </Parameters>
                <Constants>
                  <Constant Identifier="sSelector" Type="string" Expression="'cDecimalSep1, cDecimalSep2'"/>
                </Constants>
                <Block>
                  <Case Expression="State">
                    <On Select="TState.InNum">
                      <Execute Statement="BeginCharSelector(sSelector)"/>
                      <Execute Statement="ChangeState(TState.AfterDecimalChar)"/>
                      <Execute Statement="EndCharSelector"/>
                    </On>
                  </Case>
                </Block>
              </Procedure>

              <Procedure Identifier="TUnitCharacterEvent.CheckUnit">
                <Block>
                  <rep:Reporter.Information Text="Format('                  &lt;Exit Condition=&quot;SiUnit &amp;lt;&amp;gt; TSiUnit.%s&quot;/&gt;', SiUnitName(SiUnit))"/>
                </Block>
              </Procedure>

              <Procedure Identifier="TUnitCharacterEvent.HandleUnit">
                <Parameters>
                  <Parameter Identifier="Selector" Type="string"/>
                  <Parameter Identifier="ToState" Type="TState"/>
                  <Parameter Identifier="UseAsFrac" Type="Boolean"/>
                </Parameters>
                <Block>
                  <Execute Statement="BeginCharSelector(Selector)"/>
                  <Execute Statement="CheckUnit"/>
                  <Choose>
                    <When Expression="UseAsFrac">
                      <Execute Statement="ChangeState(TState.AfterUnitFracSep)"/>
                    </When>
                    <Otherwise>
                      <Execute Statement="ChangeState(ToState)"/>
                    </Otherwise>
                  </Choose>
                  <Execute Statement="EndCharSelector"/>
                </Block>
              </Procedure>

              <Procedure Identifier="TUnitCharacterEvent.HandleState" VirtualMethod="vmHandleState">
                <Parameters>
                  <Parameter Identifier="State" Type="TState"/>
                </Parameters>
                <Variables>
                  <Variable Identifier="UseAsFrac" Type="Boolean" Init="False"/>
                  <Variable Identifier="ToState" Type="TState" Init="TState.Final"/>
                  <Variable Identifier="Selector" Type="string" Init="Format('c%s', SiUnitName(SiUnit))"/>
                </Variables>
                <Block>
                  <Case Expression="SiUnit">
                    <On Select="TSiUnit.Volt">
                      <Execute Statement="UseAsFrac:= True"/>
                    </On>
                    <On Select="TSiUnit.None">
                      <Exit/>
                    </On>
                    <On Select="TSiUnit.Hz">
                      <Case Expression="State">
                        <On Select="TState.AfterFirstUnitChar">
                          <Execute Statement="Selector:= Selector + '2'"/>
                          <Execute Statement="HandleUnit(Selector, ToState, False)"/>
                        </On>
                        <Otherwise>
                          <Execute Statement="ToState:= TState.AfterFirstUnitChar"/>
                        </Otherwise>
                      </Case>
                    </On>
                  </Case>
                  <Case Expression="State">
                    <On Select="TState.InNum">
                      <Execute Statement="HandleUnit(Selector, ToState, UseAsFrac)"/>
                    </On>
                    <On Select="TState.InDecimalFrac, TState.InPrefixFrac, TState.AfterNumSep, TState.AfterPrefixFracSep, TState.AfterPrefix">
                      <Execute Statement="HandleUnit(Selector, ToState, False)"/>
                    </On>
                  </Case>
                </Block>
              </Procedure>

              <Procedure Identifier="TBaseCharacterEvent.HandleMilliOrMeterSep">
                <Block>
                  <Execute Statement="BeginCharSelector('cMilliOrMeter')"/>

                  <rep:Reporter.Information Text="Format('              &lt;Choose&gt;')"/>
                  <rep:Reporter.Information Text="Format('                &lt;When Expression=&quot;SiUnit = TSiUnit.Meter&quot;&gt;')"/>
                  <Execute Statement="ChangeState(TState.AfterMilliOrMeter)"/>
                  <rep:Reporter.Information Text="Format('               &lt;/When&gt;')"/>
                  <rep:Reporter.Information Text="Format('               &lt;Otherwise&gt;')"/>
                  <Execute Statement="ChangeVariable('Scale', 'cScaleMilli')"/>
                  <Execute Statement="ChangeState(TState.AfterPrefixFracSep)"/>
                  <rep:Reporter.Information Text="Format('               &lt;/Otherwise&gt;')"/>
                  <rep:Reporter.Information Text="Format('              &lt;/Choose&gt;')"/>

                  <Execute Statement="EndCharSelector"/>
                </Block>
              </Procedure>

              <Procedure Identifier="TBaseCharacterEvent.HandleMilliOrMeter">
                <Block>
                  <Execute Statement="BeginCharSelector('cMilliOrMeter')"/>

                  <rep:Reporter.Information Text="Format('              &lt;Choose&gt;')"/>
                  <rep:Reporter.Information Text="Format('                &lt;When Expression=&quot;SiUnit = TSiUnit.Meter&quot;&gt;')"/>
                  <Execute Statement="ChangeState(TState.AfterMilliOrMeter2)"/>
                  <rep:Reporter.Information Text="Format('               &lt;/When&gt;')"/>
                  <rep:Reporter.Information Text="Format('               &lt;Otherwise&gt;')"/>
                  <Execute Statement="ChangeVariable('Scale', 'cScaleMilli')"/>
                  <Execute Statement="ChangeState(TState.AfterPrefix)"/>
                  <rep:Reporter.Information Text="Format('               &lt;/Otherwise&gt;')"/>
                  <rep:Reporter.Information Text="Format('              &lt;/Choose&gt;')"/>

                  <Execute Statement="EndCharSelector"/>
                </Block>
              </Procedure>

              <Procedure Identifier="TBaseCharacterEvent.HandlePrefix">
                <Parameters>
                  <Parameter Identifier="Selector" Type="string"/>
                  <Parameter Identifier="Scale" Type="string"/>
                  <Parameter Identifier="ToState" Type="TState"/>
                  <Parameter Identifier="Check" Type="string"/>
                </Parameters>
                <Block>
                  <Execute Statement="BeginCharSelector(Selector)"/>
                  <rep:Reporter.Information Text="Format('                  &lt;Exit Condition=&quot;%s&quot;/&gt;', Check)" Condition="IsNonEmptyString(Check)"/>
                  <Execute Statement="ChangeVariable('Scale', Scale)" Condition="IsNonEmptyString(Scale)"/>
                  <Execute Statement="ChangeState(ToState)"/>
                  <Execute Statement="EndCharSelector"/>
                </Block>
              </Procedure>

              <Procedure Identifier="TMeterOrMilliCharacterEvent.HandleUnit">
                <Parameters>
                  <Parameter Identifier="Selector" Type="string"/>
                </Parameters>
                <Block>
                  <Execute Statement="BeginCharSelector(Selector)"/>
                  <Execute Statement="ChangeState(TState.Final)"/>
                  <Execute Statement="EndCharSelector"/>
                </Block>
              </Procedure>

              <Procedure Identifier="TMeterOrMilliCharacterEvent.HandleState" VirtualMethod="vmHandleState">
                <Parameters>
                  <Parameter Identifier="State" Type="TState"/>
                </Parameters>
                <Variables>
                  <Variable Identifier="sSelector" Type="string"/>
                </Variables>
                <Block>
                  <Case Expression="State">
                    <On Select="TState.InNum">
                      <Execute Statement="HandleMilliOrMeterSep"/>
                    </On>
                    <On Select="TState.InDecimalFrac, TState.AfterNumSep">
                      <Execute Statement="HandleMilliOrMeter"/>
                    </On>
                    <On Select="TState.AfterMilliOrMeter">
                      <Execute Statement="HandlePrefix('cMeter', 'cScaleMilli', TState.Final, '')"/>
                    </On>
                    <On Select="TState.InPrefixFrac, TState.AfterPrefixFracSep, TState.AfterPrefix">
                      <Execute Statement="HandleUnit('cMeter')"/>
                    </On>
                  </Case>
                </Block>
              </Procedure>

              <Procedure Identifier="THenryOrHzCharacterEvent.HandleUnit">
                <Parameters>
                  <Parameter Identifier="Selector" Type="string"/>
                  <Parameter Identifier="ToState" Type="TState"/>
                  <Parameter Identifier="UseAsFrac" Type="Boolean"/>
                </Parameters>
                <Block>
                  <Execute Statement="BeginCharSelector(Selector)"/>
                  <rep:Reporter.Information Text="Format('                  &lt;Case Expression=&quot;SiUnit&quot;&gt;')"/>
                  <rep:Reporter.Information Text="Format('                    &lt;On Select=&quot;TSiUnit.Henry&quot;&gt;')"/>
                  <Execute Statement="ChangeState(ToState)"/>
                  <rep:Reporter.Information Text="Format('                    &lt;/On&gt;')"/>
                  <rep:Reporter.Information Text="Format('                    &lt;On Select=&quot;TSiUnit.Hz&quot;&gt;')"/>
                  <Execute Statement="ChangeState(TState.AfterFirstUnitChar)"/>
                  <rep:Reporter.Information Text="Format('                    &lt;/On&gt;')"/>
                  <rep:Reporter.Information Text="Format('                    &lt;Otherwise&gt;')"/>
                  <rep:Reporter.Information Text="Format('                      &lt;Exit/&gt;')"/>
                  <rep:Reporter.Information Text="Format('                    &lt;/Otherwise&gt;')"/>
                  <rep:Reporter.Information Text="Format('                  &lt;/Case&gt;')"/>
                  <Execute Statement="EndCharSelector"/>
                </Block>
              </Procedure>

              <Procedure Identifier="THenryOrHzCharacterEvent.HandleUnitHz">
                <Parameters>
                  <Parameter Identifier="Selector" Type="string"/>
                  <Parameter Identifier="ToState" Type="TState"/>
                </Parameters>
                <Block>
                  <Execute Statement="BeginCharSelector(Selector)"/>
                  <rep:Reporter.Information Text="Format('                  &lt;Exit Condition=&quot;SiUnit &amp;lt;&amp;gt; TSiUnit.Hz&quot;/&gt;')"/>
                  <Execute Statement="ChangeState(ToState)"/>
                  <Execute Statement="EndCharSelector"/>
                </Block>
              </Procedure>


              <Procedure Identifier="THenryOrHzCharacterEvent.HandleState" VirtualMethod="vmHandleState">
                <Parameters>
                  <Parameter Identifier="State" Type="TState"/>
                </Parameters>
                <Variables>
                  <Variable Identifier="ToState" Type="TState" Init="TState.Final"/>
                </Variables>
                <Block>
                  <Case Expression="State">
                    <On Select="TState.AfterFirstUnitChar">
                      <Execute Statement="HandleUnitHz('cHz2', ToState)"/>
                    </On>
                    <On Select="TState.InNum">
                      <Execute Statement="HandleUnit('cHenry_Hz', ToState, False)"/>
                    </On>
                    <On Select="TState.InDecimalFrac, TState.InPrefixFrac, TState.AfterNumSep, TState.AfterPrefixFracSep, TState.AfterPrefix">
                      <Execute Statement="HandleUnit('cHenry_Hz', ToState, False)"/>
                    </On>
                  </Case>
                </Block>
              </Procedure>


              <Procedure Identifier="TPrefixCharacterEvent.HandleState" VirtualMethod="vmHandleState">
                <Parameters>
                  <Parameter Identifier="State" Type="TState"/>
                </Parameters>
                <Variables>
                  <Variable Identifier="Selector" Type="string"/>
                </Variables>
                <Block>
                  <Choose>
                    <When Expression="Prefix = TPrefix.None">
                      <Case Expression="State">
                        <On Select="TState.InNum">
                          <Execute Statement="HandlePrefix('cR, cE', '', TState.AfterPrefixFracSep, 'SiUnit &amp;lt;&amp;gt; TSiUnit.Ohm')"/>
                        </On>
                        <On Select="TState.InDecimalFrac">
                          <Execute Statement="HandlePrefix('cR, cE', '', TState.AfterPrefix, 'SiUnit &amp;lt;&amp;gt; TSiUnit.Ohm')"/>
                        </On>
                      </Case>
                    </When>
                    <Otherwise>
                      <Choose>
                        <When Expression="Prefix = TPrefix.Micro">
                          <Execute Statement="Selector:= 'cMicro, cMicroAlt, cMicroAlt2'"/>
                        </When>
                        <Otherwise>
                          <Execute Statement="Selector:= 'c'+ PrefixName(Prefix)"/>
                        </Otherwise>
                      </Choose>
                      <Variable Identifier="Scale" Type="string" Init="'cScale' + PrefixName(Prefix)"/>
                      <Case Expression="State">
                        <On Select="TState.InNum">
                          <Execute Statement="HandlePrefix(Selector, Scale, TState.AfterPrefixFracSep, '')"/>
                          <Execute Statement="HandlePrefix('cK', Scale, TState.AfterPrefixFracSep, 'SiUnit &amp;lt;&amp;gt; TSiUnit.Ohm')" Condition="Prefix = TPrefix.Kilo"/>
                        </On>
                        <On Select="TState.InDecimalFrac, TState.AfterNumSep">
                          <Execute Statement="HandlePrefix(Selector, Scale, TState.AfterPrefix, '')"/>
                          <Execute Statement="HandlePrefix('cK', Scale, TState.AfterPrefix, 'SiUnit &amp;lt;&amp;gt; TSiUnit.Ohm')" Condition="Prefix = TPrefix.Kilo"/>
                        </On>
                      </Case>
                    </Otherwise>
                  </Choose>
                </Block>
              </Procedure>

              <Procedure Identifier="InitEvents">
                <Block>
                  <lil:LinkedList.LinkUp Head="EventsHead" Tail="EventsTail" TailLinkStatement="EventsTail.Next:= Item" Item="TWhiteSpaceEvent.Create"/>
                  <lil:LinkedList.LinkUp Head="EventsHead" Tail="EventsTail" TailLinkStatement="EventsTail.Next:= Item" Item="TSignCharacterEvent.Create"/>
                  <lil:LinkedList.LinkUp Head="EventsHead" Tail="EventsTail" TailLinkStatement="EventsTail.Next:= Item" Item="TNumCharacterEvent.Create"/>
                  <lil:LinkedList.LinkUp Head="EventsHead" Tail="EventsTail" TailLinkStatement="EventsTail.Next:= Item" Item="TDecimalCharacterEvent.Create"/>
                  <ForLoop Indexer="I" From="TPrefix.Low" To="TPrefix.High">
                    <Case Expression="I">
                      <On Select="TPrefix.Milli">
                        <lil:LinkedList.LinkUp Head="EventsHead" Tail="EventsTail" TailLinkStatement="EventsTail.Next:= Item" Item="TMeterOrMilliCharacterEvent.Create"/>
                      </On>
                      <Otherwise>
                        <Variable Identifier="PrefixCharacterEvent" Type="TPrefixCharacterEvent" Init="TPrefixCharacterEvent.Create"/>
                        <Execute Statement="PrefixCharacterEvent.Prefix:= I"/>
                        <lil:LinkedList.LinkUp Head="EventsHead" Tail="EventsTail" TailLinkStatement="EventsTail.Next:= Item" Item="PrefixCharacterEvent"/>
                      </Otherwise>
                    </Case>
                  </ForLoop>
                  <ForLoop Indexer="I" From="TSiUnit.Low" To="TSiUnit.High">
                    <Case Expression="I">
                      <On Select="TSiUnit.Meter">
                      </On>
                      <On Select="TSiUnit.Henry">
                      </On>
                      <On Select="TSiUnit.Hz">
                        <Variable Identifier="HenryOrHzCharacterEvent" Type="THenryOrHzCharacterEvent" Init="THenryOrHzCharacterEvent.Create"/>
                        <lil:LinkedList.LinkUp Head="EventsHead" Tail="EventsTail" TailLinkStatement="EventsTail.Next:= Item" Item="HenryOrHzCharacterEvent"/>
                      </On>
                      <Otherwise>
                        <Variable Identifier="UnitCharacterEvent" Type="TUnitCharacterEvent" Init="TUnitCharacterEvent.Create"/>
                        <Execute Statement="UnitCharacterEvent.SiUnit:= I"/>
                        <lil:LinkedList.LinkUp Head="EventsHead" Tail="EventsTail" TailLinkStatement="EventsTail.Next:= Item" Item="UnitCharacterEvent"/>
                      </Otherwise>
                    </Case>
                  </ForLoop>
                </Block>
              </Procedure>

            </Procedures>
            <Block>
              <Execute Statement="InitEvents"/>
              <ForLoop Indexer="I" From="TState.Low" To="TState.High">
                <rep:Reporter.Information Text="Format('            &lt;stm:State Name=&quot;%s&quot;&gt;', StateName(I))"/>
                <rep:Reporter.Information Text="Format('              &lt;Case Expression=&quot;ChrI&quot; Optimalisation=&quot;integermapping&quot; OrdinalType=&quot;widechar&quot;&gt;', StateName(I))"/>
                <lil:LinkedList.Iterate Head="EventsHead" ItemType="TBaseCharacterEvent" RunningItem="RunningEvent" Next="RunningEvent.Next">
                  <Execute Statement="RunningEvent.HandleState(I)"/>
                </lil:LinkedList.Iterate>
                <rep:Reporter.Information Text="Format('                &lt;Otherwise&gt;')"/>
                <rep:Reporter.Information Text="Format('                  &lt;Exit/&gt;')"/>
                <rep:Reporter.Information Text="Format('                &lt;/Otherwise&gt;')"/>
                <rep:Reporter.Information Text="Format('              &lt;/Case&gt;', StateName(I))"/>
                <rep:Reporter.Information Text="Format('            &lt;/stm:State&gt;')"/>
              </ForLoop>
            </Block>
          </Procedure>

          <Procedure Identifier="GenerateFactorInits">
            <Parameters>
              <Parameter Identifier="ConstFormat" Type="string"/>
            </Parameters>
            <Block>
              <ForLoop Indexer="I" From="TPrefix.Low" To="TPrefix.High">
                <Case Expression="I">
                  <On Select="TPrefix.None">
                    <rep:Reporter.Information Text="Format('      &lt;Execute Statement=&quot;FactorPrefixNone:= %s&quot;/&gt;', Format(ConstFormat, ''))"/>
                  </On>
                  <Otherwise>
                    <rep:Reporter.Information Text="Format('      &lt;Execute Statement=&quot;FactorPrefix%s:= %s&quot;/&gt;', PrefixName(I), Format(ConstFormat, PrefixName(I)))"/>
                  </Otherwise>
                </Case>
              </ForLoop>
            </Block>
          </Procedure>

          <Procedure Identifier="GenerateNumScaling">
            <Parameters>
              <Parameter Identifier="Variable" Type="string"/>
              <Parameter Identifier="ExpressionFormat" Type="string"/>
              <Parameter Identifier="ExpressionFormat2" Type="string"/>
            </Parameters>
            <Block>
              <ForLoop Indexer="I" From="19" To="1" Reverse="true">
                <rep:Reporter.Information Text="Format('            &lt;On Select=&quot;-%d&quot;&gt;', I)"/>
                <rep:Reporter.Information Text="Format('              &lt;Exit Condition=&quot;(%s mod cScaleFactor%.2d) &amp;gt; 0&quot;/&gt;', Variable, I)"/>
                <rep:Reporter.Information Text="Format('              &lt;Execute Statement=&quot;CheckIntValue:= %s&quot;/&gt;', Format(ExpressionFormat, I))"/>
                <rep:Reporter.Information Text="Format('            &lt;/On&gt;')"/>
              </ForLoop>
              <ForLoop Indexer="I" From="1" To="19">
                <rep:Reporter.Information Text="Format('            &lt;On Select=&quot;%d&quot;&gt;', I)"/>
                <rep:Reporter.Information Text="Format('              &lt;Execute Statement=&quot;CheckIntValue:= %s&quot;/&gt;', Format(ExpressionFormat2, I))"/>
                <!--<rep:Reporter.Information Text="Format('              &lt;Exit Condition=&quot;IsError(CheckIntValue)&quot;/&gt;')"/>-->
                <rep:Reporter.Information Text="Format('            &lt;/On&gt;')"/>
              </ForLoop>
            </Block>
          </Procedure>

          <Procedure Identifier="GenerateConverterVariables">
            <Block>
              <ForLoop Indexer="I" From="TSiUnit.Low" To="TSiUnit.High">
                <rep:Reporter.Information Text="Format('            &lt;Variable Identifier=&quot;uc%s&quot; Type=&quot;TUnitConvertor&quot;/&gt;', SiUnitName(I))"/>
              </ForLoop>
            </Block>
          </Procedure>

          <Procedure Identifier="GenerateConverterCase">
            <Block>
              <ForLoop Indexer="I" From="TSiUnit.Low" To="TSiUnit.High">
                <rep:Reporter.Information Text="Format('            &lt;On Select=&quot;TSiUnit.%s&quot;&gt;', SiUnitName(I))"/>
                <rep:Reporter.Information Text="Format('              &lt;Choose&gt;')"/>
                <rep:Reporter.Information Text="Format('                &lt;When Expression=&quot;IsEmpty(uc%s)&quot;&gt;', SiUnitName(I))"/>
                <rep:Reporter.Information Text="Format('                  &lt;Execute Statement=&quot;Result:= TUnitConvertor.Create(SiUnit)&quot;/&gt;')"/>
                <rep:Reporter.Information Text="Format('                  &lt;Execute Statement=&quot;uc%s:= Result&quot;/&gt;', SiUnitName(I))"/>
                <rep:Reporter.Information Text="Format('               &lt;/When&gt;')"/>
                <rep:Reporter.Information Text="Format('               &lt;Otherwise&gt;')"/>
                <rep:Reporter.Information Text="Format('                  &lt;Execute Statement=&quot;Result:= uc%s&quot;/&gt;', SiUnitName(I))"/>
                <rep:Reporter.Information Text="Format('               &lt;/Otherwise&gt;')"/>
                <rep:Reporter.Information Text="Format('              &lt;/Choose&gt;')"/>
                <rep:Reporter.Information Text="Format('            &lt;/On&gt;')"/>
              </ForLoop>
            </Block>
          </Procedure>

          <Procedure Identifier="GenerateDetermineScale">
            <Block>
              <ForLoop Indexer="I" From="0" To="18">
                <rep:Reporter.Information Text="Format('            &lt;On Select=&quot;cScaleFactor%.2d..cScaleFactor%.2d - 1&quot;&gt;', I, I+1)"/>
                <rep:Reporter.Information Text="Format('              &lt;Execute Statement=&quot;IntScale  := %d&quot;/&gt;', I)"/>
                <rep:Reporter.Information Text="Format('            &lt;/On&gt;')"/>
              </ForLoop>
            </Block>
          </Procedure>

          <Procedure Identifier="GenerateDeterminePrefix">
            <Block>
              <ForLoop Indexer="I" From="TPrefix.Low" To="TPrefix.High">
                <Case Expression="I">
                  <On Select="TPrefix.None">
                    <rep:Reporter.Information Text="Format('                &lt;Block Condition=&quot;(Scale &amp;gt;= 0)&quot;&gt;')"/>
                    <rep:Reporter.Information Text="Format('                  &lt;Execute Statement=&quot;Prefix:= TPrefix.None&quot;/&gt;')"/>
                    <rep:Reporter.Information Text="Format('                  &lt;Execute Statement=&quot;PrefixScale:= 0&quot;/&gt;')"/>
                    <rep:Reporter.Information Text="Format('                  &lt;Break/&gt;')"/>
                    <rep:Reporter.Information Text="Format('               &lt;/Block&gt;')"/>
                    <rep:Reporter.Information Text="Format('                &lt;Execute Statement=&quot;Prefix:= TPrefix.None&quot;/&gt;')"/>
                    <rep:Reporter.Information Text="Format('                &lt;Execute Statement=&quot;PrefixScale:= 0&quot;/&gt;')"/>
                  </On>
                  <Otherwise>
                    <rep:Reporter.Information Text="Format('                &lt;Block Condition=&quot;AllowPrefix%s&quot;&gt;', PrefixName(I), PrefixName(I))"/>
                    <rep:Reporter.Information Text="Format('                  &lt;Block Condition=&quot;(Scale &amp;gt;= cScale%s)&quot;&gt;', PrefixName(I), PrefixName(I))"/>
                    <rep:Reporter.Information Text="Format('                    &lt;Block Condition=&quot;IsEmpty(PrefixScale) or ((Scale - cScale%s) &amp;lt;= (PrefixScale-Scale+1))&quot;&gt;', PrefixName(I), PrefixName(I))"/>
                    <rep:Reporter.Information Text="Format('                      &lt;Execute Statement=&quot;Prefix:= TPrefix.%s&quot;/&gt;', PrefixName(I))"/>
                    <rep:Reporter.Information Text="Format('                      &lt;Execute Statement=&quot;PrefixScale:= cScale%s&quot;/&gt;', PrefixName(I))"/>
                    <rep:Reporter.Information Text="Format('                    &lt;/Block&gt;')"/>
                    <rep:Reporter.Information Text="Format('                    &lt;Break/&gt;')"/>
                    <rep:Reporter.Information Text="Format('                  &lt;/Block&gt;')"/>
                    <rep:Reporter.Information Text="Format('                  &lt;Execute Statement=&quot;Prefix:= TPrefix.%s&quot;/&gt;', PrefixName(I))"/>
                    <rep:Reporter.Information Text="Format('                  &lt;Execute Statement=&quot;PrefixScale:= cScale%s&quot;/&gt;', PrefixName(I))"/>
                    <rep:Reporter.Information Text="Format('               &lt;/Block&gt;')"/>
                  </Otherwise>
                </Case>
              </ForLoop>
            </Block>
          </Procedure>

        </Procedures>

        <Block>
          <msx:Document.Create Identifier="XmlDoc"/>
          <msx:Document.LoadFromFile Document="XmlDoc" Filename="GetFilenameFromBase(ExtractFilePath(ScriptFilename), '..\Resources.Project.CodeGen\ComponentKinds.xml')"/>
          <rep:Reporter.DefaultTarget Identifier="TUnitConvertor.Fields"/>
          <rep:Reporter.Information Text="''"/>
          <Execute Statement="GenerateClassFields"/>

          <rep:Reporter.DefaultTarget Identifier="TUnitConvertor.EStrToIntValue.StringLoop"/>
          <rep:Reporter.Information Text="''"/>
          <Execute Statement="GenerateEStrToIntValueStringLoop"/>

          <rep:Reporter.DefaultTarget Identifier="TUnitConvertor.EStrToIntValue.NumScaling"/>
          <rep:Reporter.Information Text="''"/>
          <Execute Statement="GenerateNumScaling('Num', 'Num div cScaleFactor%.2d', 'Num * cScaleFactor%.2d')"/>

          <rep:Reporter.DefaultTarget Identifier="TUnitConvertor.EStrToIntValue.FracScaling"/>
          <rep:Reporter.Information Text="''"/>
          <Execute Statement="GenerateNumScaling('Frac', 'CheckIntValue + Frac div cScaleFactor%.2d', 'CheckIntValue + Frac * cScaleFactor%.2d')"/>

          <rep:Reporter.DefaultTarget Identifier="Variables.Converters"/>
          <rep:Reporter.Information Text="''"/>
          <Execute Statement="GenerateConverterVariables"/>

          <rep:Reporter.DefaultTarget Identifier="GetConverter.Case"/>
          <rep:Reporter.Information Text="''"/>
          <Execute Statement="GenerateConverterCase"/>

          <rep:Reporter.DefaultTarget Identifier="TUnitConvertor.GetScale.DetermineScale"/>
          <rep:Reporter.Information Text="''"/>
          <Execute Statement="GenerateDetermineScale"/>

          <rep:Reporter.DefaultTarget Identifier="TUnitConvertor.GetScale.DeterminePrefix"/>
          <rep:Reporter.Information Text="''"/>
          <Execute Statement="GenerateDeterminePrefix"/>
        </Block>
      </pkg:Program>
    </scg:ScriptCodeGenerator>
  </CodeGenerators>
</Document>
