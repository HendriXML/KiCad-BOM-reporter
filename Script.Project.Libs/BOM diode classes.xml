<?xml version="1.0" encoding="utf-8" standalone="no"?>
<pkg:Library
  xsi:schemaLocation="urn:schemas-www-wisware.nl-scriptingpackages ../XmlSchemas.Common.XmlScript/XMLScripting.Packages.xsd"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="urn:schemas-www-wisware.nl-xmlscripting"
  xmlns:ado="urn:schemas-www-wisware.nl-xmlscripting-ado"
  xmlns:fil="urn:schemas-www-wisware.nl-xmlscripting-filemanagement"
  xmlns:fwl="urn:schemas-www-wisware.nl-xmlscripting-windowsfirewall"
  xmlns:inx="urn:schemas-www-wisware.nl-xmlscripting-index"
  xmlns:lil="urn:schemas-www-wisware.nl-xmlscripting-linkedlist"
  xmlns:msx="urn:schemas-www-wisware.nl-xmlscripting-xml"
  xmlns:pkg="urn:schemas-www-wisware.nl-scriptingpackages"
  xmlns:reg="urn:schemas-www-wisware.nl-xmlscripting-registry"
  xmlns:rep="urn:schemas-www-wisware.nl-xmlscripting-report"
  xmlns:sts="urn:schemas-www-wisware.nl-xmlscripting-showstatus"
  xmlns:sys="urn:schemas-www-wisware.nl-xmlscripting"
  xmlns:syu="urn:schemas-www-wisware.nl-xmlscripting-sysutils"
  >
  <Uses>
    <Use Identifier="ScienceUnits"/>
    <Use Identifier="ScienceIniHelper"/>
    <Use Identifier="ElectronicsUtils"/>
    <Use Identifier="BomStrings"/>
    <Use Identifier="BomEnumerations"/>
    <Use Identifier="BomClasses"/>
    <Use Identifier="NamedComponentClasses"/>
  </Uses>
  <Type>
    <DataClass Identifier="TDiodeSpec" Inherit="TNamedComponentSpec" DefaultConstructor="createonly">
      <VirtualMethod Identifier="vmHandleField" Override="true"/>
      <VirtualMethod Identifier="vmCheckComponentKind" Override="true"/>
      <VirtualMethod Identifier="vmSpecificationAsString" Override="true"/>
      <VirtualMethod Identifier="vmApplyTemplate" Override="true"/>
      <VirtualMethod Identifier="vmDoesMatchSpecification" Override="true"/>
      <VirtualMethod Identifier="vmCategoryMatchScore" Override="true"/>
      <!--<-<TComponentSpec.Fields-->
      <Field Identifier="ReverseVoltageRatingVT" Type="TValueType"/>
      <Field Identifier="ReverseVoltageRating" Type="Voltage"/>
      <Field Identifier="ErrorReverseVoltageRating" Type="string"/>
      <Field Identifier="ReverseVoltageRatingBounds" Type="TBoundType"/>
      <Field Identifier="ReverseVoltageRatingUpperBound" Type="Voltage"/>
      <Field Identifier="CurrentRatingVT" Type="TValueType"/>
      <Field Identifier="CurrentRating" Type="Current"/>
      <Field Identifier="ErrorCurrentRating" Type="string"/>
      <Field Identifier="CurrentRatingBounds" Type="TBoundType"/>
      <Field Identifier="CurrentRatingUpperBound" Type="Current"/>
      <Field Identifier="ForwardVoltageVT" Type="TValueType"/>
      <Field Identifier="ForwardVoltage" Type="Voltage"/>
      <Field Identifier="ErrorForwardVoltage" Type="string"/>
      <Field Identifier="ForwardVoltageBounds" Type="TBoundType"/>
      <Field Identifier="ForwardVoltageUpperBound" Type="Voltage"/>
      <!-->->-->
    </DataClass>

    <DataClass Identifier="TDiodeCategory" Inherit="TNamedComponentCategory">
      <VirtualMethod Identifier="vmCreateSpecification" Override="true"/>
      <VirtualMethod Identifier="vmIsValidSpecification" Override="true"/>
      <VirtualMethod Identifier="vmIndexSearchSpecifications" Override="true"/>
      <VirtualMethod Identifier="vmCompareSpecifications" Override="true"/>
      <VirtualMethod Identifier="vmLoadTemplatesFromIniFile" Override="true"/>
      <VirtualMethod Identifier="vmGetTemplate" Override="true"/>
      <VirtualMethod Identifier="vmCanExtractTemplateFromIniFile" Override="true"/>
      <Field Identifier="TemplateTHT" Type="TDiodeSpec"/>
    </DataClass>
  </Type>

  <Variables>
    <Variable Identifier="DiodeForwardVoltageConv" Type="TUnitConvertor" Init="GetUnitConvertor(TSiUnit.Volt)"/>
    <Variable Identifier="DiodeCurrentRatingConv" Type="TUnitConvertor" Init="GetUnitConvertor(TSiUnit.Amp)"/>
    <Variable Identifier="DiodeReverseVoltageRatingConv" Type="TUnitConvertor" Init="GetUnitConvertor(TSiUnit.Volt)"/>
  </Variables>

  <Procedures>

    <Function Identifier="TDiodeSpec.CheckComponentKind" VirtualMethod="vmCheckComponentKind" Type="Boolean">
      <Parameters>
        <Parameter Identifier="ComponentKind" Type="TComponentKind"/>
      </Parameters>
      <Block>
        <Execute Statement="Result:= False"/>
        <Case Expression="ComponentKind" Optimalisation="integermapping">
          <On Select="TComponentKind.Diode, TComponentKind.SchottkyDiode">
            <Execute Statement="Result:= True"/>
          </On>
        </Case>
      </Block>
    </Function>

    <Function Identifier="TDiodeSpec.DoesMatchSpecification" VirtualMethod="vmDoesMatchSpecification" Type="Boolean">
      <Parameters>
        <Parameter Identifier="ComponentSpec" Type="TComponentSpec"/>
      </Parameters>
      <Block>
        <Execute Statement="Result:= False"/>
        <Exit Condition="not inherited DoesMatchSpecification(ComponentSpec)"/>
        <Variable Identifier="IsMultiple" Type="Boolean"/>
        <!--<-<TComponentSpec.DoesMatchSpecification-->
        <Case Expression="ReverseVoltageRatingVT">
          <On Select="TValueType.Specified, TValueType.SpecifiedByTemplate">
            <Exit Condition="not (ComponentSpec is TDiodeSpec)"/>
            <Case Expression="TDiodeSpec(ComponentSpec).ReverseVoltageRatingVT">
              <On Select="TValueType.Specified, TValueType.SpecifiedByTemplate">
                <Exit Condition="ReverseVoltageRating &lt;&gt; TDiodeSpec(ComponentSpec).ReverseVoltageRating"/>
              </On>
              <On Select="TValueType.SpecifiedEx, TValueType.SpecifiedExByTemplate">
                <Exit/>
              </On>
              <On Select="TValueType.Error, TValueType.ErrorByTemplate">
                <Exit/>
              </On>
            </Case>
          </On>
          <On Select="TValueType.SpecifiedEx, TValueType.SpecifiedExByTemplate">
            <Exit Condition="not (ComponentSpec is TDiodeSpec)"/>
            <Case Expression="TDiodeSpec(ComponentSpec).ReverseVoltageRatingVT">
              <On Select="TValueType.Specified, TValueType.SpecifiedByTemplate">
                <Case Expression="ReverseVoltageRatingBounds">
                  <On Select="TBoundType.Lower">
                    <Exit Condition="TDiodeSpec(ComponentSpec).ReverseVoltageRating &lt; ReverseVoltageRating"/>
                  </On>
                  <On Select="TBoundType.Upper">
                    <Exit Condition="TDiodeSpec(ComponentSpec).ReverseVoltageRating &gt; ReverseVoltageRatingUpperBound"/>
                  </On>
                  <On Select="TBoundType.Range">
                    <Exit Condition="(TDiodeSpec(ComponentSpec).ReverseVoltageRating &lt; ReverseVoltageRating) or (TDiodeSpec(ComponentSpec).ReverseVoltageRating &gt; ReverseVoltageRatingUpperBound)"/>
                  </On>
                </Case>
              </On>
              <On Select="TValueType.SpecifiedEx, TValueType.SpecifiedExByTemplate">
                <Exit/>
              </On>
              <On Select="TValueType.Error, TValueType.ErrorByTemplate">
                <Exit/>
              </On>
            </Case>
          </On>
          <On Select="TValueType.Error, TValueType.ErrorByTemplate">
            <Exit/>
          </On>
        </Case>
        <Case Expression="CurrentRatingVT">
          <On Select="TValueType.Specified, TValueType.SpecifiedByTemplate">
            <Exit Condition="not (ComponentSpec is TDiodeSpec)"/>
            <Case Expression="TDiodeSpec(ComponentSpec).CurrentRatingVT">
              <On Select="TValueType.Specified, TValueType.SpecifiedByTemplate">
                <Exit Condition="CurrentRating &lt;&gt; TDiodeSpec(ComponentSpec).CurrentRating"/>
              </On>
              <On Select="TValueType.SpecifiedEx, TValueType.SpecifiedExByTemplate">
                <Exit/>
              </On>
              <On Select="TValueType.Error, TValueType.ErrorByTemplate">
                <Exit/>
              </On>
            </Case>
          </On>
          <On Select="TValueType.SpecifiedEx, TValueType.SpecifiedExByTemplate">
            <Exit Condition="not (ComponentSpec is TDiodeSpec)"/>
            <Case Expression="TDiodeSpec(ComponentSpec).CurrentRatingVT">
              <On Select="TValueType.Specified, TValueType.SpecifiedByTemplate">
                <Case Expression="CurrentRatingBounds">
                  <On Select="TBoundType.Lower">
                    <Exit Condition="TDiodeSpec(ComponentSpec).CurrentRating &lt; CurrentRating"/>
                  </On>
                  <On Select="TBoundType.Upper">
                    <Exit Condition="TDiodeSpec(ComponentSpec).CurrentRating &gt; CurrentRatingUpperBound"/>
                  </On>
                  <On Select="TBoundType.Range">
                    <Exit Condition="(TDiodeSpec(ComponentSpec).CurrentRating &lt; CurrentRating) or (TDiodeSpec(ComponentSpec).CurrentRating &gt; CurrentRatingUpperBound)"/>
                  </On>
                </Case>
              </On>
              <On Select="TValueType.SpecifiedEx, TValueType.SpecifiedExByTemplate">
                <Exit/>
              </On>
              <On Select="TValueType.Error, TValueType.ErrorByTemplate">
                <Exit/>
              </On>
            </Case>
          </On>
          <On Select="TValueType.Error, TValueType.ErrorByTemplate">
            <Exit/>
          </On>
        </Case>
        <Case Expression="ForwardVoltageVT">
          <On Select="TValueType.Specified, TValueType.SpecifiedByTemplate">
            <Exit Condition="not (ComponentSpec is TDiodeSpec)"/>
            <Case Expression="TDiodeSpec(ComponentSpec).ForwardVoltageVT">
              <On Select="TValueType.Specified, TValueType.SpecifiedByTemplate">
                <Exit Condition="ForwardVoltage &lt;&gt; TDiodeSpec(ComponentSpec).ForwardVoltage"/>
              </On>
              <On Select="TValueType.SpecifiedEx, TValueType.SpecifiedExByTemplate">
                <Exit/>
              </On>
              <On Select="TValueType.Error, TValueType.ErrorByTemplate">
                <Exit/>
              </On>
            </Case>
          </On>
          <On Select="TValueType.SpecifiedEx, TValueType.SpecifiedExByTemplate">
            <Exit Condition="not (ComponentSpec is TDiodeSpec)"/>
            <Case Expression="TDiodeSpec(ComponentSpec).ForwardVoltageVT">
              <On Select="TValueType.Specified, TValueType.SpecifiedByTemplate">
                <Case Expression="ForwardVoltageBounds">
                  <On Select="TBoundType.Lower">
                    <Exit Condition="TDiodeSpec(ComponentSpec).ForwardVoltage &lt; ForwardVoltage"/>
                  </On>
                  <On Select="TBoundType.Upper">
                    <Exit Condition="TDiodeSpec(ComponentSpec).ForwardVoltage &gt; ForwardVoltageUpperBound"/>
                  </On>
                  <On Select="TBoundType.Range">
                    <Exit Condition="(TDiodeSpec(ComponentSpec).ForwardVoltage &lt; ForwardVoltage) or (TDiodeSpec(ComponentSpec).ForwardVoltage &gt; ForwardVoltageUpperBound)"/>
                  </On>
                </Case>
              </On>
              <On Select="TValueType.SpecifiedEx, TValueType.SpecifiedExByTemplate">
                <Exit/>
              </On>
              <On Select="TValueType.Error, TValueType.ErrorByTemplate">
                <Exit/>
              </On>
            </Case>
          </On>
          <On Select="TValueType.Error, TValueType.ErrorByTemplate">
            <Exit/>
          </On>
        </Case>
        <!-->->-->
        <Execute Statement="Result:= True"/>
      </Block>
    </Function>

    <Function Identifier="TDiodeSpec.CategoryMatchScore" VirtualMethod="vmCategoryMatchScore" Type="Int64">
      <Parameters>
        <Parameter Identifier="ComponentSpec" Type="TComponentSpec"/>
      </Parameters>
      <Block>
        <Execute Statement="Result:= 0"/>

        <Exit Condition="not (ComponentSpec is TDiodeSpec)"/>

        <Case Expression="ComponentKindVT">
          <On Select="TValueType.Specified, TValueType.SpecifiedByTemplate">
            <Case Expression="ComponentSpec.ComponentKindVT">
              <On Select="TValueType.Specified, TValueType.SpecifiedByTemplate">
                <Exit Condition="ComponentKind &lt;&gt; ComponentSpec.ComponentKind" Result="0"/>
                <Execute Statement="Result:= Result + 1"/>
              </On>
              <On Select="TValueType.Error, TValueType.ErrorByTemplate">
                <Exit Result="0"/>
              </On>
            </Case>
          </On>
          <On Select="TValueType.Error, TValueType.ErrorByTemplate">
            <Exit Result="0"/>
          </On>
        </Case>

        <Execute Statement="Result:= Result shl 1"/>
        <Case Expression="ForwardVoltageVT">
          <On Select="TValueType.Specified, TValueType.SpecifiedByTemplate">
            <Case Expression="TDiodeSpec(ComponentSpec).ForwardVoltageVT">
              <On Select="TValueType.Specified, TValueType.SpecifiedByTemplate">
                <Exit Condition="ForwardVoltage &lt;&gt; TDiodeSpec(ComponentSpec).ForwardVoltage" Result="0"/>
                <Execute Statement="Result:= Result + 1"/>
              </On>
              <On Select="TValueType.Error, TValueType.ErrorByTemplate">
                <Exit Result="0"/>
              </On>
            </Case>
          </On>
          <On Select="TValueType.Error, TValueType.ErrorByTemplate">
            <Exit Result="0"/>
          </On>
        </Case>

        <Execute Statement="Result:= Result shl 1"/>
        <Case Expression="CurrentRatingVT">
          <On Select="TValueType.Specified, TValueType.SpecifiedByTemplate">
            <Case Expression="TDiodeSpec(ComponentSpec).CurrentRatingVT">
              <On Select="TValueType.Specified, TValueType.SpecifiedByTemplate">
                <Exit Condition="CurrentRating &lt;&gt; TDiodeSpec(ComponentSpec).CurrentRating" Result="0"/>
                <Execute Statement="Result:= Result + 1"/>
              </On>
              <On Select="TValueType.Error, TValueType.ErrorByTemplate">
                <Exit Result="0"/>
              </On>
            </Case>
          </On>
          <On Select="TValueType.Error, TValueType.ErrorByTemplate">
            <Exit Result="0"/>
          </On>
        </Case>

        <Execute Statement="Result:= Result shl 1"/>
        <Case Expression="FootprintVT">
          <On Select="TValueType.Specified, TValueType.SpecifiedByTemplate">
            <Case Expression="ComponentSpec.FootprintVT">
              <On Select="TValueType.Specified, TValueType.SpecifiedByTemplate">
                <Execute Statement="Result:= Result + 1" Condition="Footprint = ComponentSpec.Footprint"/>
              </On>
              <On Select="TValueType.SpecifiedExByTemplate, TValueType.SpecifiedEx">
                <Execute Statement="Result:= Result + 1" Condition="ComponentSpec.FootprintMask.Matches(Footprint)"/>
              </On>
              <On Select="TValueType.Unspecified, TValueType.Cleared, TValueType.ClearedByTemplate">
              </On>
              <Otherwise>
                <Exit/>
              </Otherwise>
            </Case>
          </On>
          <On Select="TValueType.Error, TValueType.ErrorByTemplate">
            <Exit/>
          </On>
        </Case>

        <Execute Statement="Result:= Result shl 1"/>
        <Case Expression="ReverseVoltageRatingVT">
          <On Select="TValueType.Specified, TValueType.SpecifiedByTemplate">
            <Case Expression="TDiodeSpec(ComponentSpec).ReverseVoltageRatingVT">
              <On Select="TValueType.Specified, TValueType.SpecifiedByTemplate">
                <Exit Condition="ReverseVoltageRating &lt;&gt; TDiodeSpec(ComponentSpec).ReverseVoltageRating" Result="0"/>
                <Execute Statement="Result:= Result + 1"/>
              </On>
              <On Select="TValueType.Error, TValueType.ErrorByTemplate">
                <Exit Result="0"/>
              </On>
            </Case>
          </On>
          <On Select="TValueType.Error, TValueType.ErrorByTemplate">
            <Exit Result="0"/>
          </On>
        </Case>

        <Execute Statement="Result:= Result shl 1"/>
        <Case Expression="PartNumberVT">
          <On Select="TValueType.Specified, TValueType.SpecifiedByTemplate">
            <Case Expression="ComponentSpec.PartNumberVT">
              <On Select="TValueType.Specified, TValueType.SpecifiedByTemplate">
                <Exit Condition="not SameText(PartNumber, ComponentSpec.PartNumber)" Result="0"/>
                <Execute Statement="Result:= Result + 1"/>
              </On>
              <On Select="TValueType.Error, TValueType.ErrorByTemplate">
                <Exit Result="0"/>
              </On>
            </Case>
          </On>
          <On Select="TValueType.Error, TValueType.ErrorByTemplate">
            <Exit Result="0"/>
          </On>
        </Case>

        <Execute Statement="Result:= Result shl 1"/>
        <Case Expression="ManufacturerVT">
          <On Select="TValueType.Specified, TValueType.SpecifiedByTemplate">
            <Case Expression="ComponentSpec.ManufacturerVT">
              <On Select="TValueType.Specified, TValueType.SpecifiedByTemplate">
                <Exit Condition="not SameText(Manufacturer, ComponentSpec.Manufacturer)" Result="0"/>
                <Execute Statement="Result:= Result + 1"/>
              </On>
              <On Select="TValueType.Error, TValueType.ErrorByTemplate">
                <Exit Result="0"/>
              </On>
            </Case>
          </On>
          <On Select="TValueType.Error, TValueType.ErrorByTemplate">
            <Exit Result="0"/>
          </On>
        </Case>
      </Block>
    </Function>

    <Procedure Identifier="TDiodeSpec.HandleField" VirtualMethod="vmHandleField">
      <Parameters>
        <Parameter Identifier="CustomField" Type="TCustomField"/>
        <Parameter Identifier="Name" Type="string"/>
        <Parameter Identifier="Value" Type="string"/>
        <Parameter Identifier="Clear" Type="Boolean"/>
      </Parameters>
      <Variables>
        <Variable Identifier="LocValue" Type="DecimalQuantity"/>
      </Variables>
      <Block>
        <Case Expression="CustomField" Optimalisation="integermapping">
          <!--<-<TComponentSpec.HandleField-->
          <On Select="TCustomField.ReverseVoltageRating">
            <Choose>
              <When Expression="Clear">
                <Execute Statement="ReverseVoltageRatingVT:= TValueType.Cleared"/>
              </When>
              <When Expression="DiodeReverseVoltageRatingConv.EStrToDecimalQuantity(Value, LocValue)">
                <Execute Statement="ReverseVoltageRatingVT:= TValueType.Specified"/>
                <Execute Statement="ReverseVoltageRating:= LocValue"/>
              </When>
              <Otherwise>
                <Execute Statement="ReverseVoltageRatingVT:= TValueType.Error"/>
                <Execute Statement="ErrorReverseVoltageRating:= Value"/>
              </Otherwise>
            </Choose>
          </On>
          <On Select="TCustomField.ReverseVoltageRatingMin">
            <Choose>
              <When Expression="Clear">
                <Execute Statement="ReverseVoltageRatingVT:= TValueType.Cleared"/>
              </When>
              <When Expression="DiodeReverseVoltageRatingConv.EStrToDecimalQuantity(Value, LocValue)">
                <Choose>
                  <When Expression="(ReverseVoltageRatingVT = TValueType.SpecifiedEx) and (ReverseVoltageRatingBounds = TBoundType.Upper)">
                    <Execute Statement="ReverseVoltageRatingBounds:= TBoundType.Range"/>
                  </When>
                  <Otherwise>
                    <Execute Statement="ReverseVoltageRatingVT:= TValueType.SpecifiedEx"/>
                    <Execute Statement="ReverseVoltageRatingBounds:= TBoundType.Lower"/>
                  </Otherwise>
                </Choose>
                <Execute Statement="ReverseVoltageRating:= LocValue"/>
              </When>
              <Otherwise>
                <Execute Statement="ReverseVoltageRatingVT:= TValueType.Error"/>
                <Execute Statement="ErrorReverseVoltageRating:= Value"/>
              </Otherwise>
            </Choose>
          </On>
          <On Select="TCustomField.ReverseVoltageRatingMax">
            <Choose>
              <When Expression="Clear">
                <Execute Statement="ReverseVoltageRatingVT:= TValueType.Cleared"/>
              </When>
              <When Expression="DiodeReverseVoltageRatingConv.EStrToDecimalQuantity(Value, LocValue)">
                <Choose>
                  <When Expression="(ReverseVoltageRatingVT = TValueType.SpecifiedEx) and (ReverseVoltageRatingBounds = TBoundType.Lower)">
                    <Execute Statement="ReverseVoltageRatingBounds:= TBoundType.Range"/>
                  </When>
                  <Otherwise>
                    <Execute Statement="ReverseVoltageRatingVT:= TValueType.SpecifiedEx"/>
                    <Execute Statement="ReverseVoltageRatingBounds:= TBoundType.Upper"/>
                  </Otherwise>
                </Choose>
                <Execute Statement="ReverseVoltageRatingUpperBound:= LocValue"/>
              </When>
              <Otherwise>
                <Execute Statement="ReverseVoltageRatingVT:= TValueType.Error"/>
                <Execute Statement="ErrorReverseVoltageRating:= Value"/>
              </Otherwise>
            </Choose>
          </On>
          <On Select="TCustomField.CurrentRating">
            <Choose>
              <When Expression="Clear">
                <Execute Statement="CurrentRatingVT:= TValueType.Cleared"/>
              </When>
              <When Expression="DiodeCurrentRatingConv.EStrToDecimalQuantity(Value, LocValue)">
                <Execute Statement="CurrentRatingVT:= TValueType.Specified"/>
                <Execute Statement="CurrentRating:= LocValue"/>
              </When>
              <Otherwise>
                <Execute Statement="CurrentRatingVT:= TValueType.Error"/>
                <Execute Statement="ErrorCurrentRating:= Value"/>
              </Otherwise>
            </Choose>
          </On>
          <On Select="TCustomField.CurrentRatingMin">
            <Choose>
              <When Expression="Clear">
                <Execute Statement="CurrentRatingVT:= TValueType.Cleared"/>
              </When>
              <When Expression="DiodeCurrentRatingConv.EStrToDecimalQuantity(Value, LocValue)">
                <Choose>
                  <When Expression="(CurrentRatingVT = TValueType.SpecifiedEx) and (CurrentRatingBounds = TBoundType.Upper)">
                    <Execute Statement="CurrentRatingBounds:= TBoundType.Range"/>
                  </When>
                  <Otherwise>
                    <Execute Statement="CurrentRatingVT:= TValueType.SpecifiedEx"/>
                    <Execute Statement="CurrentRatingBounds:= TBoundType.Lower"/>
                  </Otherwise>
                </Choose>
                <Execute Statement="CurrentRating:= LocValue"/>
              </When>
              <Otherwise>
                <Execute Statement="CurrentRatingVT:= TValueType.Error"/>
                <Execute Statement="ErrorCurrentRating:= Value"/>
              </Otherwise>
            </Choose>
          </On>
          <On Select="TCustomField.CurrentRatingMax">
            <Choose>
              <When Expression="Clear">
                <Execute Statement="CurrentRatingVT:= TValueType.Cleared"/>
              </When>
              <When Expression="DiodeCurrentRatingConv.EStrToDecimalQuantity(Value, LocValue)">
                <Choose>
                  <When Expression="(CurrentRatingVT = TValueType.SpecifiedEx) and (CurrentRatingBounds = TBoundType.Lower)">
                    <Execute Statement="CurrentRatingBounds:= TBoundType.Range"/>
                  </When>
                  <Otherwise>
                    <Execute Statement="CurrentRatingVT:= TValueType.SpecifiedEx"/>
                    <Execute Statement="CurrentRatingBounds:= TBoundType.Upper"/>
                  </Otherwise>
                </Choose>
                <Execute Statement="CurrentRatingUpperBound:= LocValue"/>
              </When>
              <Otherwise>
                <Execute Statement="CurrentRatingVT:= TValueType.Error"/>
                <Execute Statement="ErrorCurrentRating:= Value"/>
              </Otherwise>
            </Choose>
          </On>
          <On Select="TCustomField.ForwardVoltage">
            <Choose>
              <When Expression="Clear">
                <Execute Statement="ForwardVoltageVT:= TValueType.Cleared"/>
              </When>
              <When Expression="DiodeForwardVoltageConv.EStrToDecimalQuantity(Value, LocValue)">
                <Execute Statement="ForwardVoltageVT:= TValueType.Specified"/>
                <Execute Statement="ForwardVoltage:= LocValue"/>
              </When>
              <Otherwise>
                <Execute Statement="ForwardVoltageVT:= TValueType.Error"/>
                <Execute Statement="ErrorForwardVoltage:= Value"/>
              </Otherwise>
            </Choose>
          </On>
          <On Select="TCustomField.ForwardVoltageMin">
            <Choose>
              <When Expression="Clear">
                <Execute Statement="ForwardVoltageVT:= TValueType.Cleared"/>
              </When>
              <When Expression="DiodeForwardVoltageConv.EStrToDecimalQuantity(Value, LocValue)">
                <Choose>
                  <When Expression="(ForwardVoltageVT = TValueType.SpecifiedEx) and (ForwardVoltageBounds = TBoundType.Upper)">
                    <Execute Statement="ForwardVoltageBounds:= TBoundType.Range"/>
                  </When>
                  <Otherwise>
                    <Execute Statement="ForwardVoltageVT:= TValueType.SpecifiedEx"/>
                    <Execute Statement="ForwardVoltageBounds:= TBoundType.Lower"/>
                  </Otherwise>
                </Choose>
                <Execute Statement="ForwardVoltage:= LocValue"/>
              </When>
              <Otherwise>
                <Execute Statement="ForwardVoltageVT:= TValueType.Error"/>
                <Execute Statement="ErrorForwardVoltage:= Value"/>
              </Otherwise>
            </Choose>
          </On>
          <On Select="TCustomField.ForwardVoltageMax">
            <Choose>
              <When Expression="Clear">
                <Execute Statement="ForwardVoltageVT:= TValueType.Cleared"/>
              </When>
              <When Expression="DiodeForwardVoltageConv.EStrToDecimalQuantity(Value, LocValue)">
                <Choose>
                  <When Expression="(ForwardVoltageVT = TValueType.SpecifiedEx) and (ForwardVoltageBounds = TBoundType.Lower)">
                    <Execute Statement="ForwardVoltageBounds:= TBoundType.Range"/>
                  </When>
                  <Otherwise>
                    <Execute Statement="ForwardVoltageVT:= TValueType.SpecifiedEx"/>
                    <Execute Statement="ForwardVoltageBounds:= TBoundType.Upper"/>
                  </Otherwise>
                </Choose>
                <Execute Statement="ForwardVoltageUpperBound:= LocValue"/>
              </When>
              <Otherwise>
                <Execute Statement="ForwardVoltageVT:= TValueType.Error"/>
                <Execute Statement="ErrorForwardVoltage:= Value"/>
              </Otherwise>
            </Choose>
          </On>
          <!-->->-->
          <Otherwise>
            <Execute Statement="inherited HandleField(CustomField, Name, Value, Clear)"/>
          </Otherwise>
        </Case>
      </Block>
    </Procedure>


    <Procedure Identifier="TDiodeSpec.GetSpecificationValues">
      <Parameters>
        <Parameter Identifier="FormatType" Type="TSpecFormatType"/>
        <Parameter Identifier="Value" Type="string" Direction="Output"/>
        <Parameter Identifier="ReverseVoltageRating" Type="string" Direction="Output"/>
        <Parameter Identifier="CurrentRating" Type="string" Direction="Output"/>
        <Parameter Identifier="ForwardVoltage" Type="string" Direction="Output"/>
        <Parameter Identifier="Footprint" Type="string" Direction="Output"/>
        <Parameter Identifier="PartNumberModel" Type="string" Direction="Output"/>
        <Parameter Identifier="InternalPartNumber" Type="string" Direction="Output"/>
        <Parameter Identifier="ComponentKind" Type="string" Direction="Output"/>
      </Parameters>
      <Block>
        <Variable Identifier="UnitPostFix" Type="TUnitPostFix" Init="TUnitPostFix.Compact"/>
        <Execute Statement="UnitPostFix:= TUnitPostFix.Separated" Condition="FormatType = TSpecFormatType.Name"/>
        <Variable Identifier="Range" Type="string"/>
        <!--<-<TComponentSpec.GetSpecificationValues-->
        <Case Expression="ReverseVoltageRatingVT">
          <On Select="TValueType.Unspecified, TValueType.Cleared, TValueType.ClearedByTemplate">
            <Execute Statement="ReverseVoltageRating:= ''"/>
          </On>
          <On Select="TValueType.Specified, TValueType.SpecifiedByTemplate">
            <Execute Statement="ReverseVoltageRating:= EDecimalQuantityToStr(Self.ReverseVoltageRating, UnitPostFix)"/>
          </On>
          <On Select="TValueType.SpecifiedEx, TValueType.SpecifiedExByTemplate">
            <Case Expression="ReverseVoltageRatingBounds">
              <On Select="TBoundType.Lower">
                <Execute Statement="ReverseVoltageRating:= EDecimalQuantityToStr(Self.ReverseVoltageRating, UnitPostFix) + #$2026"/>
              </On>
              <On Select="TBoundType.Upper">
                <Execute Statement="ReverseVoltageRating:= #$2026 + EDecimalQuantityToStr(Self.ReverseVoltageRatingUpperBound, UnitPostFix)"/>
              </On>
              <On Select="TBoundType.Range">
                <Execute Statement="ReverseVoltageRating:= EDecimalQuantityToStr(Self.ReverseVoltageRating, UnitPostFix) + #$2026 + EDecimalQuantityToStr(Self.ReverseVoltageRatingUpperBound, UnitPostFix)"/>
              </On>
            </Case>
          </On>
          <On Select="TValueType.Error, TValueType.ErrorByTemplate">
            <Execute Statement="ReverseVoltageRating:= '!' + ErrorReverseVoltageRating + '!'"/>
          </On>
        </Case>
        <Case Expression="CurrentRatingVT">
          <On Select="TValueType.Unspecified, TValueType.Cleared, TValueType.ClearedByTemplate">
            <Execute Statement="CurrentRating:= ''"/>
          </On>
          <On Select="TValueType.Specified, TValueType.SpecifiedByTemplate">
            <Execute Statement="CurrentRating:= EDecimalQuantityToStr(Self.CurrentRating, UnitPostFix)"/>
          </On>
          <On Select="TValueType.SpecifiedEx, TValueType.SpecifiedExByTemplate">
            <Case Expression="CurrentRatingBounds">
              <On Select="TBoundType.Lower">
                <Execute Statement="CurrentRating:= EDecimalQuantityToStr(Self.CurrentRating, UnitPostFix) + #$2026"/>
              </On>
              <On Select="TBoundType.Upper">
                <Execute Statement="CurrentRating:= #$2026 + EDecimalQuantityToStr(Self.CurrentRatingUpperBound, UnitPostFix)"/>
              </On>
              <On Select="TBoundType.Range">
                <Execute Statement="CurrentRating:= EDecimalQuantityToStr(Self.CurrentRating, UnitPostFix) + #$2026 + EDecimalQuantityToStr(Self.CurrentRatingUpperBound, UnitPostFix)"/>
              </On>
            </Case>
          </On>
          <On Select="TValueType.Error, TValueType.ErrorByTemplate">
            <Execute Statement="CurrentRating:= '!' + ErrorCurrentRating + '!'"/>
          </On>
        </Case>
        <Case Expression="ForwardVoltageVT">
          <On Select="TValueType.Unspecified, TValueType.Cleared, TValueType.ClearedByTemplate">
            <Execute Statement="ForwardVoltage:= ''"/>
          </On>
          <On Select="TValueType.Specified, TValueType.SpecifiedByTemplate">
            <Execute Statement="ForwardVoltage:= EDecimalQuantityToStr(Self.ForwardVoltage, UnitPostFix)"/>
          </On>
          <On Select="TValueType.SpecifiedEx, TValueType.SpecifiedExByTemplate">
            <Case Expression="ForwardVoltageBounds">
              <On Select="TBoundType.Lower">
                <Execute Statement="ForwardVoltage:= EDecimalQuantityToStr(Self.ForwardVoltage, UnitPostFix) + #$2026"/>
              </On>
              <On Select="TBoundType.Upper">
                <Execute Statement="ForwardVoltage:= #$2026 + EDecimalQuantityToStr(Self.ForwardVoltageUpperBound, UnitPostFix)"/>
              </On>
              <On Select="TBoundType.Range">
                <Execute Statement="ForwardVoltage:= EDecimalQuantityToStr(Self.ForwardVoltage, UnitPostFix) + #$2026 + EDecimalQuantityToStr(Self.ForwardVoltageUpperBound, UnitPostFix)"/>
              </On>
            </Case>
          </On>
          <On Select="TValueType.Error, TValueType.ErrorByTemplate">
            <Execute Statement="ForwardVoltage:= '!' + ErrorForwardVoltage + '!'"/>
          </On>
        </Case>
        <!-->->-->
        <Execute Statement="inherited GetSpecificationValues(FormatType, Value, Footprint, PartNumberModel, InternalPartNumber, ComponentKind)"/>
      </Block>
    </Procedure>

    <Function Identifier="TDiodeSpec.SpecificationAsString" VirtualMethod="vmSpecificationAsString" Type="string">
      <Parameters>
        <Parameter Identifier="FormatType" Type="TSpecFormatType"/>
        <Parameter Identifier="ReportContext" Type="TSpecReportContext"/>
      </Parameters>
      <Variables>
        <Variable Identifier="Value" Type="string"/>
        <Variable Identifier="ReverseVoltageRating" Type="string"/>
        <Variable Identifier="CurrentRating" Type="string"/>
        <Variable Identifier="ForwardVoltage" Type="string"/>
        <Variable Identifier="Footprint" Type="string"/>
        <Variable Identifier="PartNumberModel" Type="string"/>
        <Variable Identifier="InternalPartNumber" Type="string"/>
        <Variable Identifier="ComponentKind" Type="string"/>
      </Variables>
      <Block>
        <Execute Statement="GetSpecificationValues(FormatType, Value, ReverseVoltageRating, CurrentRating, ForwardVoltage, Footprint, PartNumberModel, InternalPartNumber, ComponentKind)"/>
        <Case Expression="FormatType" Optimalisation="integermapping">
          <On Select="TSpecFormatType.Fixed">
            <Variable Identifier="ColumnManager" Type="TTextColumnManager" Init="ReportContext.ColumnManager"/>
            <Variable Identifier="ColumnOffset" Type="Integer" Init="ReportContext.ColumnOffset"/>
            <Execute Statement="Value:= Value + ' '" Condition="IsNonEmptyString(Value)"/>
            <Execute Statement="ReverseVoltageRating:= ReverseVoltageRating + ' '" Condition="IsNonEmptyString(ReverseVoltageRating)"/>
            <Execute Statement="CurrentRating:= CurrentRating + ' '" Condition="IsNonEmptyString(CurrentRating)"/>
            <Execute Statement="ForwardVoltage:= ForwardVoltage + ' '" Condition="IsNonEmptyString(ForwardVoltage)"/>
            <Execute Statement="Footprint:= Footprint + ' '" Condition="IsNonEmptyString(Footprint)"/>
            <Execute Statement="PartNumberModel:= PartNumberModel + ' '" Condition="IsNonEmptyString(PartNumberModel)"/>
            <Execute Statement="InternalPartNumber:= InternalPartNumber + ' '" Condition="IsNonEmptyString(InternalPartNumber)"/>
            <Choose>
              <When Expression="ReportContext.Measure">
                <Execute Statement="ColumnManager.RequestColumnWidth(ColumnOffset + TDiodeSpecColumns.Value, 2, Length(Value))"/>
                <Execute Statement="ColumnManager.RequestColumnWidth(ColumnOffset + TDiodeSpecColumns.ReverseVoltageRating, 1, Length(ReverseVoltageRating))"/>
                <Execute Statement="ColumnManager.RequestColumnWidth(ColumnOffset + TDiodeSpecColumns.SpanB2, 1, 0)"/>
                <Execute Statement="ColumnManager.RequestColumnWidth(ColumnOffset + TDiodeSpecColumns.CurrentRating, 1, Length(CurrentRating))"/>
                <Execute Statement="ColumnManager.RequestColumnWidth(ColumnOffset + TDiodeSpecColumns.ForwardVoltage, 1, Length(ForwardVoltage))"/>
                <Execute Statement="ColumnManager.RequestColumnWidth(ColumnOffset + TDiodeSpecColumns.FootPrint, 1, Length(Footprint))"/>
                <Execute Statement="ColumnManager.RequestColumnWidth(ColumnOffset + TDiodeSpecColumns.PartNumberModel, 1, Length(PartNumberModel))"/>
                <Execute Statement="ColumnManager.RequestColumnWidth(ColumnOffset + TDiodeSpecColumns.InternalPartNumber, 1, Length(InternalPartNumber))"/>
                <Execute Statement="Result:= ''"/>
              </When>
              <Otherwise>
                <Execute Statement="Result:= Format('%-*s%*s%*s%*s%*s%-*s%-*s%-*s',
                         ColumnManager.GetColumnWidth(ColumnOffset + TDiodeSpecColumns.Value, 2), Value,
                         ColumnManager.GetColumnWidth(ColumnOffset + TDiodeSpecColumns.ReverseVoltageRating, 1), ReverseVoltageRating,
                         ColumnManager.GetColumnWidth(ColumnOffset + TDiodeSpecColumns.SpanB2, 1), '',
                         ColumnManager.GetColumnWidth(ColumnOffset + TDiodeSpecColumns.CurrentRating, 1), CurrentRating,
                         ColumnManager.GetColumnWidth(ColumnOffset + TDiodeSpecColumns.ForwardVoltage, 1), ForwardVoltage,
                         ColumnManager.GetColumnWidth(ColumnOffset + TDiodeSpecColumns.FootPrint, 1), Footprint,
                         ColumnManager.GetColumnWidth(ColumnOffset + TDiodeSpecColumns.PartNumberModel, 1), PartNumberModel,
                         ColumnManager.GetColumnWidth(ColumnOffset + TDiodeSpecColumns.InternalPartNumber, 1), InternalPartNumber)"/>
              </Otherwise>
            </Choose>
          </On>
          <On Select="TSpecFormatType.Description">
            <Execute Statement="Result:= ConcatExt(' ', True, Value, ReverseVoltageRating, CurrentRating, ForwardVoltage, PartNumberModel, InternalPartNumber, ComponentKind)"/>
          </On>
          <On Select="TSpecFormatType.Name">
            <Execute Statement="Result:= Value"/>
          </On>
        </Case>
      </Block>
    </Function>

    <Procedure Identifier="TDiodeSpec.ApplyTemplate" VirtualMethod="vmApplyTemplate">
      <Variables>
        <Variable Identifier="locTemplate" Type="TDiodeSpec"/>
      </Variables>
      <Block>
        <Exit Condition="not Assigned(Template)"/>
        <ConditionalBlock Expression="Template is TDiodeSpec">
          <Execute Statement="locTemplate:= TDiodeSpec(Template)"/>
          <!--<-<TComponentSpec.ApplyTemplate-->
          <Case Expression="ReverseVoltageRatingVT">
            <On Select="TValueType.Unspecified, TValueType.ClearedByTemplate, TValueType.SpecifiedByTemplate, TValueType.ErrorByTemplate">
              <Case Expression="locTemplate.ReverseVoltageRatingVT">
                <On Select="TValueType.Specified, TValueType.SpecifiedByTemplate">
                  <Execute Statement="ReverseVoltageRating:= locTemplate.ReverseVoltageRating"/>
                  <Execute Statement="ReverseVoltageRatingVT:= TValueType.SpecifiedByTemplate"/>
                </On>
                <On Select="TValueType.SpecifiedEx, TValueType.SpecifiedExByTemplate">
                  <Execute Statement="ReverseVoltageRating:= locTemplate.ReverseVoltageRating" Condition="InFlags(locTemplate.ReverseVoltageRatingBounds, cValidLowerFlags)"/>
                  <Execute Statement="ReverseVoltageRatingUpperBound:= locTemplate.ReverseVoltageRatingUpperBound" Condition="InFlags(locTemplate.ReverseVoltageRatingBounds, cValidUpperFlags)"/>
                  <Execute Statement="ReverseVoltageRatingBounds:= locTemplate.ReverseVoltageRatingBounds"/>
                  <Execute Statement="ReverseVoltageRatingVT:= TValueType.SpecifiedExByTemplate"/>
                </On>
                <On Select="TValueType.Error, TValueType.ErrorByTemplate">
                  <Execute Statement="ErrorReverseVoltageRating:= locTemplate.ErrorReverseVoltageRating"/>
                  <Execute Statement="ReverseVoltageRatingVT:= TValueType.ErrorByTemplate"/>
                </On>
              </Case>
            </On>
          </Case>
          <Case Expression="CurrentRatingVT">
            <On Select="TValueType.Unspecified, TValueType.ClearedByTemplate, TValueType.SpecifiedByTemplate, TValueType.ErrorByTemplate">
              <Case Expression="locTemplate.CurrentRatingVT">
                <On Select="TValueType.Specified, TValueType.SpecifiedByTemplate">
                  <Execute Statement="CurrentRating:= locTemplate.CurrentRating"/>
                  <Execute Statement="CurrentRatingVT:= TValueType.SpecifiedByTemplate"/>
                </On>
                <On Select="TValueType.SpecifiedEx, TValueType.SpecifiedExByTemplate">
                  <Execute Statement="CurrentRating:= locTemplate.CurrentRating" Condition="InFlags(locTemplate.CurrentRatingBounds, cValidLowerFlags)"/>
                  <Execute Statement="CurrentRatingUpperBound:= locTemplate.CurrentRatingUpperBound" Condition="InFlags(locTemplate.CurrentRatingBounds, cValidUpperFlags)"/>
                  <Execute Statement="CurrentRatingBounds:= locTemplate.CurrentRatingBounds"/>
                  <Execute Statement="CurrentRatingVT:= TValueType.SpecifiedExByTemplate"/>
                </On>
                <On Select="TValueType.Error, TValueType.ErrorByTemplate">
                  <Execute Statement="ErrorCurrentRating:= locTemplate.ErrorCurrentRating"/>
                  <Execute Statement="CurrentRatingVT:= TValueType.ErrorByTemplate"/>
                </On>
              </Case>
            </On>
          </Case>
          <Case Expression="ForwardVoltageVT">
            <On Select="TValueType.Unspecified, TValueType.ClearedByTemplate, TValueType.SpecifiedByTemplate, TValueType.ErrorByTemplate">
              <Case Expression="locTemplate.ForwardVoltageVT">
                <On Select="TValueType.Specified, TValueType.SpecifiedByTemplate">
                  <Execute Statement="ForwardVoltage:= locTemplate.ForwardVoltage"/>
                  <Execute Statement="ForwardVoltageVT:= TValueType.SpecifiedByTemplate"/>
                </On>
                <On Select="TValueType.SpecifiedEx, TValueType.SpecifiedExByTemplate">
                  <Execute Statement="ForwardVoltage:= locTemplate.ForwardVoltage" Condition="InFlags(locTemplate.ForwardVoltageBounds, cValidLowerFlags)"/>
                  <Execute Statement="ForwardVoltageUpperBound:= locTemplate.ForwardVoltageUpperBound" Condition="InFlags(locTemplate.ForwardVoltageBounds, cValidUpperFlags)"/>
                  <Execute Statement="ForwardVoltageBounds:= locTemplate.ForwardVoltageBounds"/>
                  <Execute Statement="ForwardVoltageVT:= TValueType.SpecifiedExByTemplate"/>
                </On>
                <On Select="TValueType.Error, TValueType.ErrorByTemplate">
                  <Execute Statement="ErrorForwardVoltage:= locTemplate.ErrorForwardVoltage"/>
                  <Execute Statement="ForwardVoltageVT:= TValueType.ErrorByTemplate"/>
                </On>
              </Case>
            </On>
          </Case>
          <!-->->-->
        </ConditionalBlock>
        <Execute Statement="inherited ApplyTemplate"/>
      </Block>
    </Procedure>

    <Constructor Identifier="TDiodeCategory.Create">
      <Block>
      </Block>
    </Constructor>

    <Function Identifier="TDiodeCategory.IndexSearchSpecifications" VirtualMethod="vmIndexSearchSpecifications" Type="Boolean">
      <Parameters>
        <Parameter Identifier="ComponentSpec" Type="TComponentSpec"/>
        <Parameter Identifier="Specifications" Type="TSpecificationLink" Direction="Output"/>
      </Parameters>
      <Block>
        <Execute Statement="Result:= False"/>
      </Block>
    </Function>

    <Procedure Identifier="TDiodeCategory.LoadTemplatesFromIniFile" VirtualMethod="vmLoadTemplatesFromIniFile">
      <Parameters>
        <Parameter Identifier="Ini" Type="TScienceIniHelper"/>
      </Parameters>
      <Constants>
        <Constant Identifier="sSectionDiodeTHT" Type="string" Expression="'Template.Diode.THT'"/>
      </Constants>
      <Block>
        <ConditionalBlock Expression="Ini.Inifile.SectionExists(sSectionDiodeTHT)">
          <Execute Statement="TemplateTHT:= TDiodeSpec.Create"/>
          <Execute Statement="TemplateTHT.LoadFromIniFileSection(Ini, sSectionDiodeTHT)"/>
        </ConditionalBlock>
      </Block>
    </Procedure>

    <Function Identifier="TDiodeCategory.CreateSpecification" VirtualMethod="vmCreateSpecification" Type="TComponentSpec">
      <Block>
        <Execute Statement="Result:= TDiodeSpec.Create"/>
      </Block>
    </Function>

    <Function Identifier="TDiodeCategory.IsValidSpecification" VirtualMethod="vmIsValidSpecification" Type="Boolean">
      <Parameters>
        <Parameter Identifier="Specification" Type="TComponentSpec"/>
      </Parameters>
      <Block>
        <Case Expression="Specification.ComponentKindVT">
          <On Select="TValueType.Specified, TValueType.SpecifiedByTemplate"/>
          <Otherwise>
            <Exit Result="False"/>
          </Otherwise>
        </Case>
        <Case Expression="Specification.ComponentKind">
          <On Select="TComponentKind.Diode, TComponentKind.SchottkyDiode"/>
          <Otherwise>
            <Exit Result="False"/>
          </Otherwise>
        </Case>
        <Execute Statement="Result:= True"/>
      </Block>
    </Function>

    <Function Identifier="TDiodeCategory.GetTemplate" VirtualMethod="vmGetTemplate" Type="TComponentSpec">
      <Parameters>
        <Parameter Identifier="Specification" Type="TComponentSpec"/>
      </Parameters>
      <Block>
        <Execute Statement="Result:= ObjNil"/>
        <Case Expression="Specification.ComponentKind">
          <On Select="TComponentKind.Diode">
            <Execute Statement="Result:= TemplateTHT"/>
          </On>
        </Case>
      </Block>
    </Function>

    <Function Identifier="TDiodeCategory.CompareSpecifications" Type="Integer" VirtualMethod="vmCompareSpecifications">
      <Parameters>
        <Parameter Identifier="A" Type="TDiodeSpec"/>
        <Parameter Identifier="B" Type="TDiodeSpec"/>
      </Parameters>
      <Block>
        <Execute Statement="Result:= A.ComponentKind - B.ComponentKind"/>
        <Exit Condition="Result &lt;&gt; 0"/>
        <!--<-<TComponentSpec.CompareSpecifications-->
        <Execute Statement="Result:= CompareStateValueRange(A.ID, A.ReverseVoltageRatingVT, A.ReverseVoltageRating, A.ReverseVoltageRatingUpperBound, A.ReverseVoltageRatingBounds, B.ID, B.ReverseVoltageRatingVT, B.ReverseVoltageRating, B.ReverseVoltageRatingUpperBound, B.ReverseVoltageRatingBounds)"/>
        <Exit Condition="Result &lt;&gt; 0"/>
        <Execute Statement="Result:= CompareStateValueRange(A.ID, A.CurrentRatingVT, A.CurrentRating, A.CurrentRatingUpperBound, A.CurrentRatingBounds, B.ID, B.CurrentRatingVT, B.CurrentRating, B.CurrentRatingUpperBound, B.CurrentRatingBounds)"/>
        <Exit Condition="Result &lt;&gt; 0"/>
        <Execute Statement="Result:= CompareStateValueRange(A.ID, A.ForwardVoltageVT, A.ForwardVoltage, A.ForwardVoltageUpperBound, A.ForwardVoltageBounds, B.ID, B.ForwardVoltageVT, B.ForwardVoltage, B.ForwardVoltageUpperBound, B.ForwardVoltageBounds)"/>
        <Exit Condition="Result &lt;&gt; 0"/>
        <!-->->-->
        <Execute Statement="Result:= inherited CompareSpecifications(A, B)"/>
      </Block>
    </Function>

    <Function Identifier="TDiodeCategory.CanExtractTemplateFromIniFile" VirtualMethod="vmCanExtractTemplateFromIniFile" Type="Boolean">
      <Parameters>
        <Parameter Identifier="Ini" Type="TScienceIniHelper"/>
        <Parameter Identifier="ComponentSpec" Type="TComponentSpec" Direction="Output"/>
      </Parameters>
      <Constants>
        <Constant Identifier="cDiode" Type="string" Expression="'Diode'"/>
      </Constants>
      <Block>
        <Execute Statement="Result:= Ini.Inifile.SectionExists(cDiode)"/>
        <Block Condition="Result">
          <Execute Statement="ComponentSpec:= TDiodeSpec.Create"/>
          <Execute Statement="ComponentSpec.LoadFromIniFileSection(Ini, cDiode)"/>
        </Block>
      </Block>
    </Function>

  </Procedures>

</pkg:Library>