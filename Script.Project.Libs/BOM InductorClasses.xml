<?xml version="1.0" encoding="utf-8" standalone="no"?>
<pkg:Library
  xsi:schemaLocation="urn:schemas-www-wisware.nl-scriptingpackages ../XmlSchemas.Common.XmlScript/XMLScripting.Packages.xsd"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="urn:schemas-www-wisware.nl-xmlscripting"
  xmlns:ado="urn:schemas-www-wisware.nl-xmlscripting-ado"
  xmlns:fil="urn:schemas-www-wisware.nl-xmlscripting-filemanagement"
  xmlns:fwl="urn:schemas-www-wisware.nl-xmlscripting-windowsfirewall"
  xmlns:inx="urn:schemas-www-wisware.nl-xmlscripting-index"
  xmlns:lil="urn:schemas-www-wisware.nl-xmlscripting-linkedlist"
  xmlns:msx="urn:schemas-www-wisware.nl-xmlscripting-xml"
  xmlns:pkg="urn:schemas-www-wisware.nl-scriptingpackages"
  xmlns:reg="urn:schemas-www-wisware.nl-xmlscripting-registry"
  xmlns:rep="urn:schemas-www-wisware.nl-xmlscripting-report"
  xmlns:sts="urn:schemas-www-wisware.nl-xmlscripting-showstatus"
  xmlns:sys="urn:schemas-www-wisware.nl-xmlscripting"
  xmlns:syu="urn:schemas-www-wisware.nl-xmlscripting-sysutils"
  >
  <Uses>
    <Use Identifier="ElectronicUtils"/>
    <Use Identifier="BomClasses"/>
    <Use Identifier="BomStrings"/>
  </Uses>
  <Type>
    <DataClass Identifier="TInductorSpec" Inherit="TComponentSpec" DefaultConstructor="createonly">
      <VirtualMethod Identifier="vmHandleField" Override="true"/>
      <VirtualMethod Identifier="vmCheckComponentKind" Override="true"/>
      <VirtualMethod Identifier="vmSpecificationAsString" Override="true"/>
      <VirtualMethod Identifier="vmApplyTemplate" Override="true"/>
      <VirtualMethod Identifier="vmDoesMatchSpecification" Override="true"/>
      <VirtualMethod Identifier="vmCategoryMatchScore" Override="true"/>
      <!--<-<TComponentSpec.Fields-->
      <Field Identifier="InductanceVT" Type="TValueType"/>
      <Field Identifier="Inductance" Type="Int64"/>
      <Field Identifier="ErrorInductance" Type="string"/>
      <Field Identifier="InductanceMinVT" Type="TValueType"/>
      <Field Identifier="InductanceMin" Type="Int64"/>
      <Field Identifier="ErrorInductanceMin" Type="string"/>
      <Field Identifier="InductanceMaxVT" Type="TValueType"/>
      <Field Identifier="InductanceMax" Type="Int64"/>
      <Field Identifier="ErrorInductanceMax" Type="string"/>
      <Field Identifier="AmperageRatingVT" Type="TValueType"/>
      <Field Identifier="AmperageRating" Type="Int64"/>
      <Field Identifier="ErrorAmperageRating" Type="string"/>
      <Field Identifier="AmperageRatingMinVT" Type="TValueType"/>
      <Field Identifier="AmperageRatingMin" Type="Int64"/>
      <Field Identifier="ErrorAmperageRatingMin" Type="string"/>
      <Field Identifier="AmperageRatingMaxVT" Type="TValueType"/>
      <Field Identifier="AmperageRatingMax" Type="Int64"/>
      <Field Identifier="ErrorAmperageRatingMax" Type="string"/>
      <Field Identifier="ToleranceVT" Type="TValueType"/>
      <Field Identifier="Tolerance" Type="Int64"/>
      <Field Identifier="ErrorTolerance" Type="string"/>
      <Field Identifier="ToleranceMinVT" Type="TValueType"/>
      <Field Identifier="ToleranceMin" Type="Int64"/>
      <Field Identifier="ErrorToleranceMin" Type="string"/>
      <Field Identifier="ToleranceMaxVT" Type="TValueType"/>
      <Field Identifier="ToleranceMax" Type="Int64"/>
      <Field Identifier="ErrorToleranceMax" Type="string"/>
<!-->->-->
    </DataClass>

    <DataClass Identifier="TInductanceSpecificationIndex" Inherit="TSpecificationIndex" DefaultConstructor="createandsetfields">
      <VirtualMethod Identifier="vmGetKey" Override="true"/>
    </DataClass>

    <DataClass Identifier="TInductorCategory" Inherit="TComponentCategory">
      <VirtualMethod Identifier="vmCreateSpecification" Override="true"/>
      <VirtualMethod Identifier="vmIsValidSpecification" Override="true"/>
      <VirtualMethod Identifier="vmIndexSearchSpecifications" Override="true"/>
      <VirtualMethod Identifier="vmCompareSpecifications" Override="true"/>
      <VirtualMethod Identifier="vmLoadTemplatesFromIniFile" Override="true"/>
      <VirtualMethod Identifier="vmGetTemplate" Override="true"/>
      <VirtualMethod Identifier="vmCanExtractTemplateFromIniFile" Override="true"/>
      <Field Identifier="InductanceSpecificationIndex" Type="TInductanceSpecificationIndex"/>
      <Field Identifier="TemplateInductorTHT" Type="TInductorSpec"/>
    </DataClass>
  </Type>

  <Variables>
    <Variable Identifier="InductorTechnologyIndex" Type="TMappingCaseInSensitiveUnicodeStringToInt64" Init="TMappingCaseInSensitiveUnicodeStringToInt64.Create"/>
    <Variable Identifier="InductorInductanceConv" Type="TUnitConvertor" Init="GetUnitConvertor(TConvertorKind.FemtoHenry)"/>
    <Variable Identifier="InductorAmperageRatingConv" Type="TUnitConvertor" Init="GetUnitConvertor(TConvertorKind.PicoAmp)"/>
    <Variable Identifier="InductorToleranceConv" Type="TUnitConvertor" Init="GetUnitConvertor(TConvertorKind.MicroPerc)"/>
  </Variables>

  <Procedures>
    <Function Identifier="TInductorSpec.CheckComponentKind" VirtualMethod="vmCheckComponentKind" Type="Boolean">
      <Parameters>
        <Parameter Identifier="ComponentKind" Type="TComponentKind"/>
      </Parameters>
      <Block>
        <Execute Statement="Result:= False"/>
        <Case Expression="ComponentKind" Optimalisation="integermapping">
          <On Select="TComponentKind.Inductor">
            <Execute Statement="Result:= True"/>
          </On>
        </Case>
      </Block>
    </Function>

    <Function Identifier="TInductorSpec.DoesMatchSpecification" VirtualMethod="vmDoesMatchSpecification" Type="Boolean">
      <Parameters>
        <Parameter Identifier="ComponentSpec" Type="TComponentSpec"/>
      </Parameters>
      <Block>
        <Execute Statement="Result:= False"/>
        <Exit Condition="not inherited DoesMatchSpecification(ComponentSpec)"/>
        <Variable Identifier="IsRanged" Type="Boolean"/>
        <!--<-<TComponentSpec.DoesMatchSpecification-->
        <Execute Statement="IsRanged:= False"/>
        <Case Expression="InductanceMinVT">
          <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
            <Exit Condition="not (ComponentSpec is TInductorSpec)"/>
            <Case Expression="TInductorSpec(ComponentSpec).InductanceVT">
              <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
                <Exit Condition="InductanceMin &gt; TInductorSpec(ComponentSpec).Inductance"/>
                <Execute Statement="IsRanged:= True"/>
              </On>
               <On Select="TValueType.Error, TValueType.ErrorByTemplate">
                 <Exit/>
               </On>
            </Case>
          </On>
          <On Select="TValueType.Error, TValueType.ErrorByTemplate">
            <Exit/>
          </On>
        </Case>
        <Case Expression="InductanceMaxVT">
          <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
            <Exit Condition="not (ComponentSpec is TInductorSpec)"/>
            <Case Expression="TInductorSpec(ComponentSpec).InductanceVT">
              <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
                <Exit Condition="InductanceMax &lt; TInductorSpec(ComponentSpec).Inductance"/>
                <Execute Statement="IsRanged:= True"/>
              </On>
               <On Select="TValueType.Error, TValueType.ErrorByTemplate">
                 <Exit/>
               </On>
            </Case>
          </On>
          <On Select="TValueType.Error, TValueType.ErrorByTemplate">
            <Exit/>
          </On>
        </Case>
        <Block Condition="not IsRanged">
          <Case Expression="InductanceVT">
            <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
              <Exit Condition="not (ComponentSpec is TInductorSpec)"/>
              <Case Expression="TInductorSpec(ComponentSpec).InductanceVT">
                <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
                  <Exit Condition="Inductance &lt;&gt; TInductorSpec(ComponentSpec).Inductance"/>
                </On>
                 <On Select="TValueType.Error, TValueType.ErrorByTemplate">
                   <Exit/>
                 </On>
              </Case>
            </On>
            <On Select="TValueType.Error, TValueType.ErrorByTemplate">
              <Exit/>
            </On>
          </Case>
        </Block>
        <Execute Statement="IsRanged:= False"/>
        <Case Expression="AmperageRatingMinVT">
          <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
            <Exit Condition="not (ComponentSpec is TInductorSpec)"/>
            <Case Expression="TInductorSpec(ComponentSpec).AmperageRatingVT">
              <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
                <Exit Condition="AmperageRatingMin &gt; TInductorSpec(ComponentSpec).AmperageRating"/>
                <Execute Statement="IsRanged:= True"/>
              </On>
               <On Select="TValueType.Error, TValueType.ErrorByTemplate">
                 <Exit/>
               </On>
            </Case>
          </On>
          <On Select="TValueType.Error, TValueType.ErrorByTemplate">
            <Exit/>
          </On>
        </Case>
        <Case Expression="AmperageRatingMaxVT">
          <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
            <Exit Condition="not (ComponentSpec is TInductorSpec)"/>
            <Case Expression="TInductorSpec(ComponentSpec).AmperageRatingVT">
              <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
                <Exit Condition="AmperageRatingMax &lt; TInductorSpec(ComponentSpec).AmperageRating"/>
                <Execute Statement="IsRanged:= True"/>
              </On>
               <On Select="TValueType.Error, TValueType.ErrorByTemplate">
                 <Exit/>
               </On>
            </Case>
          </On>
          <On Select="TValueType.Error, TValueType.ErrorByTemplate">
            <Exit/>
          </On>
        </Case>
        <Block Condition="not IsRanged">
          <Case Expression="AmperageRatingVT">
            <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
              <Exit Condition="not (ComponentSpec is TInductorSpec)"/>
              <Case Expression="TInductorSpec(ComponentSpec).AmperageRatingVT">
                <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
                  <Exit Condition="AmperageRating &lt;&gt; TInductorSpec(ComponentSpec).AmperageRating"/>
                </On>
                 <On Select="TValueType.Error, TValueType.ErrorByTemplate">
                   <Exit/>
                 </On>
              </Case>
            </On>
            <On Select="TValueType.Error, TValueType.ErrorByTemplate">
              <Exit/>
            </On>
          </Case>
        </Block>
        <Execute Statement="IsRanged:= False"/>
        <Case Expression="ToleranceMinVT">
          <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
            <Exit Condition="not (ComponentSpec is TInductorSpec)"/>
            <Case Expression="TInductorSpec(ComponentSpec).ToleranceVT">
              <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
                <Exit Condition="ToleranceMin &gt; TInductorSpec(ComponentSpec).Tolerance"/>
                <Execute Statement="IsRanged:= True"/>
              </On>
               <On Select="TValueType.Error, TValueType.ErrorByTemplate">
                 <Exit/>
               </On>
            </Case>
          </On>
          <On Select="TValueType.Error, TValueType.ErrorByTemplate">
            <Exit/>
          </On>
        </Case>
        <Case Expression="ToleranceMaxVT">
          <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
            <Exit Condition="not (ComponentSpec is TInductorSpec)"/>
            <Case Expression="TInductorSpec(ComponentSpec).ToleranceVT">
              <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
                <Exit Condition="ToleranceMax &lt; TInductorSpec(ComponentSpec).Tolerance"/>
                <Execute Statement="IsRanged:= True"/>
              </On>
               <On Select="TValueType.Error, TValueType.ErrorByTemplate">
                 <Exit/>
               </On>
            </Case>
          </On>
          <On Select="TValueType.Error, TValueType.ErrorByTemplate">
            <Exit/>
          </On>
        </Case>
        <Block Condition="not IsRanged">
          <Case Expression="ToleranceVT">
            <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
              <Exit Condition="not (ComponentSpec is TInductorSpec)"/>
              <Case Expression="TInductorSpec(ComponentSpec).ToleranceVT">
                <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
                  <Exit Condition="Tolerance &lt;&gt; TInductorSpec(ComponentSpec).Tolerance"/>
                </On>
                 <On Select="TValueType.Error, TValueType.ErrorByTemplate">
                   <Exit/>
                 </On>
              </Case>
            </On>
            <On Select="TValueType.Error, TValueType.ErrorByTemplate">
              <Exit/>
            </On>
          </Case>
        </Block>
<!-->->-->
        <Execute Statement="Result:= True"/>
      </Block>
    </Function>

    <Function Identifier="TInductorSpec.CategoryMatchScore" VirtualMethod="vmCategoryMatchScore" Type="Int64">
      <Parameters>
        <Parameter Identifier="ComponentSpec" Type="TComponentSpec"/>
      </Parameters>
      <Block>
        <Execute Statement="Result:= 0"/>

        <Exit Condition="not (ComponentSpec is TInductorSpec)"/>

        <Case Expression="ComponentKindVT">
          <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
            <Case Expression="ComponentSpec.ComponentKindVT">
              <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
                <Exit Condition="ComponentKind &lt;&gt; ComponentSpec.ComponentKind" Result="0"/>
                <Execute Statement="Result:= Result + 1"/>
              </On>
              <On Select="TValueType.Error, TValueType.ErrorByTemplate">
                <Exit Result="0"/>
              </On>
            </Case>
          </On>
          <On Select="TValueType.Error, TValueType.ErrorByTemplate">
            <Exit Result="0"/>
          </On>
        </Case>

        <Execute Statement="Result:= Result shl 1"/>
        <Case Expression="InductanceVT">
          <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
            <Case Expression="TInductorSpec(ComponentSpec).InductanceVT">
              <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
                <Exit Condition="Inductance &lt;&gt; TInductorSpec(ComponentSpec).Inductance" Result="0"/>
                <Execute Statement="Result:= Result + 1"/>
              </On>
              <On Select="TValueType.Error, TValueType.ErrorByTemplate">
                <Exit Result="0"/>
              </On>
            </Case>
          </On>
          <On Select="TValueType.Error, TValueType.ErrorByTemplate">
            <Exit Result="0"/>
          </On>
        </Case>

        <Execute Statement="Result:= Result shl 1"/>
        <Case Expression="AmperageRatingVT">
          <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
            <Case Expression="TInductorSpec(ComponentSpec).AmperageRatingVT">
              <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
                <Exit Condition="AmperageRating &lt;&gt; TInductorSpec(ComponentSpec).AmperageRating" Result="0"/>
                <Execute Statement="Result:= Result + 1"/>
              </On>
              <On Select="TValueType.Error, TValueType.ErrorByTemplate">
                <Exit Result="0"/>
              </On>
            </Case>
          </On>
          <On Select="TValueType.Error, TValueType.ErrorByTemplate">
            <Exit Result="0"/>
          </On>
        </Case>

        <Execute Statement="Result:= Result shl 1"/>
        <Case Expression="FootprintVT">
          <On Select="TFootPrintValueType.SpecifiedByTemplate, TFootPrintValueType.Specified">
            <Case Expression="ComponentSpec.FootprintVT">
              <On Select="TFootPrintValueType.SpecifiedByTemplate, TFootPrintValueType.Specified">
                <Execute Statement="Result:= Result + 1" Condition="Footprint = ComponentSpec.Footprint"/>
              </On>
              <On Select="TFootPrintValueType.MaskSpecifiedByTemplate, TFootPrintValueType.MaskSpecified">
                <Execute Statement="Result:= Result + 1" Condition="ComponentSpec.FootprintMask.Matches(Footprint)"/>
              </On>
              <On Select="TFootPrintValueType.Unspecified, TFootPrintValueType.Cleared, TFootPrintValueType.ClearedByTemplate">
              </On>
              <Otherwise>
                <Exit/>
              </Otherwise>
            </Case>
          </On>
          <On Select="TFootPrintValueType.Error, TFootPrintValueType.ErrorByTemplate">
            <Exit/>
          </On>
        </Case>

        <Execute Statement="Result:= Result shl 1"/>
        <Case Expression="ToleranceVT">
          <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
            <Case Expression="TInductorSpec(ComponentSpec).ToleranceVT">
              <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
                <Exit Condition="Tolerance &lt;&gt; TInductorSpec(ComponentSpec).Tolerance" Result="0"/>
                <Execute Statement="Result:= Result + 1"/>
              </On>
              <On Select="TValueType.Error, TValueType.ErrorByTemplate">
                <Exit Result="0"/>
              </On>
            </Case>
          </On>
          <On Select="TValueType.Error, TValueType.ErrorByTemplate">
            <Exit Result="0"/>
          </On>
        </Case>

        <Execute Statement="Result:= Result shl 1"/>
        <Case Expression="PartNumberVT">
          <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
            <Case Expression="ComponentSpec.PartNumberVT">
              <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
                <Exit Condition="SameText(PartNumber, ComponentSpec.PartNumber)" Result="0"/>
                <Execute Statement="Result:= Result + 1"/>
              </On>
              <On Select="TValueType.Error, TValueType.ErrorByTemplate">
                <Exit Result="0"/>
              </On>
            </Case>
          </On>
          <On Select="TValueType.Error, TValueType.ErrorByTemplate">
            <Exit Result="0"/>
          </On>
        </Case>

        <Execute Statement="Result:= Result shl 1"/>
        <Case Expression="ManufacturerVT">
          <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
            <Case Expression="ComponentSpec.ManufacturerVT">
              <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
                <Exit Condition="not SameText(Manufacturer, ComponentSpec.Manufacturer)" Result="0"/>
                <Execute Statement="Result:= Result + 1"/>
              </On>
              <On Select="TValueType.Error, TValueType.ErrorByTemplate">
                <Exit Result="0"/>
              </On>
            </Case>
          </On>
          <On Select="TValueType.Error, TValueType.ErrorByTemplate">
            <Exit Result="0"/>
          </On>
        </Case>
      </Block>
    </Function>

    <Procedure Identifier="TInductorSpec.HandleField" VirtualMethod="vmHandleField">
      <Parameters>
        <Parameter Identifier="CustomField" Type="TCustomField"/>
        <Parameter Identifier="Name" Type="string"/>
        <Parameter Identifier="Value" Type="string"/>
        <Parameter Identifier="Clear" Type="Boolean"/>
      </Parameters>
      <Variables>
        <Variable Identifier="LocValue" Type="Int64"/>
      </Variables>
      <Block>
        <Case Expression="CustomField" Optimalisation="integermapping">
          <!--<-<TComponentSpec.HandleField-->
          <On Select="TCustomField.Value">
            <Choose>
              <When Expression="Clear">
                <Execute Statement="InductanceVT:= TValueType.Cleared"/>
                <Execute Statement="Inductance:= -1"/>
              </When>
              <When Expression="InductorInductanceConv.StrToIntValue(Value, LocValue)">
                <Execute Statement="InductanceVT:= TValueType.Specified"/>
                <Execute Statement="Inductance:= LocValue"/>
              </When>
              <Otherwise>
                <Execute Statement="InductanceVT:= TValueType.Error"/>
                <Execute Statement="ErrorInductance:= Value"/>
              </Otherwise>
            </Choose>
          </On>
          <On Select="TCustomField.ValueMin">
            <Choose>
              <When Expression="Clear">
                <Execute Statement="InductanceMinVT:= TValueType.Cleared"/>
                <Execute Statement="InductanceMin:= -1"/>
              </When>
              <When Expression="InductorInductanceConv.StrToIntValue(Value, LocValue)">
                <Execute Statement="InductanceMinVT:= TValueType.Specified"/>
                <Execute Statement="InductanceMin:= LocValue"/>
              </When>
              <Otherwise>
                <Execute Statement="InductanceMinVT:= TValueType.Error"/>
                <Execute Statement="ErrorInductanceMin:= Value"/>
              </Otherwise>
            </Choose>
          </On>
          <On Select="TCustomField.ValueMax">
            <Choose>
              <When Expression="Clear">
                <Execute Statement="InductanceMaxVT:= TValueType.Cleared"/>
                <Execute Statement="InductanceMax:= -1"/>
              </When>
              <When Expression="InductorInductanceConv.StrToIntValue(Value, LocValue)">
                <Execute Statement="InductanceMaxVT:= TValueType.Specified"/>
                <Execute Statement="InductanceMax:= LocValue"/>
              </When>
              <Otherwise>
                <Execute Statement="InductanceMaxVT:= TValueType.Error"/>
                <Execute Statement="ErrorInductanceMax:= Value"/>
              </Otherwise>
            </Choose>
          </On>
          <On Select="TCustomField.AmperageRating">
            <Choose>
              <When Expression="Clear">
                <Execute Statement="AmperageRatingVT:= TValueType.Cleared"/>
                <Execute Statement="AmperageRating:= -1"/>
              </When>
              <When Expression="InductorAmperageRatingConv.StrToIntValue(Value, LocValue)">
                <Execute Statement="AmperageRatingVT:= TValueType.Specified"/>
                <Execute Statement="AmperageRating:= LocValue"/>
              </When>
              <Otherwise>
                <Execute Statement="AmperageRatingVT:= TValueType.Error"/>
                <Execute Statement="ErrorAmperageRating:= Value"/>
              </Otherwise>
            </Choose>
          </On>
          <On Select="TCustomField.AmperageRatingMin">
            <Choose>
              <When Expression="Clear">
                <Execute Statement="AmperageRatingMinVT:= TValueType.Cleared"/>
                <Execute Statement="AmperageRatingMin:= -1"/>
              </When>
              <When Expression="InductorAmperageRatingConv.StrToIntValue(Value, LocValue)">
                <Execute Statement="AmperageRatingMinVT:= TValueType.Specified"/>
                <Execute Statement="AmperageRatingMin:= LocValue"/>
              </When>
              <Otherwise>
                <Execute Statement="AmperageRatingMinVT:= TValueType.Error"/>
                <Execute Statement="ErrorAmperageRatingMin:= Value"/>
              </Otherwise>
            </Choose>
          </On>
          <On Select="TCustomField.AmperageRatingMax">
            <Choose>
              <When Expression="Clear">
                <Execute Statement="AmperageRatingMaxVT:= TValueType.Cleared"/>
                <Execute Statement="AmperageRatingMax:= -1"/>
              </When>
              <When Expression="InductorAmperageRatingConv.StrToIntValue(Value, LocValue)">
                <Execute Statement="AmperageRatingMaxVT:= TValueType.Specified"/>
                <Execute Statement="AmperageRatingMax:= LocValue"/>
              </When>
              <Otherwise>
                <Execute Statement="AmperageRatingMaxVT:= TValueType.Error"/>
                <Execute Statement="ErrorAmperageRatingMax:= Value"/>
              </Otherwise>
            </Choose>
          </On>
          <On Select="TCustomField.Tolerance">
            <Choose>
              <When Expression="Clear">
                <Execute Statement="ToleranceVT:= TValueType.Cleared"/>
                <Execute Statement="Tolerance:= -1"/>
              </When>
              <When Expression="InductorToleranceConv.StrToIntValue(Value, LocValue)">
                <Execute Statement="ToleranceVT:= TValueType.Specified"/>
                <Execute Statement="Tolerance:= LocValue"/>
              </When>
              <Otherwise>
                <Execute Statement="ToleranceVT:= TValueType.Error"/>
                <Execute Statement="ErrorTolerance:= Value"/>
              </Otherwise>
            </Choose>
          </On>
          <On Select="TCustomField.ToleranceMin">
            <Choose>
              <When Expression="Clear">
                <Execute Statement="ToleranceMinVT:= TValueType.Cleared"/>
                <Execute Statement="ToleranceMin:= -1"/>
              </When>
              <When Expression="InductorToleranceConv.StrToIntValue(Value, LocValue)">
                <Execute Statement="ToleranceMinVT:= TValueType.Specified"/>
                <Execute Statement="ToleranceMin:= LocValue"/>
              </When>
              <Otherwise>
                <Execute Statement="ToleranceMinVT:= TValueType.Error"/>
                <Execute Statement="ErrorToleranceMin:= Value"/>
              </Otherwise>
            </Choose>
          </On>
          <On Select="TCustomField.ToleranceMax">
            <Choose>
              <When Expression="Clear">
                <Execute Statement="ToleranceMaxVT:= TValueType.Cleared"/>
                <Execute Statement="ToleranceMax:= -1"/>
              </When>
              <When Expression="InductorToleranceConv.StrToIntValue(Value, LocValue)">
                <Execute Statement="ToleranceMaxVT:= TValueType.Specified"/>
                <Execute Statement="ToleranceMax:= LocValue"/>
              </When>
              <Otherwise>
                <Execute Statement="ToleranceMaxVT:= TValueType.Error"/>
                <Execute Statement="ErrorToleranceMax:= Value"/>
              </Otherwise>
            </Choose>
          </On>
<!-->->-->
          <Otherwise>
            <Execute Statement="inherited HandleField(CustomField, Name, Value, Clear)"/>
          </Otherwise>
        </Case>
      </Block>
    </Procedure>

    <Procedure Identifier="TInductorSpec.ApplyTemplate" VirtualMethod="vmApplyTemplate">
      <Variables>
        <Variable Identifier="locTemplate" Type="TInductorSpec"/>
      </Variables>
      <Block>
        <Exit Condition="not Assigned(Template)"/>
        <ConditionalBlock Expression="Template is TInductorSpec">
          <Execute Statement="locTemplate:= TInductorSpec(Template)"/>
          <!--<-<TComponentSpec.ApplyTemplate-->
          <Case Expression="InductanceVT">
            <On Select="TValueType.Unspecified, TValueType.ClearedByTemplate, TValueType.SpecifiedByTemplate, TValueType.ErrorByTemplate">
              <Case Expression="InductanceMinVT">
                <On Select="TValueType.Unspecified, TValueType.ClearedByTemplate, TValueType.SpecifiedByTemplate, TValueType.ErrorByTemplate">
                  <Case Expression="InductanceMaxVT">
                    <On Select="TValueType.Unspecified, TValueType.ClearedByTemplate, TValueType.SpecifiedByTemplate, TValueType.ErrorByTemplate">
                      <Case Expression="locTemplate.InductanceVT">
                        <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
                          <Execute Statement="Inductance:= locTemplate.Inductance"/>
                          <Execute Statement="InductanceVT:= TValueType.SpecifiedByTemplate"/>
                        </On>
                        <On Select="TValueType.Error, TValueType.ErrorByTemplate">
                          <Execute Statement="Inductance:= locTemplate.ErrorInductance"/>
                          <Execute Statement="InductanceVT:= TValueType.ErrorByTemplate"/>
                        </On>
                      </Case>
                      <Case Expression="locTemplate.InductanceMinVT">
                        <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
                          <Execute Statement="InductanceMin:= locTemplate.InductanceMin"/>
                          <Execute Statement="InductanceMinVT:= TValueType.SpecifiedByTemplate"/>
                        </On>
                        <On Select="TValueType.Error, TValueType.ErrorByTemplate">
                          <Execute Statement="InductanceMin:= locTemplate.ErrorInductanceMin"/>
                          <Execute Statement="InductanceMinVT:= TValueType.ErrorByTemplate"/>
                        </On>
                      </Case>
                      <Case Expression="locTemplate.InductanceMaxVT">
                        <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
                          <Execute Statement="InductanceMax:= locTemplate.InductanceMax"/>
                          <Execute Statement="InductanceMaxVT:= TValueType.SpecifiedByTemplate"/>
                        </On>
                        <On Select="TValueType.Error, TValueType.ErrorByTemplate">
                          <Execute Statement="InductanceMax:= locTemplate.ErrorInductanceMax"/>
                          <Execute Statement="InductanceMaxVT:= TValueType.ErrorByTemplate"/>
                        </On>
                      </Case>
                    </On>
                  </Case>
                </On>
              </Case>
            </On>
          </Case>
          <Case Expression="AmperageRatingVT">
            <On Select="TValueType.Unspecified, TValueType.ClearedByTemplate, TValueType.SpecifiedByTemplate, TValueType.ErrorByTemplate">
              <Case Expression="AmperageRatingMinVT">
                <On Select="TValueType.Unspecified, TValueType.ClearedByTemplate, TValueType.SpecifiedByTemplate, TValueType.ErrorByTemplate">
                  <Case Expression="AmperageRatingMaxVT">
                    <On Select="TValueType.Unspecified, TValueType.ClearedByTemplate, TValueType.SpecifiedByTemplate, TValueType.ErrorByTemplate">
                      <Case Expression="locTemplate.AmperageRatingVT">
                        <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
                          <Execute Statement="AmperageRating:= locTemplate.AmperageRating"/>
                          <Execute Statement="AmperageRatingVT:= TValueType.SpecifiedByTemplate"/>
                        </On>
                        <On Select="TValueType.Error, TValueType.ErrorByTemplate">
                          <Execute Statement="AmperageRating:= locTemplate.ErrorAmperageRating"/>
                          <Execute Statement="AmperageRatingVT:= TValueType.ErrorByTemplate"/>
                        </On>
                      </Case>
                      <Case Expression="locTemplate.AmperageRatingMinVT">
                        <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
                          <Execute Statement="AmperageRatingMin:= locTemplate.AmperageRatingMin"/>
                          <Execute Statement="AmperageRatingMinVT:= TValueType.SpecifiedByTemplate"/>
                        </On>
                        <On Select="TValueType.Error, TValueType.ErrorByTemplate">
                          <Execute Statement="AmperageRatingMin:= locTemplate.ErrorAmperageRatingMin"/>
                          <Execute Statement="AmperageRatingMinVT:= TValueType.ErrorByTemplate"/>
                        </On>
                      </Case>
                      <Case Expression="locTemplate.AmperageRatingMaxVT">
                        <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
                          <Execute Statement="AmperageRatingMax:= locTemplate.AmperageRatingMax"/>
                          <Execute Statement="AmperageRatingMaxVT:= TValueType.SpecifiedByTemplate"/>
                        </On>
                        <On Select="TValueType.Error, TValueType.ErrorByTemplate">
                          <Execute Statement="AmperageRatingMax:= locTemplate.ErrorAmperageRatingMax"/>
                          <Execute Statement="AmperageRatingMaxVT:= TValueType.ErrorByTemplate"/>
                        </On>
                      </Case>
                    </On>
                  </Case>
                </On>
              </Case>
            </On>
          </Case>
          <Case Expression="ToleranceVT">
            <On Select="TValueType.Unspecified, TValueType.ClearedByTemplate, TValueType.SpecifiedByTemplate, TValueType.ErrorByTemplate">
              <Case Expression="ToleranceMinVT">
                <On Select="TValueType.Unspecified, TValueType.ClearedByTemplate, TValueType.SpecifiedByTemplate, TValueType.ErrorByTemplate">
                  <Case Expression="ToleranceMaxVT">
                    <On Select="TValueType.Unspecified, TValueType.ClearedByTemplate, TValueType.SpecifiedByTemplate, TValueType.ErrorByTemplate">
                      <Case Expression="locTemplate.ToleranceVT">
                        <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
                          <Execute Statement="Tolerance:= locTemplate.Tolerance"/>
                          <Execute Statement="ToleranceVT:= TValueType.SpecifiedByTemplate"/>
                        </On>
                        <On Select="TValueType.Error, TValueType.ErrorByTemplate">
                          <Execute Statement="Tolerance:= locTemplate.ErrorTolerance"/>
                          <Execute Statement="ToleranceVT:= TValueType.ErrorByTemplate"/>
                        </On>
                      </Case>
                      <Case Expression="locTemplate.ToleranceMinVT">
                        <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
                          <Execute Statement="ToleranceMin:= locTemplate.ToleranceMin"/>
                          <Execute Statement="ToleranceMinVT:= TValueType.SpecifiedByTemplate"/>
                        </On>
                        <On Select="TValueType.Error, TValueType.ErrorByTemplate">
                          <Execute Statement="ToleranceMin:= locTemplate.ErrorToleranceMin"/>
                          <Execute Statement="ToleranceMinVT:= TValueType.ErrorByTemplate"/>
                        </On>
                      </Case>
                      <Case Expression="locTemplate.ToleranceMaxVT">
                        <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
                          <Execute Statement="ToleranceMax:= locTemplate.ToleranceMax"/>
                          <Execute Statement="ToleranceMaxVT:= TValueType.SpecifiedByTemplate"/>
                        </On>
                        <On Select="TValueType.Error, TValueType.ErrorByTemplate">
                          <Execute Statement="ToleranceMax:= locTemplate.ErrorToleranceMax"/>
                          <Execute Statement="ToleranceMaxVT:= TValueType.ErrorByTemplate"/>
                        </On>
                      </Case>
                    </On>
                  </Case>
                </On>
              </Case>
            </On>
          </Case>
<!-->->-->
        </ConditionalBlock>
        <Execute Statement="inherited ApplyTemplate"/>
      </Block>
    </Procedure>

    <Procedure Identifier="TInductorSpec.GetSpecificationValues">
      <Parameters>
        <Parameter Identifier="FormatType" Type="TSpecFormatType"/>
        <Parameter Identifier="Inductance" Type="string" Direction="Output"/>
        <Parameter Identifier="ESerie" Type="string" Direction="Output"/>
        <Parameter Identifier="AmperageRating" Type="string" Direction="Output"/>
        <Parameter Identifier="Tolerance" Type="string" Direction="Output"/>
        <Parameter Identifier="Footprint" Type="string" Direction="Output"/>
        <Parameter Identifier="PartNumberModel" Type="string" Direction="Output"/>
        <Parameter Identifier="InternalPartNumber" Type="string" Direction="Output"/>
        <Parameter Identifier="ComponentKind" Type="string" Direction="Output"/>
      </Parameters>
      <Block>
        <Variable Identifier="Compact" Type="Boolean" Init="FormatType &lt;&gt; TSpecFormatType.Name"/>
        <Variable Identifier="Range" Type="string"/>
        <!--<-<TComponentSpec.GetSpecificationValues-->
        <Case Expression="InductanceMinVT">
          <On Select="TValueType.Unspecified, TValueType.Cleared, TValueType.ClearedByTemplate">
            <Execute Statement="Range:= ''"/>
          </On>
          <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
            <Execute Statement="Range:= InductorInductanceConv.IntValueToStr(Self.InductanceMin, Compact) + '..'"/>
          </On>
          <On Select="TValueType.Error, TValueType.ErrorByTemplate">
            <Execute Statement="Range:= '!' + ErrorInductanceMin + '!' + '..'"/>
          </On>
        </Case>
        <Case Expression="InductanceMaxVT">
          <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
            <Execute Statement="Range:= '..'" Condition="IsEmptyString(Range)"/>
            <Execute Statement="Range:= Range + InductorInductanceConv.IntValueToStr(Self.InductanceMax, Compact)"/>
          </On>
          <On Select="TValueType.Error, TValueType.ErrorByTemplate">
            <Execute Statement="Range:= '..'" Condition="IsEmptyString(Range)"/>
            <Execute Statement="Range:= Range + '!' + ErrorInductanceMax + '!' "/>
          </On>
        </Case>
        <Execute Statement="Range:= '{' + Range + '}'" Condition="IsNonEmptyString(Range)"/>
        <Case Expression="InductanceVT">
          <On Select="TValueType.Unspecified, TValueType.Cleared, TValueType.ClearedByTemplate">
            <Execute Statement="Inductance:= Range"/>
          </On>
          <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
            <Execute Statement="Inductance:= InductorInductanceConv.IntValueToStr(Self.Inductance, Compact) + Range"/>
          </On>
          <On Select="TValueType.Error, TValueType.ErrorByTemplate">
            <Execute Statement="Inductance:= '!' + ErrorInductance + '!' + Range"/>
          </On>
        </Case>
        <Case Expression="AmperageRatingMinVT">
          <On Select="TValueType.Unspecified, TValueType.Cleared, TValueType.ClearedByTemplate">
            <Execute Statement="Range:= ''"/>
          </On>
          <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
            <Execute Statement="Range:= InductorAmperageRatingConv.IntValueToStr(Self.AmperageRatingMin, Compact) + '..'"/>
          </On>
          <On Select="TValueType.Error, TValueType.ErrorByTemplate">
            <Execute Statement="Range:= '!' + ErrorAmperageRatingMin + '!' + '..'"/>
          </On>
        </Case>
        <Case Expression="AmperageRatingMaxVT">
          <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
            <Execute Statement="Range:= '..'" Condition="IsEmptyString(Range)"/>
            <Execute Statement="Range:= Range + InductorAmperageRatingConv.IntValueToStr(Self.AmperageRatingMax, Compact)"/>
          </On>
          <On Select="TValueType.Error, TValueType.ErrorByTemplate">
            <Execute Statement="Range:= '..'" Condition="IsEmptyString(Range)"/>
            <Execute Statement="Range:= Range + '!' + ErrorAmperageRatingMax + '!' "/>
          </On>
        </Case>
        <Execute Statement="Range:= '{' + Range + '}'" Condition="IsNonEmptyString(Range)"/>
        <Case Expression="AmperageRatingVT">
          <On Select="TValueType.Unspecified, TValueType.Cleared, TValueType.ClearedByTemplate">
            <Execute Statement="AmperageRating:= Range"/>
          </On>
          <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
            <Execute Statement="AmperageRating:= InductorAmperageRatingConv.IntValueToStr(Self.AmperageRating, Compact) + Range"/>
          </On>
          <On Select="TValueType.Error, TValueType.ErrorByTemplate">
            <Execute Statement="AmperageRating:= '!' + ErrorAmperageRating + '!' + Range"/>
          </On>
        </Case>
        <Case Expression="ToleranceMinVT">
          <On Select="TValueType.Unspecified, TValueType.Cleared, TValueType.ClearedByTemplate">
            <Execute Statement="Range:= ''"/>
          </On>
          <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
            <Execute Statement="Range:= InductorToleranceConv.IntValueToStr(Self.ToleranceMin, Compact) + '..'"/>
          </On>
          <On Select="TValueType.Error, TValueType.ErrorByTemplate">
            <Execute Statement="Range:= '!' + ErrorToleranceMin + '!' + '..'"/>
          </On>
        </Case>
        <Case Expression="ToleranceMaxVT">
          <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
            <Execute Statement="Range:= '..'" Condition="IsEmptyString(Range)"/>
            <Execute Statement="Range:= Range + InductorToleranceConv.IntValueToStr(Self.ToleranceMax, Compact)"/>
          </On>
          <On Select="TValueType.Error, TValueType.ErrorByTemplate">
            <Execute Statement="Range:= '..'" Condition="IsEmptyString(Range)"/>
            <Execute Statement="Range:= Range + '!' + ErrorToleranceMax + '!' "/>
          </On>
        </Case>
        <Execute Statement="Range:= '{' + Range + '}'" Condition="IsNonEmptyString(Range)"/>
        <Case Expression="ToleranceVT">
          <On Select="TValueType.Unspecified, TValueType.Cleared, TValueType.ClearedByTemplate">
            <Execute Statement="Tolerance:= Range"/>
          </On>
          <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
            <Execute Statement="Tolerance:= InductorToleranceConv.IntValueToStr(Self.Tolerance, Compact) + Range"/>
          </On>
          <On Select="TValueType.Error, TValueType.ErrorByTemplate">
            <Execute Statement="Tolerance:= '!' + ErrorTolerance + '!' + Range"/>
          </On>
        </Case>
<!-->->-->
        <Execute Statement="inherited GetSpecificationValues(FormatType, Footprint, PartNumberModel, InternalPartNumber, ComponentKind)"/>
      </Block>
    </Procedure>

    <Function Identifier="TInductorSpec.SpecificationAsString" VirtualMethod="vmSpecificationAsString" Type="string">
      <Parameters>
        <Parameter Identifier="FormatType" Type="TSpecFormatType"/>
        <Parameter Identifier="ReportContext" Type="TSpecReportContext"/>
      </Parameters>
      <Variables>
        <Variable Identifier="Value" Type="string" Init="''"/>
        <Variable Identifier="ESerie" Type="string" Init="''"/>
        <Variable Identifier="AmpRating" Type="string" Init="''"/>
        <Variable Identifier="Tolerance" Type="string" Init="''"/>
        <Variable Identifier="Footprint" Type="string" Init="''"/>
        <Variable Identifier="PartNumberModel" Type="string" Init="''"/>
        <Variable Identifier="InternalPartNumber" Type="string"/>
        <Variable Identifier="ComponentKind" Type="string" Init="''"/>
      </Variables>
      <Block>
        <Execute Statement="GetSpecificationValues(FormatType, Value, ESerie, AmpRating, Tolerance, Footprint, PartNumberModel, InternalPartNumber, ComponentKind)"/>
        <Case Expression="FormatType" Optimalisation="integermapping">
          <On Select="TSpecFormatType.Fixed">
            <Variable Identifier="ColumnManager" Type="TTextColumnManager" Init="ReportContext.ColumnManager"/>
            <Variable Identifier="ColumnOffset" Type="Integer" Init="ReportContext.ColumnOffset"/>
            <Execute Statement="Value:= Value + ' '" Condition="IsNonEmptyString(Value)"/>
            <Execute Statement="ESerie:= ESerie + ' '" Condition="IsNonEmptyString(ESerie)"/>
            <Execute Statement="Tolerance:= Tolerance + ' '" Condition="IsNonEmptyString(Tolerance)"/>
            <Execute Statement="AmpRating:= AmpRating + ' '" Condition="IsNonEmptyString(AmpRating)"/>
            <Execute Statement="Footprint:= Footprint + ' '" Condition="IsNonEmptyString(Footprint)"/>
            <Execute Statement="PartNumberModel:= PartNumberModel + ' '" Condition="IsNonEmptyString(PartNumberModel)"/>
            <Execute Statement="InternalPartNumber:= InternalPartNumber + ' '" Condition="IsNonEmptyString(InternalPartNumber)"/>
            <Choose>
              <When Expression="ReportContext.Measure">
                <Execute Statement="ColumnManager.RequestColumnWidth(ColumnOffset + TInductorSpecColumns.Value, 1, Length(Value))"/>
                <Execute Statement="ColumnManager.RequestColumnWidth(ColumnOffset + TInductorSpecColumns.ESerie, 1, Length(ESerie))"/>
                <Execute Statement="ColumnManager.RequestColumnWidth(ColumnOffset + TInductorSpecColumns.AmpRating, 2, Length(AmpRating))"/>
                <Execute Statement="ColumnManager.RequestColumnWidth(ColumnOffset + TInductorSpecColumns.Tolerance, 1, Length(Tolerance))"/>
                <Execute Statement="ColumnManager.RequestColumnWidth(ColumnOffset + TInductorSpecColumns.FootPrint, 1, Length(Footprint))"/>
                <Execute Statement="ColumnManager.RequestColumnWidth(ColumnOffset + TInductorSpecColumns.PartNumberModel, 1, Length(PartNumberModel))"/>
                <Execute Statement="ColumnManager.RequestColumnWidth(ColumnOffset + TInductorSpecColumns.InternalPartNumber, 1, Length(InternalPartNumber))"/>
                <Execute Statement="Result:= ''"/>
              </When>
              <Otherwise>
                <Execute Statement="Result:= Format('%*s%*s%*s%*s%*s%-*s%-*s%-*s',
                         ColumnManager.GetColumnWidth(ColumnOffset + TInductorSpecColumns.Value, 1), Value,
                         ColumnManager.GetColumnWidth(ColumnOffset + TInductorSpecColumns.ESerie, 1), ESerie,
                         ColumnManager.GetColumnWidth(ColumnOffset + TInductorSpecColumns.AmpRating, 2), AmpRating,
                         ColumnManager.GetColumnWidth(ColumnOffset + TInductorSpecColumns.Tolerance, 1), Tolerance,
                         ColumnManager.GetColumnWidth(ColumnOffset + TInductorSpecColumns.None1, 1), '',
                         ColumnManager.GetColumnWidth(ColumnOffset + TInductorSpecColumns.FootPrint, 1), Footprint,
                         ColumnManager.GetColumnWidth(ColumnOffset + TInductorSpecColumns.PartNumberModel, 1), PartNumberModel,
                         ColumnManager.GetColumnWidth(ColumnOffset + TInductorSpecColumns.InternalPartNumber, 1), InternalPartNumber)"/>
              </Otherwise>
            </Choose>
          </On>
          <On Select="TSpecFormatType.Description">
            <Execute Statement="Result:= ConcatExt(' ', True, Value, Tolerance, AmpRating, Footprint, PartNumberModel, InternalPartNumber, ComponentKind)"/>
          </On>
          <On Select="TSpecFormatType.Name">
            <Execute Statement="Result:= Value"/>
          </On>
        </Case>
      </Block>
    </Function>

    <Function Identifier="TInductanceSpecificationIndex.GetKey" VirtualMethod="vmGetKey" Type="Boolean">
      <Parameters>
        <Parameter Identifier="ComponentSpec" Type="TInductorSpec"/>
        <Parameter Identifier="Key" Direction="Output"/>
      </Parameters>
      <Block>
        <Execute Statement="Result:= False"/>
        <Case Expression="ComponentSpec.InductanceVT" Optimalisation="integermapping">
          <On Select="TValueType.SpecifiedByTemplate, TValueType.Specified">
            <Execute Statement="Result:= True"/>
            <Execute Statement="Key:= ComponentSpec.Inductance"/>
          </On>
        </Case>
      </Block>
    </Function>

    <Constructor Identifier="TInductorCategory.Create">
      <Block>
        <Execute Statement="InductanceSpecificationIndex:= TInductanceSpecificationIndex.Create(TMappingInt64ToObject.Create)"/>
      </Block>
    </Constructor>

    <Function Identifier="TInductorCategory.IndexSearchSpecifications" VirtualMethod="vmIndexSearchSpecifications" Type="Boolean">
      <Parameters>
        <Parameter Identifier="ComponentSpec" Type="TComponentSpec"/>
        <Parameter Identifier="Specifications" Type="TSpecificationLink" Direction="Output"/>
      </Parameters>
      <Block>
        <Execute Statement="Result:= False"/>
        <Choose>
          <When Expression="InductanceSpecificationIndex.GetLinks(ComponentSpec, ComponentSpecHead, Specifications)">
            <Execute Statement="Result:= True"/>
          </When>
        </Choose>
      </Block>
    </Function>

    <Function Identifier="TInductorCategory.CreateSpecification" VirtualMethod="vmCreateSpecification" Type="TComponentSpec">
      <Block>
        <Execute Statement="Result:= TInductorSpec.Create"/>
      </Block>
    </Function>

    <Function Identifier="TInductorCategory.IsValidSpecification" VirtualMethod="vmIsValidSpecification" Type="Boolean">
      <Parameters>
        <Parameter Identifier="Specification" Type="TComponentSpec"/>
      </Parameters>
      <Block>
        <Case Expression="Specification.ComponentKindVT">
          <On Select="TValueType.Specified, TValueType.SpecifiedByTemplate"/>
          <Otherwise>
            <Exit Result="False"/>
          </Otherwise>
        </Case>
        <Case Expression="Specification.ComponentKind">
          <On Select="TComponentKind.Inductor"/>
          <Otherwise>
            <Exit Result="False"/>
          </Otherwise>
        </Case>
        <Execute Statement="Result:= True"/>
      </Block>
    </Function>


    <Function Identifier="TInductorCategory.CompareSpecifications" Type="Integer" VirtualMethod="vmCompareSpecifications">
      <Parameters>
        <Parameter Identifier="A" Type="TInductorSpec"/>
        <Parameter Identifier="B" Type="TInductorSpec"/>
      </Parameters>
      <Block>
        <Execute Statement="Result:= A.ComponentKind - B.ComponentKind"/>
        <Exit Condition="Result &lt;&gt; 0"/>
        <!--<-<TComponentSpec.CompareSpecifications-->
        <Execute Statement="Result:= CompareStateValueRange(A.ID, A.Inductance, A.InductanceVT, A.InductanceMin, A.InductanceMinVT, A.InductanceMax, A.InductanceMaxVT, B.ID, B.Inductance, B.InductanceVT, B.InductanceMin, B.InductanceMinVT, B.InductanceMax, B.InductanceMaxVT)"/>
        <Exit Condition="Result &lt;&gt; 0"/>
        <Execute Statement="Result:= CompareStateValueRange(A.ID, A.AmperageRating, A.AmperageRatingVT, A.AmperageRatingMin, A.AmperageRatingMinVT, A.AmperageRatingMax, A.AmperageRatingMaxVT, B.ID, B.AmperageRating, B.AmperageRatingVT, B.AmperageRatingMin, B.AmperageRatingMinVT, B.AmperageRatingMax, B.AmperageRatingMaxVT)"/>
        <Exit Condition="Result &lt;&gt; 0"/>
        <Execute Statement="Result:= CompareStateValueRange(A.ID, A.Tolerance, A.ToleranceVT, A.ToleranceMin, A.ToleranceMinVT, A.ToleranceMax, A.ToleranceMaxVT, B.ID, B.Tolerance, B.ToleranceVT, B.ToleranceMin, B.ToleranceMinVT, B.ToleranceMax, B.ToleranceMaxVT)"/>
        <Exit Condition="Result &lt;&gt; 0"/>
<!-->->-->
        <Execute Statement="Result:= inherited CompareSpecifications(A, B)"/>
      </Block>
    </Function>

    <Procedure Identifier="TInductorCategory.LoadTemplatesFromIniFile" VirtualMethod="vmLoadTemplatesFromIniFile">
      <Parameters>
        <Parameter Identifier="IniFile" Type="TCustomIniFile"/>
      </Parameters>
      <Constants>
        <Constant Identifier="sSectionInductorTHT" Type="string" Expression="'Template.Inductor.THT'"/>
      </Constants>
      <Block>
        <ConditionalBlock Expression="IniFile.SectionExists(sSectionInductorTHT)">
          <Execute Statement="TemplateInductorTHT:= TInductorSpec.Create"/>
          <Execute Statement="TemplateInductorTHT.LoadFromIniFileSection(IniFile, sSectionInductorTHT)"/>
        </ConditionalBlock>
      </Block>
    </Procedure>

    <Function Identifier="TInductorCategory.GetTemplate" VirtualMethod="vmGetTemplate" Type="TComponentSpec">
      <Parameters>
        <Parameter Identifier="Specification" Type="TComponentSpec"/>
      </Parameters>
      <Block>
        <Execute Statement="Result:= ObjNil"/>
        <Case Expression="Specification.ComponentKind">
          <On Select="TComponentKind.Inductor">
            <Execute Statement="Result:= TemplateInductorTHT"/>
          </On>
        </Case>
      </Block>
    </Function>

    <Function Identifier="TInductorCategory.CanExtractTemplateFromIniFile" VirtualMethod="vmCanExtractTemplateFromIniFile" Type="Boolean">
      <Parameters>
        <Parameter Identifier="IniFile" Type="TCustomIniFile"/>
        <Parameter Identifier="ComponentSpec" Type="TComponentSpec" Direction="Output"/>
      </Parameters>
      <Constants>
        <Constant Identifier="cInductorSection" Type="string" Expression="'Inductor'"/>
      </Constants>
      <Block>
        <Execute Statement="Result:= IniFile.SectionExists(cInductorSection)"/>
        <Block Condition="Result">
          <Execute Statement="ComponentSpec:= TInductorSpec.Create"/>
          <Execute Statement="ComponentSpec.LoadFromIniFileSection(IniFile, cInductorSection)"/>
        </Block>
      </Block>
    </Function>

  </Procedures>

  <Initialization>
  </Initialization>

  <Finalization>
    <Free Identifier="InductorTechnologyIndex"/>
  </Finalization>

</pkg:Library>