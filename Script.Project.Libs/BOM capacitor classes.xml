<?xml version="1.0" encoding="utf-8" standalone="no"?>
<pkg:Library
  xsi:schemaLocation="urn:schemas-www-wisware.nl-scriptingpackages ../XmlSchemas.Common.XmlScript/XMLScripting.Packages.xsd"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="urn:schemas-www-wisware.nl-xmlscripting"
  xmlns:ado="urn:schemas-www-wisware.nl-xmlscripting-ado"
  xmlns:fil="urn:schemas-www-wisware.nl-xmlscripting-filemanagement"
  xmlns:fwl="urn:schemas-www-wisware.nl-xmlscripting-windowsfirewall"
  xmlns:inx="urn:schemas-www-wisware.nl-xmlscripting-index"
  xmlns:lil="urn:schemas-www-wisware.nl-xmlscripting-linkedlist"
  xmlns:msx="urn:schemas-www-wisware.nl-xmlscripting-xml"
  xmlns:pkg="urn:schemas-www-wisware.nl-scriptingpackages"
  xmlns:reg="urn:schemas-www-wisware.nl-xmlscripting-registry"
  xmlns:rep="urn:schemas-www-wisware.nl-xmlscripting-report"
  xmlns:sts="urn:schemas-www-wisware.nl-xmlscripting-showstatus"
  xmlns:sys="urn:schemas-www-wisware.nl-xmlscripting"
  xmlns:syu="urn:schemas-www-wisware.nl-xmlscripting-sysutils"
  >
  <Uses>
    <Use Identifier="ScienceUnits"/>
    <Use Identifier="ScienceIniHelper"/>
    <Use Identifier="ElectronicsUtils"/>
    <Use Identifier="BomStrings"/>
    <Use Identifier="BomEnumerations"/>
    <Use Identifier="BomClasses"/>
  </Uses>
  <Type>
    <Enumeration Identifier="TCapacitorTechnology" Elements="Unspecified, Electrolytic, Ceramic, Tantalum, SilverMica, PolyesterFilm, MetallisedPolyesterFilm, Polycarbonate, Polypropylene, Glass" LowAlias="Low" HighAlias="High"/>

    <DataClass Identifier="TCapacitorSpec" Inherit="TPassiveSpec" DefaultConstructor="createonly">
      <VirtualMethod Identifier="vmHandleField" Override="true"/>
      <VirtualMethod Identifier="vmCheckComponentKind" Override="true"/>
      <VirtualMethod Identifier="vmSpecificationAsString" Override="true"/>
      <VirtualMethod Identifier="vmApplyTemplate" Override="true"/>
      <VirtualMethod Identifier="vmDoesMatchSpecification" Override="true"/>
      <VirtualMethod Identifier="vmCategoryMatchScore" Override="true"/>
      <VirtualMethod Identifier="vmGetValue" Override="true"/>
      <VirtualMethod Identifier="vmSetValue" Override="true"/>
      <!--<-<TComponentSpec.Fields-->
      <Field Identifier="CapacitanceVT" Type="TValueType"/>
      <Field Identifier="Capacitance" Type="CapacitanceDQ"/>
      <Field Identifier="ErrorCapacitance" Type="string"/>
      <Field Identifier="CapacitanceBounds" Type="TBoundType"/>
      <Field Identifier="CapacitanceUpperBound" Type="CapacitanceDQ"/>
      <Field Identifier="VoltageRatingVT" Type="TValueType"/>
      <Field Identifier="VoltageRating" Type="VoltageDQ"/>
      <Field Identifier="ErrorVoltageRating" Type="string"/>
      <Field Identifier="VoltageRatingBounds" Type="TBoundType"/>
      <Field Identifier="VoltageRatingUpperBound" Type="VoltageDQ"/>
      <Field Identifier="ToleranceVT" Type="TValueType"/>
      <Field Identifier="Tolerance" Type="ToleranceDQ"/>
      <Field Identifier="ErrorTolerance" Type="string"/>
      <Field Identifier="ToleranceBounds" Type="TBoundType"/>
      <Field Identifier="ToleranceUpperBound" Type="ToleranceDQ"/>
      <Field Identifier="TechnologyVT" Type="TValueType"/>
      <Field Identifier="Technology" Type="TCapacitorTechnology"/>
      <Field Identifier="ErrorTechnology" Type="string"/>
      <Field Identifier="TechnologySet" Type="TFlags"/>
      <!-->->-->
    </DataClass>

    <DataClass Identifier="TCapacitanceSpecificationIndex" Inherit="TSpecificationIndex" DefaultConstructor="createandsetfields">
      <VirtualMethod Identifier="vmGetKey" Override="true"/>
    </DataClass>

    <DataClass Identifier="TCapacitorCategory" Inherit="TComponentCategory">
      <VirtualMethod Identifier="vmCreateSpecification" Override="true"/>
      <VirtualMethod Identifier="vmIsValidSpecification" Override="true"/>
      <VirtualMethod Identifier="vmIndexSearchSpecifications" Override="true"/>
      <VirtualMethod Identifier="vmCompareSpecifications" Override="true"/>
      <VirtualMethod Identifier="vmLoadTemplatesFromIniFile" Override="true"/>
      <VirtualMethod Identifier="vmGetTemplate" Override="true"/>
      <VirtualMethod Identifier="vmCanExtractTemplateFromIniFile" Override="true"/>
      <Field Identifier="CapacitanceSpecificationIndex" Type="TCapacitanceSpecificationIndex"/>
      <Field Identifier="TemplateCapacitorTHT" Type="TCapacitorSpec"/>
      <Field Identifier="TemplatePolarisedCapacitorTHT" Type="TCapacitorSpec"/>
    </DataClass>
  </Type>

  <Variables>
    <Variable Identifier="CapacitorCapacitanceConv" Type="TUnitConvertor" Init="GetUnitConvertor(TSiUnit.Farad)"/>
    <Variable Identifier="CapacitorVoltageRatingConv" Type="TUnitConvertor" Init="GetUnitConvertor(TSiUnit.Volt)"/>
    <Variable Identifier="CapacitorToleranceConv" Type="TUnitConvertor" Init="GetUnitConvertor(TSiUnit.Perc)"/>
  </Variables>

  <Procedures>
    <Function Identifier="CapacitorTechnologyName" Type="string">
      <Parameters>
        <Parameter Identifier="Technology" Type="TCapacitorTechnology"/>
      </Parameters>
      <Block>
        <Case Expression="Technology" Optimalisation="integermapping">
          <On Select="TCapacitorTechnology.Unspecified">
            <Execute Statement="Result:= ''"/>
          </On>
          <On Select="TCapacitorTechnology.Electrolytic">
            <Execute Statement="Result:= 'electrolytic'"/>
          </On>
          <On Select="TCapacitorTechnology.Ceramic">
            <Execute Statement="Result:= 'ceramic'"/>
          </On>
          <On Select="TCapacitorTechnology.Tantalum">
            <Execute Statement="Result:= 'tantalum'"/>
          </On>
          <On Select="TCapacitorTechnology.SilverMica">
            <Execute Statement="Result:= 'silver mica'"/>
          </On>
          <On Select="TCapacitorTechnology.PolyesterFilm">
            <Execute Statement="Result:= 'polyester film'"/>
          </On>
          <On Select="TCapacitorTechnology.MetallisedPolyesterFilm">
            <Execute Statement="Result:= 'metallised polyester film'"/>
          </On>
          <On Select="TCapacitorTechnology.Polycarbonate">
            <Execute Statement="Result:= 'polycarbonate'"/>
          </On>
          <On Select="TCapacitorTechnology.Polypropylene">
            <Execute Statement="Result:= 'polypropylene'"/>
          </On>
          <On Select="TCapacitorTechnology.Glass">
            <Execute Statement="Result:= 'glass'"/>
          </On>
          <Otherwise>
            <Raise Expression="Exception.Create('Unmapped capacitor technology')"/>
          </Otherwise>
        </Case>
      </Block>
    </Function>

    <Function Identifier="TCapacitorSpec.CheckComponentKind" VirtualMethod="vmCheckComponentKind" Type="Boolean">
      <Parameters>
        <Parameter Identifier="ComponentKind" Type="TComponentKind"/>
      </Parameters>
      <Block>
        <Execute Statement="Result:= False"/>
        <Case Expression="ComponentKind" Optimalisation="integermapping">
          <On Select="TComponentKind.Capacitor, TComponentKind.PolarisedCapacitor">
            <Execute Statement="Result:= True"/>
          </On>
        </Case>
      </Block>
    </Function>

    <Function Identifier="TCapacitorSpec.DoesMatchSpecification" VirtualMethod="vmDoesMatchSpecification" Type="Boolean">
      <Parameters>
        <Parameter Identifier="ComponentSpec" Type="TComponentSpec"/>
      </Parameters>
      <Block>
        <Execute Statement="Result:= False"/>
        <Exit Condition="not inherited DoesMatchSpecification(ComponentSpec)"/>
        <Variable Identifier="IsMultiple" Type="Boolean"/>
        <!--<-<TComponentSpec.DoesMatchSpecification-->
        <Case Expression="CapacitanceVT">
          <On Select="TValueType.Specified, TValueType.SpecifiedByTemplate">
            <Exit Condition="not (ComponentSpec is TCapacitorSpec)"/>
            <Case Expression="TCapacitorSpec(ComponentSpec).CapacitanceVT">
              <On Select="TValueType.Specified, TValueType.SpecifiedByTemplate">
                <Exit Condition="Capacitance &lt;&gt; TCapacitorSpec(ComponentSpec).Capacitance"/>
              </On>
              <On Select="TValueType.SpecifiedEx, TValueType.SpecifiedExByTemplate">
                <Exit/>
              </On>
              <On Select="TValueType.Error, TValueType.ErrorByTemplate">
                <Exit/>
              </On>
            </Case>
          </On>
          <On Select="TValueType.SpecifiedEx, TValueType.SpecifiedExByTemplate">
            <Exit Condition="not (ComponentSpec is TCapacitorSpec)"/>
            <Case Expression="TCapacitorSpec(ComponentSpec).CapacitanceVT">
              <On Select="TValueType.Specified, TValueType.SpecifiedByTemplate">
                <Case Expression="CapacitanceBounds">
                  <On Select="TBoundType.Lower">
                    <Exit Condition="TCapacitorSpec(ComponentSpec).Capacitance &lt; Capacitance"/>
                  </On>
                  <On Select="TBoundType.Upper">
                    <Exit Condition="TCapacitorSpec(ComponentSpec).Capacitance &gt; CapacitanceUpperBound"/>
                  </On>
                  <On Select="TBoundType.Range">
                    <Exit Condition="(TCapacitorSpec(ComponentSpec).Capacitance &lt; Capacitance) or (TCapacitorSpec(ComponentSpec).Capacitance &gt; CapacitanceUpperBound)"/>
                  </On>
                </Case>
              </On>
              <On Select="TValueType.SpecifiedEx, TValueType.SpecifiedExByTemplate">
                <Exit/>
              </On>
              <On Select="TValueType.Error, TValueType.ErrorByTemplate">
                <Exit/>
              </On>
            </Case>
          </On>
          <On Select="TValueType.Error, TValueType.ErrorByTemplate">
            <Exit/>
          </On>
        </Case>
        <Case Expression="VoltageRatingVT">
          <On Select="TValueType.Specified, TValueType.SpecifiedByTemplate">
            <Exit Condition="not (ComponentSpec is TCapacitorSpec)"/>
            <Case Expression="TCapacitorSpec(ComponentSpec).VoltageRatingVT">
              <On Select="TValueType.Specified, TValueType.SpecifiedByTemplate">
                <Exit Condition="VoltageRating &lt;&gt; TCapacitorSpec(ComponentSpec).VoltageRating"/>
              </On>
              <On Select="TValueType.SpecifiedEx, TValueType.SpecifiedExByTemplate">
                <Exit/>
              </On>
              <On Select="TValueType.Error, TValueType.ErrorByTemplate">
                <Exit/>
              </On>
            </Case>
          </On>
          <On Select="TValueType.SpecifiedEx, TValueType.SpecifiedExByTemplate">
            <Exit Condition="not (ComponentSpec is TCapacitorSpec)"/>
            <Case Expression="TCapacitorSpec(ComponentSpec).VoltageRatingVT">
              <On Select="TValueType.Specified, TValueType.SpecifiedByTemplate">
                <Case Expression="VoltageRatingBounds">
                  <On Select="TBoundType.Lower">
                    <Exit Condition="TCapacitorSpec(ComponentSpec).VoltageRating &lt; VoltageRating"/>
                  </On>
                  <On Select="TBoundType.Upper">
                    <Exit Condition="TCapacitorSpec(ComponentSpec).VoltageRating &gt; VoltageRatingUpperBound"/>
                  </On>
                  <On Select="TBoundType.Range">
                    <Exit Condition="(TCapacitorSpec(ComponentSpec).VoltageRating &lt; VoltageRating) or (TCapacitorSpec(ComponentSpec).VoltageRating &gt; VoltageRatingUpperBound)"/>
                  </On>
                </Case>
              </On>
              <On Select="TValueType.SpecifiedEx, TValueType.SpecifiedExByTemplate">
                <Exit/>
              </On>
              <On Select="TValueType.Error, TValueType.ErrorByTemplate">
                <Exit/>
              </On>
            </Case>
          </On>
          <On Select="TValueType.Error, TValueType.ErrorByTemplate">
            <Exit/>
          </On>
        </Case>
        <Case Expression="ToleranceVT">
          <On Select="TValueType.Specified, TValueType.SpecifiedByTemplate">
            <Exit Condition="not (ComponentSpec is TCapacitorSpec)"/>
            <Case Expression="TCapacitorSpec(ComponentSpec).ToleranceVT">
              <On Select="TValueType.Specified, TValueType.SpecifiedByTemplate">
                <Exit Condition="Tolerance &lt;&gt; TCapacitorSpec(ComponentSpec).Tolerance"/>
              </On>
              <On Select="TValueType.SpecifiedEx, TValueType.SpecifiedExByTemplate">
                <Exit/>
              </On>
              <On Select="TValueType.Error, TValueType.ErrorByTemplate">
                <Exit/>
              </On>
            </Case>
          </On>
          <On Select="TValueType.SpecifiedEx, TValueType.SpecifiedExByTemplate">
            <Exit Condition="not (ComponentSpec is TCapacitorSpec)"/>
            <Case Expression="TCapacitorSpec(ComponentSpec).ToleranceVT">
              <On Select="TValueType.Specified, TValueType.SpecifiedByTemplate">
                <Case Expression="ToleranceBounds">
                  <On Select="TBoundType.Lower">
                    <Exit Condition="TCapacitorSpec(ComponentSpec).Tolerance &lt; Tolerance"/>
                  </On>
                  <On Select="TBoundType.Upper">
                    <Exit Condition="TCapacitorSpec(ComponentSpec).Tolerance &gt; ToleranceUpperBound"/>
                  </On>
                  <On Select="TBoundType.Range">
                    <Exit Condition="(TCapacitorSpec(ComponentSpec).Tolerance &lt; Tolerance) or (TCapacitorSpec(ComponentSpec).Tolerance &gt; ToleranceUpperBound)"/>
                  </On>
                </Case>
              </On>
              <On Select="TValueType.SpecifiedEx, TValueType.SpecifiedExByTemplate">
                <Exit/>
              </On>
              <On Select="TValueType.Error, TValueType.ErrorByTemplate">
                <Exit/>
              </On>
            </Case>
          </On>
          <On Select="TValueType.Error, TValueType.ErrorByTemplate">
            <Exit/>
          </On>
        </Case>
        <Case Expression="TechnologyVT">
          <On Select="TValueType.Specified, TValueType.SpecifiedByTemplate">
            <Exit Condition="not (ComponentSpec is TCapacitorSpec)"/>
            <Case Expression="TCapacitorSpec(ComponentSpec).TechnologyVT">
              <On Select="TValueType.Specified, TValueType.SpecifiedByTemplate">
                <Exit Condition="Technology &lt;&gt; TCapacitorSpec(ComponentSpec).Technology"/>
              </On>
              <On Select="TValueType.SpecifiedEx, TValueType.SpecifiedExByTemplate">
                <Exit/>
              </On>
              <On Select="TValueType.Error, TValueType.ErrorByTemplate">
                <Exit/>
              </On>
            </Case>
          </On>
          <On Select="TValueType.SpecifiedEx, TValueType.SpecifiedExByTemplate">
            <Exit Condition="not (ComponentSpec is TCapacitorSpec)"/>
            <Exit Condition="not InFlags(TCapacitorSpec(ComponentSpec).Technology, TechnologySet)"/>
            <Case Expression="TCapacitorSpec(ComponentSpec).TechnologyVT">
              <On Select="TValueType.Specified, TValueType.SpecifiedByTemplate">
              </On>
              <On Select="TValueType.SpecifiedEx, TValueType.SpecifiedExByTemplate">
                <Exit/>
              </On>
              <On Select="TValueType.Error, TValueType.ErrorByTemplate">
                <Exit/>
              </On>
            </Case>
          </On>
          <On Select="TValueType.Error, TValueType.ErrorByTemplate">
            <Exit/>
          </On>
        </Case>
        <!-->->-->
        <Execute Statement="Result:= True"/>
      </Block>
    </Function>

    <Function Identifier="TCapacitorSpec.CategoryMatchScore" VirtualMethod="vmCategoryMatchScore" Type="Int64">
      <Parameters>
        <Parameter Identifier="ComponentSpec" Type="TComponentSpec"/>
      </Parameters>
      <Block>
        <Execute Statement="Result:= 0"/>

        <Exit Condition="not (ComponentSpec is TCapacitorSpec)"/>

        <Case Expression="ComponentKindVT">
          <On Select="TValueType.Specified, TValueType.SpecifiedByTemplate">
            <Case Expression="ComponentSpec.ComponentKindVT">
              <On Select="TValueType.Specified, TValueType.SpecifiedByTemplate">
                <Exit Condition="ComponentKind &lt;&gt; ComponentSpec.ComponentKind" Result="0"/>
                <Execute Statement="Result:= Result + 1"/>
              </On>
              <On Select="TValueType.Error, TValueType.ErrorByTemplate">
                <Exit Result="0"/>
              </On>
            </Case>
          </On>
          <On Select="TValueType.Error, TValueType.ErrorByTemplate">
            <Exit Result="0"/>
          </On>
        </Case>

        <Execute Statement="Result:= Result shl 1"/>
        <Case Expression="CapacitanceVT">
          <On Select="TValueType.Specified, TValueType.SpecifiedByTemplate">
            <Case Expression="TCapacitorSpec(ComponentSpec).CapacitanceVT">
              <On Select="TValueType.Specified, TValueType.SpecifiedByTemplate">
                <Exit Condition="Capacitance &lt;&gt; TCapacitorSpec(ComponentSpec).Capacitance" Result="0"/>
                <Execute Statement="Result:= Result + 1"/>
              </On>
              <On Select="TValueType.Error, TValueType.ErrorByTemplate">
                <Exit Result="0"/>
              </On>
            </Case>
          </On>
          <On Select="TValueType.Error, TValueType.ErrorByTemplate">
            <Exit Result="0"/>
          </On>
        </Case>

        <Execute Statement="Result:= Result shl 1"/>
        <Case Expression="TechnologyVT">
          <On Select="TValueType.Specified, TValueType.SpecifiedByTemplate">
            <Case Expression="TCapacitorSpec(ComponentSpec).TechnologyVT">
              <On Select="TValueType.Specified, TValueType.SpecifiedByTemplate">
                <Exit Condition="Technology &lt;&gt; TCapacitorSpec(ComponentSpec).Technology" Result="0"/>
                <Execute Statement="Result:= Result + 1"/>
              </On>
              <On Select="TValueType.Error, TValueType.ErrorByTemplate">
                <Exit Result="0"/>
              </On>
            </Case>
          </On>
          <On Select="TValueType.Error, TValueType.ErrorByTemplate">
            <Exit Result="0"/>
          </On>
        </Case>

        <Execute Statement="Result:= Result shl 1"/>
        <Case Expression="VoltageRatingVT">
          <On Select="TValueType.Specified, TValueType.SpecifiedByTemplate">
            <Case Expression="TCapacitorSpec(ComponentSpec).VoltageRatingVT">
              <On Select="TValueType.Specified, TValueType.SpecifiedByTemplate">
                <Exit Condition="VoltageRating &lt;&gt; TCapacitorSpec(ComponentSpec).VoltageRating" Result="0"/>
                <Execute Statement="Result:= Result + 1"/>
              </On>
              <On Select="TValueType.Error, TValueType.ErrorByTemplate">
                <Exit Result="0"/>
              </On>
            </Case>
          </On>
          <On Select="TValueType.Error, TValueType.ErrorByTemplate">
            <Exit Result="0"/>
          </On>
        </Case>

        <Execute Statement="Result:= Result shl 1"/>
        <Case Expression="FootprintVT">
          <On Select="TValueType.Specified, TValueType.SpecifiedByTemplate">
            <Case Expression="ComponentSpec.FootprintVT">
              <On Select="TValueType.Specified, TValueType.SpecifiedByTemplate">
                <Execute Statement="Result:= Result + 1" Condition="Footprint = ComponentSpec.Footprint"/>
              </On>
              <On Select="TValueType.SpecifiedExByTemplate, TValueType.SpecifiedEx">
                <Execute Statement="Result:= Result + 1" Condition="ComponentSpec.FootprintMask.Matches(Footprint)"/>
              </On>
              <On Select="TValueType.Unspecified, TValueType.Cleared, TValueType.ClearedByTemplate">
              </On>
              <Otherwise>
                <Exit/>
              </Otherwise>
            </Case>
          </On>
          <On Select="TValueType.Error, TValueType.ErrorByTemplate">
            <Exit/>
          </On>
        </Case>

        <Execute Statement="Result:= Result shl 1"/>
        <Case Expression="ToleranceVT">
          <On Select="TValueType.Specified, TValueType.SpecifiedByTemplate">
            <Case Expression="TCapacitorSpec(ComponentSpec).ToleranceVT">
              <On Select="TValueType.Specified, TValueType.SpecifiedByTemplate">
                <Exit Condition="Tolerance &lt;&gt; TCapacitorSpec(ComponentSpec).Tolerance" Result="0"/>
                <Execute Statement="Result:= Result + 1"/>
              </On>
              <On Select="TValueType.Error, TValueType.ErrorByTemplate">
                <Exit Result="0"/>
              </On>
            </Case>
          </On>
          <On Select="TValueType.Error, TValueType.ErrorByTemplate">
            <Exit Result="0"/>
          </On>
        </Case>

        <Execute Statement="Result:= Result shl 1"/>
        <Case Expression="PartNumberVT">
          <On Select="TValueType.Specified, TValueType.SpecifiedByTemplate">
            <Case Expression="ComponentSpec.PartNumberVT">
              <On Select="TValueType.Specified, TValueType.SpecifiedByTemplate">
                <Exit Condition="not SameText(PartNumber, ComponentSpec.PartNumber)" Result="0"/>
                <Execute Statement="Result:= Result + 1"/>
              </On>
              <On Select="TValueType.Error, TValueType.ErrorByTemplate">
                <Exit Result="0"/>
              </On>
            </Case>
          </On>
          <On Select="TValueType.Error, TValueType.ErrorByTemplate">
            <Exit Result="0"/>
          </On>
        </Case>

        <Execute Statement="Result:= Result shl 1"/>
        <Case Expression="ManufacturerVT">
          <On Select="TValueType.Specified, TValueType.SpecifiedByTemplate">
            <Case Expression="ComponentSpec.ManufacturerVT">
              <On Select="TValueType.Specified, TValueType.SpecifiedByTemplate">
                <Exit Condition="not SameText(Manufacturer, ComponentSpec.Manufacturer)" Result="0"/>
                <Execute Statement="Result:= Result + 1"/>
              </On>
              <On Select="TValueType.Error, TValueType.ErrorByTemplate">
                <Exit Result="0"/>
              </On>
            </Case>
          </On>
          <On Select="TValueType.Error, TValueType.ErrorByTemplate">
            <Exit Result="0"/>
          </On>
        </Case>
      </Block>
    </Function>

    <Procedure Identifier="TCapacitorSpec.HandleField" VirtualMethod="vmHandleField">
      <Parameters>
        <Parameter Identifier="CustomField" Type="TCustomField"/>
        <Parameter Identifier="Name" Type="string"/>
        <Parameter Identifier="Value" Type="string"/>
        <Parameter Identifier="Clear" Type="Boolean"/>
      </Parameters>
      <Variables>
        <Variable Identifier="LocValue" Type="DecimalQuantity"/>
        <Variable Identifier="LocFlags" Type="TFlags"/>
        <Variable Identifier="LocCapacitorTechnology" Type="TCapacitorTechnology"/>
        <Variable Identifier="Found" Type="Boolean"/>
      </Variables>
      <Block>
        <Case Expression="CustomField" Optimalisation="integermapping">
          <!--<-<TComponentSpec.HandleField-->
          <On Select="TCustomField.Value">
            <Choose>
              <When Expression="Clear">
                <Execute Statement="CapacitanceVT:= TValueType.Cleared"/>
              </When>
              <When Expression="CapacitorCapacitanceConv.EStrToDecimalQuantity(Value, LocValue)">
                <Execute Statement="CapacitanceVT:= TValueType.Specified"/>
                <Execute Statement="Capacitance:= LocValue"/>
              </When>
              <Otherwise>
                <Execute Statement="CapacitanceVT:= TValueType.Error"/>
                <Execute Statement="ErrorCapacitance:= Value"/>
              </Otherwise>
            </Choose>
          </On>
          <On Select="TCustomField.ValueMin">
            <Choose>
              <When Expression="Clear">
                <Execute Statement="CapacitanceVT:= TValueType.Cleared"/>
              </When>
              <When Expression="CapacitorCapacitanceConv.EStrToDecimalQuantity(Value, LocValue)">
                <Choose>
                  <When Expression="(CapacitanceVT = TValueType.SpecifiedEx) and (CapacitanceBounds = TBoundType.Upper)">
                    <Execute Statement="CapacitanceBounds:= TBoundType.Range"/>
                  </When>
                  <Otherwise>
                    <Execute Statement="CapacitanceVT:= TValueType.SpecifiedEx"/>
                    <Execute Statement="CapacitanceBounds:= TBoundType.Lower"/>
                  </Otherwise>
                </Choose>
                <Execute Statement="Capacitance:= LocValue"/>
              </When>
              <Otherwise>
                <Execute Statement="CapacitanceVT:= TValueType.Error"/>
                <Execute Statement="ErrorCapacitance:= Value"/>
              </Otherwise>
            </Choose>
          </On>
          <On Select="TCustomField.ValueMax">
            <Choose>
              <When Expression="Clear">
                <Execute Statement="CapacitanceVT:= TValueType.Cleared"/>
              </When>
              <When Expression="CapacitorCapacitanceConv.EStrToDecimalQuantity(Value, LocValue)">
                <Choose>
                  <When Expression="(CapacitanceVT = TValueType.SpecifiedEx) and (CapacitanceBounds = TBoundType.Lower)">
                    <Execute Statement="CapacitanceBounds:= TBoundType.Range"/>
                  </When>
                  <Otherwise>
                    <Execute Statement="CapacitanceVT:= TValueType.SpecifiedEx"/>
                    <Execute Statement="CapacitanceBounds:= TBoundType.Upper"/>
                  </Otherwise>
                </Choose>
                <Execute Statement="CapacitanceUpperBound:= LocValue"/>
              </When>
              <Otherwise>
                <Execute Statement="CapacitanceVT:= TValueType.Error"/>
                <Execute Statement="ErrorCapacitance:= Value"/>
              </Otherwise>
            </Choose>
          </On>
          <On Select="TCustomField.VoltageRating">
            <Choose>
              <When Expression="Clear">
                <Execute Statement="VoltageRatingVT:= TValueType.Cleared"/>
              </When>
              <When Expression="CapacitorVoltageRatingConv.EStrToDecimalQuantity(Value, LocValue)">
                <Execute Statement="VoltageRatingVT:= TValueType.Specified"/>
                <Execute Statement="VoltageRating:= LocValue"/>
              </When>
              <Otherwise>
                <Execute Statement="VoltageRatingVT:= TValueType.Error"/>
                <Execute Statement="ErrorVoltageRating:= Value"/>
              </Otherwise>
            </Choose>
          </On>
          <On Select="TCustomField.VoltageRatingMin">
            <Choose>
              <When Expression="Clear">
                <Execute Statement="VoltageRatingVT:= TValueType.Cleared"/>
              </When>
              <When Expression="CapacitorVoltageRatingConv.EStrToDecimalQuantity(Value, LocValue)">
                <Choose>
                  <When Expression="(VoltageRatingVT = TValueType.SpecifiedEx) and (VoltageRatingBounds = TBoundType.Upper)">
                    <Execute Statement="VoltageRatingBounds:= TBoundType.Range"/>
                  </When>
                  <Otherwise>
                    <Execute Statement="VoltageRatingVT:= TValueType.SpecifiedEx"/>
                    <Execute Statement="VoltageRatingBounds:= TBoundType.Lower"/>
                  </Otherwise>
                </Choose>
                <Execute Statement="VoltageRating:= LocValue"/>
              </When>
              <Otherwise>
                <Execute Statement="VoltageRatingVT:= TValueType.Error"/>
                <Execute Statement="ErrorVoltageRating:= Value"/>
              </Otherwise>
            </Choose>
          </On>
          <On Select="TCustomField.VoltageRatingMax">
            <Choose>
              <When Expression="Clear">
                <Execute Statement="VoltageRatingVT:= TValueType.Cleared"/>
              </When>
              <When Expression="CapacitorVoltageRatingConv.EStrToDecimalQuantity(Value, LocValue)">
                <Choose>
                  <When Expression="(VoltageRatingVT = TValueType.SpecifiedEx) and (VoltageRatingBounds = TBoundType.Lower)">
                    <Execute Statement="VoltageRatingBounds:= TBoundType.Range"/>
                  </When>
                  <Otherwise>
                    <Execute Statement="VoltageRatingVT:= TValueType.SpecifiedEx"/>
                    <Execute Statement="VoltageRatingBounds:= TBoundType.Upper"/>
                  </Otherwise>
                </Choose>
                <Execute Statement="VoltageRatingUpperBound:= LocValue"/>
              </When>
              <Otherwise>
                <Execute Statement="VoltageRatingVT:= TValueType.Error"/>
                <Execute Statement="ErrorVoltageRating:= Value"/>
              </Otherwise>
            </Choose>
          </On>
          <On Select="TCustomField.Tolerance">
            <Choose>
              <When Expression="Clear">
                <Execute Statement="ToleranceVT:= TValueType.Cleared"/>
              </When>
              <When Expression="CapacitorToleranceConv.EStrToDecimalQuantity(Value, LocValue)">
                <Execute Statement="ToleranceVT:= TValueType.Specified"/>
                <Execute Statement="Tolerance:= LocValue"/>
              </When>
              <Otherwise>
                <Execute Statement="ToleranceVT:= TValueType.Error"/>
                <Execute Statement="ErrorTolerance:= Value"/>
              </Otherwise>
            </Choose>
          </On>
          <On Select="TCustomField.ToleranceMin">
            <Choose>
              <When Expression="Clear">
                <Execute Statement="ToleranceVT:= TValueType.Cleared"/>
              </When>
              <When Expression="CapacitorToleranceConv.EStrToDecimalQuantity(Value, LocValue)">
                <Choose>
                  <When Expression="(ToleranceVT = TValueType.SpecifiedEx) and (ToleranceBounds = TBoundType.Upper)">
                    <Execute Statement="ToleranceBounds:= TBoundType.Range"/>
                  </When>
                  <Otherwise>
                    <Execute Statement="ToleranceVT:= TValueType.SpecifiedEx"/>
                    <Execute Statement="ToleranceBounds:= TBoundType.Lower"/>
                  </Otherwise>
                </Choose>
                <Execute Statement="Tolerance:= LocValue"/>
              </When>
              <Otherwise>
                <Execute Statement="ToleranceVT:= TValueType.Error"/>
                <Execute Statement="ErrorTolerance:= Value"/>
              </Otherwise>
            </Choose>
          </On>
          <On Select="TCustomField.ToleranceMax">
            <Choose>
              <When Expression="Clear">
                <Execute Statement="ToleranceVT:= TValueType.Cleared"/>
              </When>
              <When Expression="CapacitorToleranceConv.EStrToDecimalQuantity(Value, LocValue)">
                <Choose>
                  <When Expression="(ToleranceVT = TValueType.SpecifiedEx) and (ToleranceBounds = TBoundType.Lower)">
                    <Execute Statement="ToleranceBounds:= TBoundType.Range"/>
                  </When>
                  <Otherwise>
                    <Execute Statement="ToleranceVT:= TValueType.SpecifiedEx"/>
                    <Execute Statement="ToleranceBounds:= TBoundType.Upper"/>
                  </Otherwise>
                </Choose>
                <Execute Statement="ToleranceUpperBound:= LocValue"/>
              </When>
              <Otherwise>
                <Execute Statement="ToleranceVT:= TValueType.Error"/>
                <Execute Statement="ErrorTolerance:= Value"/>
              </Otherwise>
            </Choose>
          </On>
          <On Select="TCustomField.Technology">
            <Choose>
              <When Expression="Clear">
                <Execute Statement="TechnologyVT:= TValueType.Cleared"/>
              </When>
              <Otherwise>
                <Execute Statement="Found:= CapacitorTechnologyNameRegister.GetItem(Value, LocCapacitorTechnology)"/>
                <Choose>
                  <When Expression="Found">
                    <Execute Statement="Technology:= LocCapacitorTechnology"/>
                    <Execute Statement="TechnologyVT:= TValueType.Specified"/>
                  </When>
                  <Otherwise>
                    <Execute Statement="ErrorTechnology:= Value"/>
                    <Execute Statement="TechnologyVT:= TValueType.Error"/>
                  </Otherwise>
                </Choose>
              </Otherwise>
            </Choose>
          </On>
          <On Select="TCustomField.TechnologySet">
            <Choose>
              <When Expression="Clear">
                <Execute Statement="TechnologyVT:= TValueType.Cleared"/>
              </When>
              <Otherwise>
                <Choose>
                  <When Expression="CapacitorTechnologyNameRegister.GetFlags(Value, LocFlags)">
                    <Execute Statement="TechnologySet:= LocFlags"/>
                    <Execute Statement="TechnologyVT:= TValueType.SpecifiedEx"/>
                    <Execute Statement="TechnologyVT:= TValueType.Cleared" Condition="LocFlags = 0"/>
                  </When>
                  <Otherwise>
                    <Execute Statement="ErrorTechnology:= Value"/>
                    <Execute Statement="TechnologyVT:= TValueType.Error"/>
                  </Otherwise>
                </Choose>
              </Otherwise>
            </Choose>
          </On>
          <!-->->-->
          <Otherwise>
            <Execute Statement="inherited HandleField(CustomField, Name, Value, Clear)"/>
          </Otherwise>
        </Case>
      </Block>
    </Procedure>

    <Function Identifier="TCapacitorSpec.GetValue" VirtualMethod="vmGetValue" Type="Boolean">
      <Parameters>
        <Parameter Identifier="Value" Type="DecimalQuantity" Direction="Output"/>
      </Parameters>
      <Block>
        <Case Expression="CapacitanceVT">
          <On Select="TValueType.Specified, TValueType.SpecifiedByTemplate">
            <Execute Statement="Value:= Capacitance"/>
            <Exit Result="True"/>
          </On>
        </Case>
        <Execute Statement="Result:= False"/>
      </Block>
    </Function>

    <Procedure Identifier="TCapacitorSpec.SetValue" VirtualMethod="vmSetValue">
      <Parameters>
        <Parameter Identifier="Value" Type="DecimalQuantity"/>
      </Parameters>
      <Block>
        <Execute Statement="Capacitance:= Value"/>
        <Execute Statement="CapacitanceVT:= TValueType.Specified"/>
      </Block>
    </Procedure>

    <Procedure Identifier="TCapacitorSpec.ApplyTemplate" VirtualMethod="vmApplyTemplate">
      <Variables>
        <Variable Identifier="locTemplate" Type="TCapacitorSpec"/>
      </Variables>
      <Block>
        <Exit Condition="not Assigned(Template)"/>
        <ConditionalBlock Expression="Template is TCapacitorSpec">
          <Execute Statement="locTemplate:= TCapacitorSpec(Template)"/>
          <!--<-<TComponentSpec.ApplyTemplate-->
          <Case Expression="CapacitanceVT">
            <On Select="TValueType.Unspecified, TValueType.ClearedByTemplate, TValueType.SpecifiedByTemplate, TValueType.ErrorByTemplate">
              <Case Expression="locTemplate.CapacitanceVT">
                <On Select="TValueType.Specified, TValueType.SpecifiedByTemplate">
                  <Execute Statement="Capacitance:= locTemplate.Capacitance"/>
                  <Execute Statement="CapacitanceVT:= TValueType.SpecifiedByTemplate"/>
                </On>
                <On Select="TValueType.SpecifiedEx, TValueType.SpecifiedExByTemplate">
                  <Execute Statement="Capacitance:= locTemplate.Capacitance" Condition="InFlags(locTemplate.CapacitanceBounds, cValidLowerFlags)"/>
                  <Execute Statement="CapacitanceUpperBound:= locTemplate.CapacitanceUpperBound" Condition="InFlags(locTemplate.CapacitanceBounds, cValidUpperFlags)"/>
                  <Execute Statement="CapacitanceBounds:= locTemplate.CapacitanceBounds"/>
                  <Execute Statement="CapacitanceVT:= TValueType.SpecifiedExByTemplate"/>
                </On>
                <On Select="TValueType.Error, TValueType.ErrorByTemplate">
                  <Execute Statement="ErrorCapacitance:= locTemplate.ErrorCapacitance"/>
                  <Execute Statement="CapacitanceVT:= TValueType.ErrorByTemplate"/>
                </On>
              </Case>
            </On>
          </Case>
          <Case Expression="VoltageRatingVT">
            <On Select="TValueType.Unspecified, TValueType.ClearedByTemplate, TValueType.SpecifiedByTemplate, TValueType.ErrorByTemplate">
              <Case Expression="locTemplate.VoltageRatingVT">
                <On Select="TValueType.Specified, TValueType.SpecifiedByTemplate">
                  <Execute Statement="VoltageRating:= locTemplate.VoltageRating"/>
                  <Execute Statement="VoltageRatingVT:= TValueType.SpecifiedByTemplate"/>
                </On>
                <On Select="TValueType.SpecifiedEx, TValueType.SpecifiedExByTemplate">
                  <Execute Statement="VoltageRating:= locTemplate.VoltageRating" Condition="InFlags(locTemplate.VoltageRatingBounds, cValidLowerFlags)"/>
                  <Execute Statement="VoltageRatingUpperBound:= locTemplate.VoltageRatingUpperBound" Condition="InFlags(locTemplate.VoltageRatingBounds, cValidUpperFlags)"/>
                  <Execute Statement="VoltageRatingBounds:= locTemplate.VoltageRatingBounds"/>
                  <Execute Statement="VoltageRatingVT:= TValueType.SpecifiedExByTemplate"/>
                </On>
                <On Select="TValueType.Error, TValueType.ErrorByTemplate">
                  <Execute Statement="ErrorVoltageRating:= locTemplate.ErrorVoltageRating"/>
                  <Execute Statement="VoltageRatingVT:= TValueType.ErrorByTemplate"/>
                </On>
              </Case>
            </On>
          </Case>
          <Case Expression="ToleranceVT">
            <On Select="TValueType.Unspecified, TValueType.ClearedByTemplate, TValueType.SpecifiedByTemplate, TValueType.ErrorByTemplate">
              <Case Expression="locTemplate.ToleranceVT">
                <On Select="TValueType.Specified, TValueType.SpecifiedByTemplate">
                  <Execute Statement="Tolerance:= locTemplate.Tolerance"/>
                  <Execute Statement="ToleranceVT:= TValueType.SpecifiedByTemplate"/>
                </On>
                <On Select="TValueType.SpecifiedEx, TValueType.SpecifiedExByTemplate">
                  <Execute Statement="Tolerance:= locTemplate.Tolerance" Condition="InFlags(locTemplate.ToleranceBounds, cValidLowerFlags)"/>
                  <Execute Statement="ToleranceUpperBound:= locTemplate.ToleranceUpperBound" Condition="InFlags(locTemplate.ToleranceBounds, cValidUpperFlags)"/>
                  <Execute Statement="ToleranceBounds:= locTemplate.ToleranceBounds"/>
                  <Execute Statement="ToleranceVT:= TValueType.SpecifiedExByTemplate"/>
                </On>
                <On Select="TValueType.Error, TValueType.ErrorByTemplate">
                  <Execute Statement="ErrorTolerance:= locTemplate.ErrorTolerance"/>
                  <Execute Statement="ToleranceVT:= TValueType.ErrorByTemplate"/>
                </On>
              </Case>
            </On>
          </Case>
          <Case Expression="TechnologyVT">
            <On Select="TValueType.Unspecified, TValueType.ClearedByTemplate, TValueType.SpecifiedByTemplate, TValueType.SpecifiedExByTemplate, TValueType.ErrorByTemplate">
              <Case Expression="locTemplate.TechnologyVT">
                <On Select="TValueType.Specified, TValueType.SpecifiedByTemplate">
                  <Execute Statement="Technology:= locTemplate.Technology"/>
                  <Execute Statement="TechnologyVT:= TValueType.SpecifiedByTemplate"/>
                </On>
                <On Select="TValueType.SpecifiedExByTemplate, TValueType.SpecifiedEx">
                  <Execute Statement="TechnologySet:= locTemplate.TechnologySet"/>
                  <Execute Statement="TechnologyVT:= TValueType.SpecifiedExByTemplate"/>
                </On>
                <On Select="TValueType.Error, TValueType.ErrorByTemplate">
                  <Execute Statement="ErrorTechnology:= locTemplate.ErrorTechnology"/>
                  <Execute Statement="TechnologyVT:= TValueType.ErrorByTemplate"/>
                </On>
              </Case>
            </On>
          </Case>
          <!-->->-->
        </ConditionalBlock>
        <Execute Statement="inherited ApplyTemplate"/>
      </Block>
    </Procedure>

    <Procedure Identifier="TCapacitorSpec.GetSpecificationValues">
      <Parameters>
        <Parameter Identifier="FormatType" Type="TSpecFormatType"/>
        <Parameter Identifier="Capacitance" Type="string" Direction="Output"/>
        <Parameter Identifier="ESerie" Type="string" Direction="Output"/>
        <Parameter Identifier="VoltageRating" Type="string" Direction="Output"/>
        <Parameter Identifier="Tolerance" Type="string" Direction="Output"/>
        <Parameter Identifier="Technology" Type="string" Direction="Output"/>
        <Parameter Identifier="Footprint" Type="string" Direction="Output"/>
        <Parameter Identifier="PartNumberModel" Type="string" Direction="Output"/>
        <Parameter Identifier="InternalPartNumber" Type="string" Direction="Output"/>
        <Parameter Identifier="ComponentKind" Type="string" Direction="Output"/>
      </Parameters>
      <Block>
        <Variable Identifier="UnitPostFix" Type="TUnitPostFix" Init="TUnitPostFix.Compact"/>
        <Execute Statement="UnitPostFix:= TUnitPostFix.Separated" Condition="FormatType = TSpecFormatType.Name"/>
        <Variable Identifier="Range" Type="string"/>
        <!--<-<TComponentSpec.GetSpecificationValues-->
        <Case Expression="CapacitanceVT">
          <On Select="TValueType.Unspecified, TValueType.Cleared, TValueType.ClearedByTemplate">
            <Execute Statement="Capacitance:= ''"/>
          </On>
          <On Select="TValueType.Specified, TValueType.SpecifiedByTemplate">
            <Execute Statement="Capacitance:= EDecimalQuantityToStr(Self.Capacitance, UnitPostFix)"/>
          </On>
          <On Select="TValueType.SpecifiedEx, TValueType.SpecifiedExByTemplate">
            <Case Expression="CapacitanceBounds">
              <On Select="TBoundType.Lower">
                <Execute Statement="Capacitance:= EDecimalQuantityToStr(Self.Capacitance, UnitPostFix) + #$2026"/>
              </On>
              <On Select="TBoundType.Upper">
                <Execute Statement="Capacitance:= #$2026 + EDecimalQuantityToStr(Self.CapacitanceUpperBound, UnitPostFix)"/>
              </On>
              <On Select="TBoundType.Range">
                <Execute Statement="Capacitance:= EDecimalQuantityToStr(Self.Capacitance, UnitPostFix) + #$2026 + EDecimalQuantityToStr(Self.CapacitanceUpperBound, UnitPostFix)"/>
              </On>
            </Case>
          </On>
          <On Select="TValueType.Error, TValueType.ErrorByTemplate">
            <Execute Statement="Capacitance:= '!' + ErrorCapacitance + '!'"/>
          </On>
        </Case>
        <Case Expression="VoltageRatingVT">
          <On Select="TValueType.Unspecified, TValueType.Cleared, TValueType.ClearedByTemplate">
            <Execute Statement="VoltageRating:= ''"/>
          </On>
          <On Select="TValueType.Specified, TValueType.SpecifiedByTemplate">
            <Execute Statement="VoltageRating:= EDecimalQuantityToStr(Self.VoltageRating, UnitPostFix)"/>
          </On>
          <On Select="TValueType.SpecifiedEx, TValueType.SpecifiedExByTemplate">
            <Case Expression="VoltageRatingBounds">
              <On Select="TBoundType.Lower">
                <Execute Statement="VoltageRating:= EDecimalQuantityToStr(Self.VoltageRating, UnitPostFix) + #$2026"/>
              </On>
              <On Select="TBoundType.Upper">
                <Execute Statement="VoltageRating:= #$2026 + EDecimalQuantityToStr(Self.VoltageRatingUpperBound, UnitPostFix)"/>
              </On>
              <On Select="TBoundType.Range">
                <Execute Statement="VoltageRating:= EDecimalQuantityToStr(Self.VoltageRating, UnitPostFix) + #$2026 + EDecimalQuantityToStr(Self.VoltageRatingUpperBound, UnitPostFix)"/>
              </On>
            </Case>
          </On>
          <On Select="TValueType.Error, TValueType.ErrorByTemplate">
            <Execute Statement="VoltageRating:= '!' + ErrorVoltageRating + '!'"/>
          </On>
        </Case>
        <Case Expression="ToleranceVT">
          <On Select="TValueType.Unspecified, TValueType.Cleared, TValueType.ClearedByTemplate">
            <Execute Statement="Tolerance:= ''"/>
          </On>
          <On Select="TValueType.Specified, TValueType.SpecifiedByTemplate">
            <Execute Statement="Tolerance:= EDecimalQuantityToStr(Self.Tolerance, UnitPostFix)"/>
          </On>
          <On Select="TValueType.SpecifiedEx, TValueType.SpecifiedExByTemplate">
            <Case Expression="ToleranceBounds">
              <On Select="TBoundType.Lower">
                <Execute Statement="Tolerance:= EDecimalQuantityToStr(Self.Tolerance, UnitPostFix) + #$2026"/>
              </On>
              <On Select="TBoundType.Upper">
                <Execute Statement="Tolerance:= #$2026 + EDecimalQuantityToStr(Self.ToleranceUpperBound, UnitPostFix)"/>
              </On>
              <On Select="TBoundType.Range">
                <Execute Statement="Tolerance:= EDecimalQuantityToStr(Self.Tolerance, UnitPostFix) + #$2026 + EDecimalQuantityToStr(Self.ToleranceUpperBound, UnitPostFix)"/>
              </On>
            </Case>
          </On>
          <On Select="TValueType.Error, TValueType.ErrorByTemplate">
            <Execute Statement="Tolerance:= '!' + ErrorTolerance + '!'"/>
          </On>
        </Case>
        <Case Expression="TechnologyVT">
          <On Select="TValueType.Unspecified, TValueType.Cleared, TValueType.ClearedByTemplate">
            <Execute Statement="Technology:= ''"/>
          </On>
          <On Select="TValueType.Specified, TValueType.SpecifiedByTemplate">
            <Execute Statement="Technology:= CapacitorTechnologyAsString(Self.Technology)"/>
          </On>
          <On Select="TValueType.SpecifiedEx, TValueType.SpecifiedExByTemplate">
            <Execute Statement="Technology:= CapacitorTechnologySetAsString(Self.TechnologySet)"/>
          </On>
          <On Select="TValueType.Error, TValueType.ErrorByTemplate">
            <Execute Statement="Technology:= '!' + ErrorTechnology + '!'"/>
          </On>
        </Case>
        <!-->->-->
        <Case Expression="CapacitanceVT">
          <On Select="TValueType.Unspecified, TValueType.Cleared, TValueType.ClearedByTemplate">
            <Execute Statement="ESerie:= ''"/>
          </On>
          <On Select="TValueType.Specified, TValueType.SpecifiedByTemplate">
            <Execute Statement="ESerie:= ESerieOfValue(Self.Capacitance)"/>
          </On>
        </Case>
        <Execute Statement="inherited GetSpecificationValues(FormatType, Footprint, PartNumberModel, InternalPartNumber, ComponentKind)"/>
      </Block>
    </Procedure>

    <Function Identifier="TCapacitorSpec.SpecificationAsString" VirtualMethod="vmSpecificationAsString" Type="string">
      <Parameters>
        <Parameter Identifier="FormatType" Type="TSpecFormatType"/>
        <Parameter Identifier="ReportContext" Type="TSpecReportContext"/>
      </Parameters>
      <Variables>
        <Variable Identifier="Value" Type="string" Init="''"/>
        <Variable Identifier="ESerie" Type="string" Init="''"/>
        <Variable Identifier="VoltageRating" Type="string" Init="''"/>
        <Variable Identifier="Tolerance" Type="string" Init="''"/>
        <Variable Identifier="Technology" Type="string" Init="''"/>
        <Variable Identifier="Footprint" Type="string" Init="''"/>
        <Variable Identifier="PartNumberModel" Type="string" Init="''"/>
        <Variable Identifier="InternalPartNumber" Type="string"/>
        <Variable Identifier="ComponentKind" Type="string" Init="''"/>
      </Variables>
      <Block>
        <Execute Statement="GetSpecificationValues(FormatType, Value, ESerie, VoltageRating, Tolerance, Technology, Footprint, PartNumberModel, InternalPartNumber, ComponentKind)"/>
        <Case Expression="FormatType" Optimalisation="integermapping">
          <On Select="TSpecFormatType.Fixed">
            <Variable Identifier="ColumnManager" Type="TTextColumnManager" Init="ReportContext.ColumnManager"/>
            <Variable Identifier="ColumnOffset" Type="Integer" Init="ReportContext.ColumnOffset"/>
            <Execute Statement="Value:= Value + ' '" Condition="IsNonEmptyString(Value)"/>
            <Execute Statement="ESerie:= ESerie + ' '" Condition="IsNonEmptyString(ESerie)"/>
            <Execute Statement="VoltageRating:= VoltageRating + ' '" Condition="IsNonEmptyString(VoltageRating)"/>
            <Execute Statement="Tolerance:= Tolerance + ' '" Condition="IsNonEmptyString(Tolerance)"/>
            <Execute Statement="Technology:= Technology + ' '" Condition="IsNonEmptyString(Technology)"/>
            <Execute Statement="Footprint:= Footprint + ' '" Condition="IsNonEmptyString(Footprint)"/>
            <Execute Statement="PartNumberModel:= PartNumberModel + ' '" Condition="IsNonEmptyString(PartNumberModel)"/>
            <Execute Statement="InternalPartNumber:= InternalPartNumber + ' '" Condition="IsNonEmptyString(InternalPartNumber)"/>
            <Choose>
              <When Expression="ReportContext.Measure">
                <Execute Statement="ColumnManager.RequestColumnWidth(ColumnOffset + TCapacitorSpecColumns.Value, 1, Length(Value))"/>
                <Execute Statement="ColumnManager.RequestColumnWidth(ColumnOffset + TCapacitorSpecColumns.ESerie, 1, Length(ESerie))"/>
                <Execute Statement="ColumnManager.RequestColumnWidth(ColumnOffset + TCapacitorSpecColumns.VoltageRating, 2, Length(VoltageRating))"/>
                <Execute Statement="ColumnManager.RequestColumnWidth(ColumnOffset + TCapacitorSpecColumns.Tolerance, 1, Length(Tolerance))"/>
                <Execute Statement="ColumnManager.RequestColumnWidth(ColumnOffset + TCapacitorSpecColumns.Technology, 1, Length(Technology))"/>
                <Execute Statement="ColumnManager.RequestColumnWidth(ColumnOffset + TCapacitorSpecColumns.FootPrint, 1, Length(Footprint))"/>
                <Execute Statement="ColumnManager.RequestColumnWidth(ColumnOffset + TCapacitorSpecColumns.PartNumberModel, 1, Length(PartNumberModel))"/>
                <Execute Statement="ColumnManager.RequestColumnWidth(ColumnOffset + TCapacitorSpecColumns.InternalPartNumber, 1, Length(InternalPartNumber))"/>
                <Execute Statement="Result:= ''"/>
              </When>
              <Otherwise>
                <Execute Statement="Result:= Format('%*s%*s%*s%*s%-*s%-*s%-*s%-*s',
                         ColumnManager.GetColumnWidth(ColumnOffset + TCapacitorSpecColumns.Value, 1), Value,
                         ColumnManager.GetColumnWidth(ColumnOffset + TCapacitorSpecColumns.ESerie, 1), ESerie,
                         ColumnManager.GetColumnWidth(ColumnOffset + TCapacitorSpecColumns.VoltageRating, 2), VoltageRating,
                         ColumnManager.GetColumnWidth(ColumnOffset + TCapacitorSpecColumns.Tolerance, 1), Tolerance,
                         ColumnManager.GetColumnWidth(ColumnOffset + TCapacitorSpecColumns.Technology, 1), Technology,
                         ColumnManager.GetColumnWidth(ColumnOffset + TCapacitorSpecColumns.FootPrint, 1), Footprint,
                         ColumnManager.GetColumnWidth(ColumnOffset + TCapacitorSpecColumns.PartNumberModel, 1), PartNumberModel,
                         ColumnManager.GetColumnWidth(ColumnOffset + TCapacitorSpecColumns.InternalPartNumber, 1), InternalPartNumber)"/>
              </Otherwise>
            </Choose>
          </On>
          <On Select="TSpecFormatType.Description">
            <Execute Statement="Result:= ConcatExt(' ', True, Value, Tolerance, VoltageRating, PartNumberModel, InternalPartNumber, Technology, ComponentKind)"/>
          </On>
          <On Select="TSpecFormatType.Name">
            <Execute Statement="Result:= Value"/>
          </On>
        </Case>
      </Block>
    </Function>

    <Function Identifier="TCapacitanceSpecificationIndex.GetKey" VirtualMethod="vmGetKey" Type="Boolean">
      <Parameters>
        <Parameter Identifier="ComponentSpec" Type="TCapacitorSpec"/>
        <Parameter Identifier="Key" Direction="Output"/>
      </Parameters>
      <Block>
        <Execute Statement="Result:= False"/>
        <Case Expression="ComponentSpec.CapacitanceVT" Optimalisation="integermapping">
          <On Select="TValueType.Specified, TValueType.SpecifiedByTemplate">
            <Execute Statement="Result:= True"/>
            <Execute Statement="Key:= ComponentSpec.Capacitance"/>
          </On>
        </Case>
      </Block>
    </Function>

    <Constructor Identifier="TCapacitorCategory.Create">
      <Block>
        <Execute Statement="CapacitanceSpecificationIndex:= TCapacitanceSpecificationIndex.Create(TMappingDecimalQuantityToObject.Create)"/>
      </Block>
    </Constructor>

    <Function Identifier="TCapacitorCategory.IndexSearchSpecifications" VirtualMethod="vmIndexSearchSpecifications" Type="Boolean">
      <Parameters>
        <Parameter Identifier="ComponentSpec" Type="TComponentSpec"/>
        <Parameter Identifier="Specifications" Type="TSpecificationLink" Direction="Output"/>
      </Parameters>
      <Block>
        <Execute Statement="Result:= False"/>
        <Choose>
          <When Expression="CapacitanceSpecificationIndex.GetLinks(ComponentSpec, ComponentSpecHead, Specifications)">
            <Execute Statement="Result:= True"/>
          </When>
        </Choose>
      </Block>
    </Function>

    <Function Identifier="TCapacitorCategory.CreateSpecification" VirtualMethod="vmCreateSpecification" Type="TComponentSpec">
      <Block>
        <Execute Statement="Result:= TCapacitorSpec.Create"/>
      </Block>
    </Function>

    <Function Identifier="TCapacitorCategory.IsValidSpecification" VirtualMethod="vmIsValidSpecification" Type="Boolean">
      <Parameters>
        <Parameter Identifier="Specification" Type="TComponentSpec"/>
      </Parameters>
      <Block>
        <Case Expression="Specification.ComponentKindVT">
          <On Select="TValueType.Specified, TValueType.SpecifiedByTemplate"/>
          <Otherwise>
            <Exit Result="False"/>
          </Otherwise>
        </Case>
        <Case Expression="Specification.ComponentKind">
          <On Select="TComponentKind.Capacitor, TComponentKind.PolarisedCapacitor"/>
          <Otherwise>
            <Exit Result="False"/>
          </Otherwise>
        </Case>
        <Execute Statement="Result:= True"/>
      </Block>
    </Function>


    <Function Identifier="TCapacitorCategory.CompareSpecifications" Type="Integer" VirtualMethod="vmCompareSpecifications">
      <Parameters>
        <Parameter Identifier="A" Type="TCapacitorSpec"/>
        <Parameter Identifier="B" Type="TCapacitorSpec"/>
      </Parameters>
      <Block>
        <Execute Statement="Result:= A.ComponentKind - B.ComponentKind"/>
        <Exit Condition="Result &lt;&gt; 0"/>
        <!--<-<TComponentSpec.CompareSpecifications-->
        <Execute Statement="Result:= CompareStateValueRange(A.ID, A.CapacitanceVT, A.Capacitance, A.CapacitanceUpperBound, A.CapacitanceBounds, B.ID, B.CapacitanceVT, B.Capacitance, B.CapacitanceUpperBound, B.CapacitanceBounds)"/>
        <Exit Condition="Result &lt;&gt; 0"/>
        <Execute Statement="Result:= CompareStateValueRange(A.ID, A.VoltageRatingVT, A.VoltageRating, A.VoltageRatingUpperBound, A.VoltageRatingBounds, B.ID, B.VoltageRatingVT, B.VoltageRating, B.VoltageRatingUpperBound, B.VoltageRatingBounds)"/>
        <Exit Condition="Result &lt;&gt; 0"/>
        <Execute Statement="Result:= CompareStateValueRange(A.ID, A.ToleranceVT, A.Tolerance, A.ToleranceUpperBound, A.ToleranceBounds, B.ID, B.ToleranceVT, B.Tolerance, B.ToleranceUpperBound, B.ToleranceBounds)"/>
        <Exit Condition="Result &lt;&gt; 0"/>
        <Execute Statement="Result:= CompareStateEnumValue(A.ID, A.TechnologyVT, A.Technology, A.TechnologySet, B.ID, B.TechnologyVT, B.Technology, B.TechnologySet)"/>
        <Exit Condition="Result &lt;&gt; 0"/>
        <!-->->-->
        <Execute Statement="Result:= inherited CompareSpecifications(A, B)"/>
      </Block>
    </Function>

    <Procedure Identifier="TCapacitorCategory.LoadTemplatesFromIniFile" VirtualMethod="vmLoadTemplatesFromIniFile">
      <Parameters>
        <Parameter Identifier="Ini" Type="TIniHelper"/>
      </Parameters>
      <Constants>
        <Constant Identifier="sSectionCapacitor" Type="string" Expression="'Template.Capacitor'"/>
        <Constant Identifier="sSectionPolarisedCapacitor" Type="string" Expression="'Template.PolarisedCapacitor'"/>
      </Constants>
      <Block>
        <ConditionalBlock Expression="Ini.Inifile.SectionExists(sSectionCapacitor)">
          <Execute Statement="TemplateCapacitorTHT:= TCapacitorSpec.Create"/>
          <Execute Statement="TemplateCapacitorTHT.LoadFromIniFileSection(Ini, sSectionCapacitor)"/>
        </ConditionalBlock>
        <ConditionalBlock Expression="Ini.Inifile.SectionExists(sSectionPolarisedCapacitor)">
          <Execute Statement="TemplatePolarisedCapacitorTHT:= TCapacitorSpec.Create"/>
          <Execute Statement="TemplatePolarisedCapacitorTHT.LoadFromIniFileSection(Ini, sSectionPolarisedCapacitor)"/>
        </ConditionalBlock>
      </Block>
    </Procedure>

    <Function Identifier="TCapacitorCategory.GetTemplate" VirtualMethod="vmGetTemplate" Type="TComponentSpec">
      <Parameters>
        <Parameter Identifier="Specification" Type="TComponentSpec"/>
      </Parameters>
      <Block>
        <Execute Statement="Result:= ObjNil"/>
        <Case Expression="Specification.ComponentKind">
          <On Select="TComponentKind.Capacitor">
            <Execute Statement="Result:= TemplateCapacitorTHT"/>
          </On>
          <On Select="TComponentKind.PolarisedCapacitor">
            <Execute Statement="Result:= TemplatePolarisedCapacitorTHT"/>
          </On>
        </Case>
      </Block>
    </Function>

    <Function Identifier="TCapacitorCategory.CanExtractTemplateFromIniFile" VirtualMethod="vmCanExtractTemplateFromIniFile" Type="Boolean">
      <Parameters>
        <Parameter Identifier="Ini" Type="TIniHelper"/>
        <Parameter Identifier="ComponentSpec" Type="TComponentSpec" Direction="Output"/>
      </Parameters>
      <Constants>
        <Constant Identifier="cCapacitorSection" Type="string" Expression="'Capacitor'"/>
      </Constants>
      <Block>
        <Execute Statement="Result:= Ini.Inifile.SectionExists(cCapacitorSection)"/>
        <Block Condition="Result">
          <Execute Statement="ComponentSpec:= TCapacitorSpec.Create"/>
          <Execute Statement="ComponentSpec.LoadFromIniFileSection(Ini, cCapacitorSection)"/>
        </Block>
      </Block>
    </Function>

  </Procedures>

</pkg:Library>