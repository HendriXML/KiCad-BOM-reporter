<?xml version="1.0" encoding="utf-8"?>
<pkg:Program xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xmlns="urn:schemas-www-wisware.nl-xmlscripting"
            xmlns:pkg="urn:schemas-www-wisware.nl-scriptingpackages"
            xmlns:sys="urn:schemas-www-wisware.nl-xmlscripting"
            xmlns:msx="urn:schemas-www-wisware.nl-xmlscripting-xml"
            xmlns:fil="urn:schemas-www-wisware.nl-xmlscripting-filemanagement"
            xmlns:syu="urn:schemas-www-wisware.nl-xmlscripting-sysutils"
            xmlns:reg="urn:schemas-www-wisware.nl-xmlscripting-registry"
            xmlns:indx="urn:schemas-www-wisware.nl-xmlscripting-index"
            xmlns:rep="urn:schemas-www-wisware.nl-xmlscripting-report"
            xmlns:sts="urn:schemas-www-wisware.nl-xmlscripting-showstatus"
            xmlns:ado="urn:schemas-www-wisware.nl-xmlscripting-ado"
            xmlns:lil="urn:schemas-www-wisware.nl-xmlscripting-linkedlist"
            xmlns:stm="urn:schemas-www-wisware.nl-xmlscripting-statemanagement"
            xsi:schemaLocation="urn:schemas-www-wisware.nl-scriptingpackages ../XmlSchemas.Common.XmlScript/XMLScripting.Packages.xsd">
  <pkg:ReportTargets Cached="true">
    <pkg:Target Identifier="Info" Description="Process info"/>
    <pkg:Target Identifier="Report" Description="BOM report"/>
    <pkg:Target Identifier="DesignatorReport" Description="Designator report"/>
    <pkg:Target Identifier="StorageLocationReport" Description="Storage location report"/>
    <pkg:Target Identifier="StockReport" Description="Partkeepr components"/>
    <pkg:Target Identifier="ReportEEVBlog" Description="BOM report - EEVBlog"/>
    <pkg:Target Identifier="ReportDokuWiki" Description="BOM report - DokuWiki"/>
    <pkg:Target Identifier="IniFileEcho" Description="Configuration echo"/>
    <pkg:TargetAlias TargetIdentifier="Info" Alias="ElectronicsTasks"/>
  </pkg:ReportTargets>
  <pkg:Config xml:space="preserve">
[BillOfMaterials.DetermineBomCount]
;BomCount = 1

[Database]
;ConnectionString = Provider=MSDASQL.1;Persist Security Info=False;Data Source=PartKeepr

[SymbolMappingPath]
;SymbolMappingDirectory = ..\Resources.Project.ComponentMappings

[BomFilename]
BomFilename=..\Resources.Project\ESeriesBOM.xml

[GlobalConfig]
;HideSpecs=ESerieOfValue, ResistorMaxAmpVolt, ZenerDiodeMaxAmp, Footprint
;HideSpecs=

;SheetInfo=None|Root|All
;SheetInfo=All

MaxShowResistorVoltage=230V

;Defaults to system
;UiDecimalSeparator=,

;SeperateComponents=0|1
;SeperateComponents=1

;SkipFootprintMatching=0|1
;SkipFootprintMatching=0

[ElectronicsTasks.CombinationTarget]
Value	= 123.0 Ω ± 2%

[ComponentCombinations.Stock]
;UseStock=No|Source|SourceAndMatch
;UseStock=SourceAndMatch

[CombinationTarget.Input.Resistor]
ComponentKind=Resistor
PowerRating = 250 mW
Tolerance.Max = 2%

[CombinationTarget.Input.Capacitor]
;ComponentKind=Capacitor|PolarisedCapacitor
ComponentKind=Capacitor
;Tolerance.Max = 2%

[CombinationTarget.Input.Inductor]
ComponentKind=Inductor
;Tolerance.Max = 2%

[ElectronicsTasks.ComponentCombinations.Init]
;Source=None|InputTab|TextFile
;Source=None

[ElectronicsTasks.CombinationParameters]
;UseESeries=0|1
;UseESeries=0
;Granularity=ExtraCoarse|Coarse|Fine|ExtraFine
;Granularity=Fine
;MaxESerie=E1|E3|E6|E12|E24|E48|E96|E192
;MaxESerie=E24
;Refine=0|1
;Refine=1
;Tolerance=2%

[Template.Resistor]
PowerRating = 250 mW
Tolerance.Max = 2%
Technology = metal film

[Template.PolarisedCapacitor]
;Tolerance.Max = 10%
;VoltageRating.Min = 50 V
Technology = aluminum electrolytic

[Template.Capacitor]
;Tolerance.Max = 10%
;VoltageRating.Min = 50 V
Technology = ceramic

[Template.ZenderDiode]
;Tolerance.Max = 10%
PowerRating.Min = 1 W

[Template.Fuse]
VoltageRating.Min = 250 V

[Database.References.UnmatchedComponentsStorageID]
ID = -1

[Database.References.ExportProjectID]
ID = -1
</pkg:Config>
  <Imports>
    <Import Identifier="EnumerationUtils" Filename="..\Script.Common.System\Enumeration utils.xml"/>

    <Import Identifier="ScienceUnits" Filename="..\Script.Common.Science\Science units.xml"/>
    <Import Identifier="ScienceQuantityUtils" Filename="..\Script.Common.Science\Science quantity utils.xml"/>

    <Import Identifier="ScienceIniHelper" Filename="..\Script.Common.Generic\Science ini helper.xml"/>
    <Import Identifier="TaskReportStrings" Filename="..\Script.Common.Generic\Task report strings |languageCode|.xml"/>
    <Import Identifier="TaskUtils" Filename="..\Script.Common.Generic\Task utils.xml"/>
    <Import Identifier="DokuWikiUtils" Filename="..\Script.Common.Generic\DokuWiki utils.xml"/>
    <Import Identifier="SimpleMachinesUtils" Filename="..\Script.Common.Generic\Simple machines utils.xml"/>

    <Import Identifier="ElectronicsStrings" Filename="..\Script.Common.Electronics\Electronics strings |LanguageCode|.xml"/>
    <Import Identifier="ElectronicsEnumerations" Filename="..\Script.Common.Electronics\Electronics enumerations.xml"/>
    <Import Identifier="ElectronicsUtils" Filename="..\Script.Common.Electronics\Electronics utils.xml"/>
    <Import Identifier="ElectronicsReportUtils" Filename="..\Script.Common.Electronics\Electronics report utils.xml"/>
    <Import Identifier="ElectronicsTasks" Filename="..\Script.Common.Electronics\Electronics tasks.xml"/>

    <Import Identifier="BomStrings" Filename="..\Script.Project.Libs\BOM strings |LanguageCode|.xml"/>
    <Import Identifier="BomEnumerations" Filename="..\Script.Project.Libs\BOM enumerations.xml"/>
    <Import Identifier="BomClasses" Filename="..\Script.Project.Libs\BOM classes.xml"/>
    <Import Identifier="NamedComponentClasses" Filename="..\Script.Project.Libs\BOM named component classes.xml"/>
    <Import Identifier="DeviceFunctions" Filename="..\Script.Project.Libs\BOM device functions.xml"/>
    <Import Identifier="DeviceFunctionDescriptions" Filename="..\Script.Project.Libs\BOM device function descriptions |LanguageCode|.xml"/>
    <Import Identifier="MultiFunctionComponentClasses" Filename="..\Script.Project.Libs\BOM multi function component classes.xml"/>
    <Import Identifier="IntegratedCircuitClasses" Filename="..\Script.Project.Libs\BOM integrated circuit classes.xml"/>
    <Import Identifier="ResistorClasses" Filename="..\Script.Project.Libs\BOM resistor classes.xml"/>
    <Import Identifier="CapacitorClasses" Filename="..\Script.Project.Libs\BOM capacitor classes.xml"/>
    <Import Identifier="InductorClasses" Filename="..\Script.Project.Libs\BOM inductor classes.xml"/>
    <Import Identifier="ZenerDiodeClasses" Filename="..\Script.Project.Libs\BOM zener diode classes.xml"/>
    <Import Identifier="ConnectorClasses" Filename="..\Script.Project.Libs\BOM connector classes.xml"/>
    <Import Identifier="DiodeClasses" Filename="..\Script.Project.Libs\BOM diode classes.xml"/>
    <Import Identifier="FuseClasses" Filename="..\Script.Project.Libs\BOM fuse classes.xml"/>
    <Import Identifier="CategoryContainer" Filename="..\Script.Project.Libs\BOM category container classes.xml"/>
    <Import Identifier="StockManager" Filename="..\Script.Project.Libs\BOM stock manager.xml"/>
    <Import Identifier="CalculatedSpecificationsClasses" Filename="..\Script.Project.Libs\BOM calculated specifications classes.xml"/>
    <Import Identifier="BillOfMaterialClass" Filename="..\Script.Project.Libs\BOM bill of material classes.xml"/>
    <Import Identifier="PartKeeprProjectExport" Filename="..\Script.Project.Libs\BOM partkeepr project export.xml"/>
  </Imports>

  <Uses>
    <Use Identifier="EnumerationUtils"/>
    <Use Identifier="ScienceUnits"/>
    <Use Identifier="ScienceQuantityUtils"/>
    <Use Identifier="ScienceIniHelper"/>
    <Use Identifier="TaskReportStrings"/>
    <Use Identifier="TaskUtils"/>
    <Use Identifier="ElectronicsUtils"/>
    <Use Identifier="ElectronicsStrings"/>
    <Use Identifier="ElectronicsReportUtils"/>
    <Use Identifier="ElectronicsEnumerations"/>
    <Use Identifier="ElectronicsTasks"/>
    <Use Identifier="DokuWikiUtils"/>
    <Use Identifier="SimpleMachinesUtils"/>
    <Use Identifier="BomStrings"/>
    <Use Identifier="BomEnumerations"/>
    <Use Identifier="BomClasses"/>
    <Use Identifier="ResistorClasses"/>
    <Use Identifier="CategoryContainer"/>
    <Use Identifier="BillOfMaterialClass"/>
    <Use Identifier="StockManager"/>
    <Use Identifier="PartKeeprProjectExport"/>
    <Use Identifier="CalculatedSpecificationsClasses"/>
  </Uses>

  <Type>
    <DataClass Identifier="TRootTaskInfo">
      <Field Identifier="Unattended" Type="Boolean"/>
      <Field Identifier="TaskSelectionFlags" Type="TFlags"/>
    </DataClass>

    <DataClass Identifier="TDatabase">
      <Field Identifier="DBConnection" Type="Connection"/>
    </DataClass>

    <DataClass Identifier="TPathInfo">
      <Field Identifier="Path" Type="string"/>
    </DataClass>

    <DataClass Identifier="TFileInfo">
      <Field Identifier="Filename" Type="string"/>
    </DataClass>

    <DataClass Identifier="TIdInfo">
      <Field Identifier="ID" Type="Integer"/>
    </DataClass>

    <DataClass Identifier="TAvailableValuesSource">
      <Field Identifier="SpecificationTemplate" Type="TComponentSpec"/>
      <Field Identifier="ComponentCategory" Type="TComponentCategory"/>
    </DataClass>

  </Type>

  <Constants>
    <Constant Identifier="connsPartKeepr" Type="string" Expression="'Provider=MSDASQL.1;Persist Security Info=False;Data Source=PartKeepr;Initial Catalog=PartKeepr'"/>
    <Constant Identifier="ScriptVersion" Type="string" Expression="'7.1.3.0.2.68'"/>
  </Constants>

  <Variables>
    <Variable Identifier="PerfFreq" Type="CyclesPerSecondQ" Init="QueryPerformanceFrequency ~ ⌠cps⌡ ± 1.0⌠cps⌡"/>
  </Variables>

  <Procedures>

    <Task Identifier="ScriptPath" SelfType="TPathInfo" SelfConstruction="TPathInfo.Create">
      <Init>
        <Task.Description Expression="sScriptPathTD"/>
      </Init>
      <Block>
        <Execute Statement="Path:= ExtractFilePath(ScriptFilename)"/>
        <rep:Reporter.LabelValue Label="sPath" Value="Path" Target="Info"/>
        <Task.MarkHandled/>
      </Block>
    </Task>

    <Task Identifier="IniHelper" SelfType="TScienceIniHelper" SelfConstruction="TScienceIniHelper.Create(ConfigInifile, True)">
      <Init>
        <Task.Description Expression="'IniHelper'"/>
      </Init>
      <Block>
        <Execute Statement="Section(Task.Name)"/>
        <Execute Statement="EchoEnumComment('ComponentKind', ComponentKindNameRegister, ', ')"/>
        <Execute Statement="EchoEnumComment('CustomField', CustomFieldNameRegister, ', ')"/>
        <Execute Statement="EchoEnumComment('ResistorTechnology', ResistorTechnologyNameRegister, ', ')"/>
        <Execute Statement="EchoEnumComment('CapacitorTechnology', CapacitorTechnologyNameRegister, ', ')"/>
        <Execute Statement="EchoEnumComment('BreakSpeed', BreakSpeedNameRegister, ', ')"/>
        <Execute Statement="EchoEnumComment('DeviceFunction', DeviceFunctionNameRegister, ', ')"/>
        <Task.MarkHandled/>
      </Block>
    </Task>

    <Task Identifier="SymbolMappingPath" SelfType="TPathInfo" SelfConstruction="TPathInfo.Create">
      <Init>
        <Task.Description Expression="sSymbolMappingPathTD"/>
        <Task.AddDependency Task="ScriptPath" Result="ScriptPath" ResultType="TPathInfo"/>
        <Task.AddDependency Task="IniHelper" Result="Ini" ResultType="TScienceIniHelper"/>
      </Init>
      <Block>
        <Execute Statement="Ini.Section(Task.Name)"/>
        <Execute Statement="Path:= GetFilenameFromBase(ScriptPath.Path, Ini.ReadString('SymbolMappingDirectory', '..\Resources.Project.ComponentMappings'))"/>
        <rep:Reporter.LabelValue Label="sPath" Value="Path" Target="Info"/>
        <Task.MarkHandled/>
      </Block>
    </Task>

    <Task Identifier="BomFilename" SelfType="TFileInfo" SelfConstruction="TFileInfo.Create">
      <Init>
        <Task.Description Expression="sBomFilenameTD"/>
        <Task.AddDependency Task="ScriptPath" Result="ScriptPath" ResultType="TPathInfo"/>
        <Task.AddDependency Task="IniHelper" Result="Ini" ResultType="TScienceIniHelper"/>
      </Init>
      <Block>
        <Variable Identifier="BomFilename" Type="string" Init="''"/>
        <Block Condition="not CommandlineVariables.GetValue('BomFilename', BomFilename)">
          <Execute Statement="Ini.Section(Task.Name)"/>
          <Execute Statement="BomFilename:= Ini.ReadString('BomFilename', BomFilename)"/>
        </Block>
        <Execute Statement="Filename:= GetFilenameFromBase(ScriptPath.Path, BomFilename)"/>
        <rep:Reporter.LabelValue Label="sFilename" Value="Filename" Target="Info"/>
        <Task.MarkHandled/>
      </Block>
    </Task>

    <Task Identifier="CalculatedSpecificationsFilename" SelfType="TFileInfo" SelfConstruction="TFileInfo.Create">
      <Init>
        <Task.Description Expression="sCalculatedSpecificationsFilenameTD"/>
        <Task.AddDependency Task="BomFilename" Result="BomFilename" ResultType="TFileInfo"/>
      </Init>
      <Block>
        <Execute Statement="Filename:= ChangeFileExt(BomFilename.Filename, '-Calculated.xml')"/>
        <rep:Reporter.LabelValue Label="sFilename" Value="Filename" Target="Info"/>
        <Task.MarkHandled/>
      </Block>
    </Task>

    <Task Identifier="GlobalConfig">
      <Type>
        <Enumeration Identifier="THideSpec" Elements="ESerieOfValue, ResistorMaxAmpVolt, ZenerDiodeMaxAmp, Footprint, Sheets, CompSep"/>
      </Type>
      <Init>
        <Task.Description Expression="sGlobalConfigTD"/>
        <Task.AddDependency Task="IniHelper" Result="Ini" ResultType="TScienceIniHelper"/>
      </Init>
      <Block>
        <Execute Statement="Ini.Section(Task.Name)"/>
        <Execute Statement="UiDecimalSeparator:= Ini.ReadChar('DecimalSeparator', UiDecimalSeparator)"/>
        <Execute Statement="SheetInfo:= TSheetInfo.All"/>
        <Variable Identifier="HideSpecs" Type="TFlags" Init="0"/>
        <Variable Identifier="HideSpecsS" Type="string"/>
        <Variable Identifier="SheetInfoS" Type="string"/>
        <Choose>
          <When Expression="not CommandlineVariables.GetValue('HideSpecs', HideSpecsS)">
            <Execute Statement="HideSpecs:= Ini.ReadEnumFlags('HideSpecs', HideSpecs, HideSpecNameRegister)"/>
          </When>
          <When Expression="not HideSpecNameRegister.GetFlags(HideSpecsS, HideSpecs)">
            <Execute Statement="HideSpecs:= 0"/>
            <rep:Reporter.Information Text="'Invalid hide spec'" Markup="Error"/>
          </When>
          <Otherwise>
          </Otherwise>
        </Choose>
        <Choose>
          <When Expression="not CommandlineVariables.GetValue('SheetInfo', SheetInfoS)">
            <Execute Statement="SheetInfo:= Ini.ReadEnum('SheetInfo', SheetInfo, SheetInfoNameRegister)"/>
          </When>
          <When Expression="not SheetInfoNameRegister.GetItem(SheetInfoS, SheetInfo)">
            <Execute Statement="SheetInfo:= TSheetInfo.All"/>
            <rep:Reporter.Information Text="'Invalid hide spec'" Markup="Error"/>
          </When>
          <Otherwise>
          </Otherwise>
        </Choose>
        <Execute Statement="HideESerieOfValue:= InFlags(THideSpec.ESerieOfValue, HideSpecs)"/>
        <Execute Statement="HideResistorMaxAmpVolt:= InFlags(THideSpec.ResistorMaxAmpVolt, HideSpecs)"/>
        <Execute Statement="HideZenerDiodeMaxAmp:= InFlags(THideSpec.ZenerDiodeMaxAmp, HideSpecs)"/>
        <Execute Statement="HideFootprint:= InFlags(THideSpec.Footprint, HideSpecs)"/>

        <Execute Statement="SeperateComponents:= Ini.ReadBool('SeperateComponents', SeperateComponents)"/>
        <Execute Statement="SkipFootprintMatching:= Ini.ReadBool('SkipFootprintMatching', SkipFootprintMatching)"/>
        <Execute Statement="MaxShowResistorVoltage:= Ini.ReadVoltage('MaxShowResistorVoltage', MaxShowResistorVoltage)"/>
        <Task.MarkHandled/>
      </Block>
    </Task>

    <Task Identifier="Database" SelfType="TDatabase" SelfConstruction="TDatabase.Create">
      <Init>
        <Task.Description Expression="sPartkeeprDatabaseTD"/>
        <Task.AddDependency Task="IniHelper" Result="Ini" ResultType="TScienceIniHelper"/>
      </Init>
      <Block>
        <TryExcept>
          <Try>
            <Variable Identifier="LocDBConnection" Type="Connection"/>
            <Execute Statement="Ini.Section(Task.Name)"/>
            <Variable Identifier="ConnectionString" Type="string" Init="Ini.ReadString('ConnectionString', 'Provider=MSDASQL.1;Persist Security Info=False;Data Source=PartKeepr')"/>
            <rep:Reporter.LabelValue Label="'ConnectionString'" Value="ConnectionString" Target="Info"/>
            <ado:Connection.Create Connection="LocDBConnection"/>
            <ado:Connection.Open ConnectionString="ConnectionString" Connection="LocDBConnection"/>
            <Execute Statement="DBConnection:= LocDBConnection"/>
            <Task.MarkHandled/>
          </Try>
          <Except>
            <On Identifier="E" ClassType="Exception">
              <rep:Reporter.Information Text="E.Message" Markup="Error" Target="Info"/>
              <Task.MarkFailed/>
            </On>
            <Otherwise>
              <Task.MarkFailed/>
            </Otherwise>
          </Except>
        </TryExcept>
      </Block>
      <Finalization>
        <ado:Connection.Close Connection="DBConnection" Condition="Assigned(DBConnection)"/>
      </Finalization>
    </Task>

    <Task Identifier="Database.References.ExportProjectID" SelfType="TIdInfo" SelfConstruction="TIdInfo.Create">
      <Init>
        <Task.Description Expression="sDatabaseExportProjectIdTD"/>
        <Task.AddDependency Task="IniHelper" Result="Ini" ResultType="TScienceIniHelper"/>
      </Init>
      <Block>
        <Execute Statement="Ini.Section(Task.Name)"/>
        <Execute Statement="ID:= Ini.ReadInteger('ID', -1)"/>
        <rep:Reporter.LabelValue Label="'ExportProjectID'" Value="IntToStr(ID)" Target="Info"/>
        <Task.Mark Success="ID &lt;&gt; -1"/>
      </Block>
    </Task>

    <Task Identifier="Database.References.UnmatchedComponentsStorageID" SelfType="TIdInfo" SelfConstruction="TIdInfo.Create">
      <Init>
        <Task.Description Expression="sDatabaseUnmatchedComponentsStorageIdTD"/>
        <Task.AddDependency Task="IniHelper" Result="Ini" ResultType="TScienceIniHelper"/>
      </Init>
      <Block>
        <Execute Statement="Ini.Section(Task.Name)"/>
        <Execute Statement="ID:= Ini.ReadInteger('ID', -1)"/>
        <rep:Reporter.LabelValue Label="'ID'" Value="IntToStr(ID)" Target="Info"/>
        <Task.Mark Success="ID &lt;&gt; -1"/>
      </Block>
    </Task>

    <Task Identifier="BillOfMaterials" SelfType="TBillOfMaterials" SelfConstruction="TBillOfMaterials.Create">
      <Init>
        <Task.Description Expression="sBillOfMaterialsTD"/>
      </Init>
      <Block>
        <Task.MarkHandled/>
      </Block>
    </Task>

    <Task Identifier="BillOfMaterials.LoadTemplatesFromIniFile">
      <Init>
        <Task.Description Expression="sBillOfMaterialsLoadTemplatesFromIniFileTD"/>
        <Task.AddDependency Task="BillOfMaterials" Result="BillOfMaterials" ResultType="TBillOfMaterials"/>
        <Task.AddDependency Task="IniHelper" Result="Ini" ResultType="TScienceIniHelper"/>
      </Init>
      <Block>
        <Execute Statement="BillOfMaterials.LoadTemplatesFromIniFile(Ini)"/>
        <Task.MarkHandled/>
      </Block>
    </Task>

    <Task Identifier="BillOfMaterials.LoadBomFile">
      <Init>
        <Task.Description Expression="sBillOfMaterialsLoadBomFileTD"/>
        <Task.AddDependency Task="BillOfMaterials" Result="BillOfMaterials" ResultType="TBillOfMaterials"/>
        <Task.AddDependency Task="BomFilename" Result="BomFilename" ResultType="TFileInfo"/>
        <Task.AddDependency Task="LoadSymbolMappings"/>
        <Task.AddDependency Task="BillOfMaterials.LoadTemplatesFromIniFile"/>
      </Init>
      <Block>
        <Execute Statement="BillOfMaterials.LoadFromFile(BomFilename.Filename)"/>
        <Task.MarkHandled/>
      </Block>
    </Task>

    <Task Identifier="CalculatedSpecifications" SelfType="TCalculatedSpecifications" SelfConstruction="TCalculatedSpecifications.Create">
      <Init>
        <Task.Description Expression="sCalculatedSpecificationsTD"/>
        <Task.AddDependency Task="CalculatedSpecificationsFilename" Result="CalculatedSpecificationsFilename" ResultType="TFileInfo"/>
      </Init>
      <Block>
        <rep:Reporter.DefaultTarget Identifier="Info"/>
        <Block Condition="FileExists(CalculatedSpecificationsFilename.Filename)">
          <Execute Statement="LoadFromFile(CalculatedSpecificationsFilename.Filename)"/>
          <Task.MarkHandled/>
        </Block>
      </Block>
    </Task>

    <Task Identifier="Report.BomOrderPicking">
      <Init>
        <Task.Description Expression="sReportReportOrderPickingTD"/>
        <Task.AddDependency Task="GlobalConfig"/>
        <Task.AddDependency Task="BillOfMaterials" Result="BillOfMaterials" ResultType="TBillOfMaterials"/>
        <Task.AddDependency Task="StockManager" Result="StockManager" ResultType="TStockManager"/>
        <Task.AddDependency Task="BillOfMaterials.AssignStockComponents"/>
        <Task.AddDependency Task="BillOfMaterials.DetermineBomCount"/>
      </Init>
      <Block>
        <rep:Reporter.DefaultTarget Identifier="StorageLocationReport"/>
        <Execute Statement="BillOfMaterials.ReportOrderPicking(StockManager)"/>
        <Task.MarkHandled/>
      </Block>
    </Task>

    <Task Identifier="StockManager" SelfType="TStockManager" SelfConstruction="TStockManager.Create">
      <Init>
        <Task.Description Expression="sStockManagerTD"/>
      </Init>
      <Block>
        <Task.MarkHandled/>
      </Block>
    </Task>

    <Task Identifier="StockManager.ReadingStock">
      <Init>
        <Task.Description Expression="sReadingStockTD"/>
        <Task.AddDependency Task="Database" Result="Database" ResultType="TDatabase"/>
        <Task.AddDependency Task="LoadKnownUnits"/>
        <Task.AddDependency Task="StockManager" Result="StockManager" ResultType="TStockManager"/>
      </Init>
      <Block>
        <Execute Statement="StockManager.LoadFromDB(Database.DBConnection)"/>
        <Task.MarkHandled/>
      </Block>
    </Task>

    <Task Identifier="StockManager.ConsolidateSpecifications">
      <Init>
        <Task.Description Expression="sStockManagerConsolidateSpecificationsTD"/>
        <Task.AddDependency Task="StockManager" Result="StockManager" ResultType="TStockManager"/>
        <Task.AddDependency Task="StockManager.ReadingStock"/>
      </Init>
      <Block>
        <Execute Statement="StockManager.ConsolidateSpecifications"/>
        <Task.MarkHandled/>
      </Block>
    </Task>

    <Task Identifier="BillOfMaterials.ConsolidateSpecifications">
      <Init>
        <Task.Description Expression="sBillOfMaterialsConsolidateSpecificationsTD"/>
        <Task.AddDependency Task="BillOfMaterials" Result="BillOfMaterials" ResultType="TBillOfMaterials"/>
        <Task.AddDependency Task="BillOfMaterials.LoadBomFile"/>
      </Init>
      <Block>
        <Execute Statement="BillOfMaterials.ConsolidateSpecifications"/>
        <Task.MarkHandled/>
      </Block>
    </Task>

    <Task Identifier="BillOfMaterials.DetermineBomCount">
      <Init>
        <Task.Description Expression="sBillOfMaterialsDetermineBomCountTD"/>
        <Task.AddDependency Task="BillOfMaterials" Result="BillOfMaterials" ResultType="TBillOfMaterials"/>
        <Task.AddDependency Task="IniHelper" Result="Ini" ResultType="TScienceIniHelper"/>
      </Init>
      <Block>
        <Variable Identifier="BomCountS" Type="string" Init="''"/>
        <Variable Identifier="BomCount" Type="Integer" Init="1"/>
        <Choose>
          <When Expression="CommandlineVariables.GetValue('BomCount', BomCountS)" >
            <Execute Statement="BomCount:= StrToInt(BomCountS)"/>
          </When>
          <Otherwise>
            <Execute Statement="Ini.Section(Task.Name)"/>
            <Execute Statement="BomCount:= Ini.ReadInteger('BomCount', BomCount)"/>
          </Otherwise>
        </Choose>
        <rep:Reporter.LabelValue Label="sCountField" Value="IntToStr(BomCount)" Target="Info"/>
        <Execute Statement="BillOfMaterials.BomCount:= BomCount"/>
        <Task.MarkHandled/>
      </Block>
    </Task>

    <Task Identifier="BillOfMaterials.ProcessDesignators">
      <Init>
        <Task.Description Expression="sBillOfMaterialsProcessDesignatorsTD"/>
        <Task.AddDependency Task="BillOfMaterials" Result="BillOfMaterials" ResultType="TBillOfMaterials"/>
        <Task.AddDependency Task="BillOfMaterials.ConsolidateSpecifications"/>
        <Task.AddDependency Task="BillOfMaterials.DetermineBomCount"/>
      </Init>
      <Block>
        <Execute Statement="BillOfMaterials.ProcessDesignators"/>
        <Task.MarkHandled/>
      </Block>
    </Task>

    <Task Identifier="BillOfMaterials.AssignStockComponents">
      <Init>
        <Task.Description Expression="sBillOfMaterialsAssignStockComponentsTD"/>
        <Task.AddDependency Task="BillOfMaterials" Result="BillOfMaterials" ResultType="TBillOfMaterials"/>
        <Task.AddDependency Task="BillOfMaterials.ProcessDesignators"/>
        <Task.AddDependency Task="StockManager" Result="StockManager" ResultType="TStockManager"/>
        <Task.AddDependency Task="StockManager.ConsolidateSpecifications"/>
      </Init>
      <Block>
        <Execute Statement="BillOfMaterials.AssignStockComponents(StockManager)"/>
        <Task.MarkHandled/>
      </Block>
    </Task>

    <Task Identifier="LoadSymbolMappings" SelfType="TDatabase" SelfConstruction="TDatabase.Create">
      <Init>
        <Task.Description Expression="sLoadSymbolMappingsTD"/>
        <Task.AddDependency Task="SymbolMappingPath" Result="SymbolMappingPath" ResultType="TPathInfo"/>
      </Init>
      <Block>
        <Execute Statement="LoadSymbolMappings(SymbolMappingPath.Path)"/>
        <Task.MarkHandled/>
      </Block>
    </Task>

    <Task Identifier="LoadKnownUnits" SelfType="TDatabase" SelfConstruction="TDatabase.Create">
      <Init>
        <Task.Description Expression="sLoadKnownUnitsTD"/>
        <Task.AddDependency Task="Database" Result="Database" ResultType="TDatabase"/>
      </Init>
      <Block>
        <Execute Statement="ReadKnownUnits(Database.DBConnection)"/>
        <Task.MarkHandled/>
      </Block>
    </Task>

    <Task Identifier="Report.StorageLocations">
      <Init>
        <Task.Description Expression="sReportStorageLocationsTD"/>
        <Task.AddDependency Task="Database" Result="Database" ResultType="TDatabase"/>
      </Init>
      <Block>
        <rep:Reporter.DefaultTarget Identifier="Info"/>
        <Execute Statement="ReportStorageLocations(Database.DBConnection)"/>
        <Task.MarkHandled/>
      </Block>
    </Task>

    <Task Identifier="Update.StorageLocations">
      <Init>
        <Task.AddDependency Task="Database" Result="Database" ResultType="TDatabase"/>
      </Init>
      <Block>
        <rep:Reporter.DefaultTarget Identifier="Info"/>
        <Execute Statement="UpdateStorageLocations(Database.DBConnection)"/>
        <Task.MarkHandled/>
      </Block>
    </Task>

    <Task Identifier="Report.PartKeeprProjects">
      <Init>
        <Task.Description Expression="sReportPartKeeprProjectsTD"/>
        <Task.AddDependency Task="Database" Result="Database" ResultType="TDatabase"/>
      </Init>
      <Block>
        <rep:Reporter.DefaultTarget Identifier="Info"/>
        <Execute Statement="ReportPartKeeprProjects(Database.DBConnection)"/>
        <Task.MarkHandled/>
      </Block>
    </Task>

    <Task Identifier="Report.Stock">
      <Init>
        <Task.Description Expression="sReportStockTD"/>
        <Task.AddDependency Task="GlobalConfig"/>
        <Task.AddDependency Task="StockManager" Result="StockManager" ResultType="TStockManager"/>
        <Task.AddDependency Task="StockManager.ConsolidateSpecifications"/>
      </Init>
      <Block>
        <rep:Reporter.DefaultTarget Identifier="StockReport"/>
        <Execute Statement="StockManager.Report"/>
        <Task.MarkHandled/>
      </Block>
    </Task>

    <Task Identifier="UpdateDB.MatchUnmatchedSchemaComponentsToCategories">
      <Init>
        <Task.Description Expression="sMatchUnmatchedSchemaComponentsToCategoriesTD"/>
        <Task.AddDependency Task="GlobalConfig"/>
        <Task.AddDependency Task="Database" Result="Database" ResultType="TDatabase"/>
        <Task.AddDependency Task="BillOfMaterials" Result="BillOfMaterials" ResultType="TBillOfMaterials"/>
        <Task.AddDependency Task="BillOfMaterials.AssignStockComponents" IgnoreFailure="True"/>
        <Task.AddDependency Task="StockManager" Result="StockManager" ResultType="TStockManager"/>
        <Task.AddDependency Task="Database.References.UnmatchedComponentsStorageID" Result="DatabaseUnmatchedComponentsStorageID" ResultType="TIdInfo"/>
      </Init>
      <Block>
        <rep:Reporter.DefaultTarget Identifier="Info"/>
        <Execute Statement="MatchUnmatchedSchemaComponentsToCategories(Database.DBConnection, BillOfMaterials, StockManager, True, DatabaseUnmatchedComponentsStorageID.ID)"/>
        <Task.MarkHandled/>
      </Block>
    </Task>

    <Task Identifier="UpdateDB.ChangeProjectParts">
      <Init>
        <Task.Description Expression="sUpdateDBChangeProjectPartsTD"/>
        <Task.AddDependency Task="GlobalConfig"/>
        <Task.AddDependency Task="Database" Result="Database" ResultType="TDatabase"/>
        <Task.AddDependency Task="BillOfMaterials" Result="BillOfMaterials" ResultType="TBillOfMaterials"/>
        <Task.AddDependency Task="BillOfMaterials.DetermineBomCount"/>
        <Task.AddDependency Task="BillOfMaterials.AssignStockComponents" IgnoreFailure="True"/>
        <Task.AddDependency Task="StockManager" Result="StockManager" ResultType="TStockManager"/>
        <Task.AddDependency Task="Database.References.ExportProjectID" Result="DatabaseExportProjectID" ResultType="TIdInfo"/>
        <Task.AddDependency Task="Database.References.UnmatchedComponentsStorageID" Result="DatabaseUnmatchedComponentsStorageID" ResultType="TIdInfo"/>
      </Init>
      <Block>
        <rep:Reporter.DefaultTarget Identifier="Info"/>
        <Execute Statement="ExportToPartKeeprProject(Database.DBConnection, BillOfMaterials, DatabaseExportProjectID.ID, DatabaseUnmatchedComponentsStorageID.ID)"/>
        <Task.MarkHandled/>
      </Block>
    </Task>

    <Task Identifier="UpdateDB.ChangePartNames">
      <Init>
        <Task.Description Expression="sUpdateDBChangePartNamesTD"/>
        <Task.AddDependency Task="GlobalConfig"/>
        <Task.AddDependency Task="Database" Result="Database" ResultType="TDatabase"/>
        <Task.AddDependency Task="StockManager" Result="StockManager" ResultType="TStockManager"/>
        <Task.AddDependency Task="StockManager.ConsolidateSpecifications"/>
      </Init>
      <Block>
        <rep:Reporter.DefaultTarget Identifier="Info"/>
        <Execute Statement="ChangePartDescriptions(Database.DBConnection, StockManager, TComponentProperty.Name)"/>
        <Task.MarkHandled/>
      </Block>
    </Task>

    <Task Identifier="UpdateDB.ChangePartDescriptions">
      <Init>
        <Task.Description Expression="sUpdateDBChangePartDescriptionsTD"/>
        <Task.AddDependency Task="GlobalConfig"/>
        <Task.AddDependency Task="Database" Result="Database" ResultType="TDatabase"/>
        <Task.AddDependency Task="StockManager" Result="StockManager" ResultType="TStockManager"/>
        <Task.AddDependency Task="StockManager.ConsolidateSpecifications"/>
      </Init>
      <Block>
        <rep:Reporter.DefaultTarget Identifier="Info"/>
        <Execute Statement="ChangePartDescriptions(Database.DBConnection, StockManager, TComponentProperty.Description)"/>
        <Task.MarkHandled/>
      </Block>
    </Task>

    <Task Identifier="Report.BOM">
      <Init>
        <Task.Description Expression="sReportBomTD"/>
        <Task.AddDependency Task="GlobalConfig"/>
        <Task.AddDependency Task="BillOfMaterials" Result="BillOfMaterials" ResultType="TBillOfMaterials"/>
        <Task.AddDependency Task="StockManager" Result="StockManager" ResultType="TStockManager"/>
        <Task.AddDependency Task="BillOfMaterials.AssignStockComponents" IgnoreFailure="True"/>
        <Task.AddDependency Task="BillOfMaterials.ProcessDesignators"/>
      </Init>
      <Block>
        <rep:Reporter.DefaultTarget Identifier="Report"/>
        <Execute Statement="BillOfMaterials.Report"/>
        <rep:Reporter.DefaultTarget Identifier="Info"/>
        <Task.MarkHandled/>
      </Block>
    </Task>

    <Task Identifier="Report.Bom.EEVBlog">
      <Init>
        <Task.Description Expression="sReportBomEEVBlogTD"/>
        <Task.AddDependency Task="Report.BOM"/>
      </Init>
      <Block>
        <Variable Identifier="ReportIterator"/>
        <rep:Reporter.GetIterator Target="Report" Iterator="ReportIterator"/>
        <rep:Reporter.DefaultTarget Identifier="ReportEEVBlog"/>
        <Execute Statement="ReportAsSimpleMachines(ReportIterator)"/>
        <Task.MarkHandled/>
      </Block>
    </Task>

    <Task Identifier="Report.Bom.DokuWiki">
      <Init>
        <Task.Description Expression="sReportBomDokuWikiTD"/>
        <Task.AddDependency Task="Report.BOM"/>
      </Init>
      <Block>
        <Variable Identifier="ReportIterator"/>
        <rep:Reporter.GetIterator Target="Report" Iterator="ReportIterator"/>
        <rep:Reporter.DefaultTarget Identifier="ReportDokuWiki"/>
        <Execute Statement="ReportAsDokuWiki(ReportIterator)"/>
        <Task.MarkHandled/>
      </Block>
    </Task>

    <Task Identifier="Report.BomDesignators">
      <Init>
        <Task.Description Expression="sReportDesignatorsTD"/>
        <Task.AddDependency Task="GlobalConfig"/>
        <Task.AddDependency Task="BillOfMaterials" Result="BillOfMaterials" ResultType="TBillOfMaterials"/>
        <Task.AddDependency Task="CalculatedSpecifications" Result="CalculatedSpecifications" ResultType="TCalculatedSpecifications"/>
        <Task.AddDependency Task="BillOfMaterials.LoadBomFile"/>
      </Init>
      <Block>
        <rep:Reporter.DefaultTarget Identifier="DesignatorReport"/>
        <Execute Statement="BillOfMaterials.ReportDesignators(CalculatedSpecifications)"/>
        <Task.MarkHandled/>
      </Block>
    </Task>

    <Task Identifier="CombineTargetMatching.Stock.Source" SelfType="TAvailableValuesSource" SelfConstruction="TAvailableValuesSource.Create">
      <Init>
        <Task.Description Expression="sCombineTargetMatchingStockSource"/>
        <Task.AddDependency Task="ElectronicsTasks.CombinationTarget" Result="CombinationTarget" ResultType="TCombinationTarget"/>
        <Task.AddDependency Task="StockManager" Result="StockManager" ResultType="TStockManager"/>
        <Task.AddDependency Task="StockManager.ConsolidateSpecifications"/>
        <Task.AddDependency Task="IniHelper" Result="Ini" ResultType="TScienceIniHelper"/>
      </Init>
      <Block>
        <Variable Identifier="TargetUnit" Type="UnitString" Init="CombinationTarget.Value.UnitS"/>
        <Variable Identifier="IniSection" Type="string" Init="''"/>
        <Choose>
          <When Expression="CompatibleUnits(TargetUnit, ⌠Ω⌡)">
            <Execute Statement="ComponentCategory:= StockManager.Resistors"/>
            <Execute Statement="IniSection:= 'CombinationTarget.Input.Resistor'"/>
          </When>
          <When Expression="CompatibleUnits(TargetUnit, ⌠F⌡)">
            <Execute Statement="ComponentCategory:= StockManager.Capacitors"/>
            <Execute Statement="IniSection:= 'CombinationTarget.Input.Capacitor'"/>
          </When>
          <When Expression="CompatibleUnits(TargetUnit, ⌠H⌡)">
            <Execute Statement="ComponentCategory:= StockManager.Inductors"/>
            <Execute Statement="IniSection:= 'CombinationTarget.Input.Inductor'"/>
          </When>
        </Choose>
        <Task.Assert Expression="Assigned(ComponentCategory)" FailMessage="'Unsupported target unit'"/>
        <Block Condition="Ini.Inifile.SectionExists(IniSection)">
          <Execute Statement="SpecificationTemplate:= ComponentCategory.CreateSpecification"/>
          <Execute Statement="SpecificationTemplate.LoadFromIniFileSection(Ini, IniSection)"/>
        </Block>
        <Task.MarkHandled/>
      </Block>
    </Task>

    <Task Identifier="CombineTargetMatching.Stock.AvailableValues" SelfType="TAvailableValuesInfo" SelfConstruction="TAvailableValuesInfo.Create">
      <Init>
        <Task.Description Expression="sCombineTargetMatchingsStockAvailableValue"/>
        <Task.AddDependency Task="ElectronicsTasks.ValuesManager" Result="ValuesManager" ResultType="TESerieValuesManager"/>
        <Task.AddDependency Task="ElectronicsTasks.CombinationTarget" Result="CombinationTarget" ResultType="TCombinationTarget"/>
        <Task.AddDependency Task="CombineTargetMatching.Stock.Source" Result="StockSource" ResultType="TAvailableValuesSource"/>
      </Init>
      <Block>
        <Variable Identifier="TargetUnit" Type="UnitString" Init="CombinationTarget.Value.UnitS"/>
        <Variable Identifier="ComponentCategory" Type="TComponentCategory" Init="StockSource.ComponentCategory"/>
        <Variable Identifier="Specification" Type="TComponentSpec" Init="StockSource.SpecificationTemplate"/>
        <Variable Identifier="Value" Type="DecimalQuantity"/>
        <Execute Statement="Values:= ValuesManager.NewSerieValues"/>
        <Execute Statement="Values.BeginUpdate"/>
        <TryFinally>
          <Try>
            <lil:LinkedList.Iterate Head="ComponentCategory.ComponentSpecHead" ItemType="TComponentSpec" RunningItem="Item" Next="Item.Next">
              <Choose>
                <When Expression="not Assigned(Item.StockComponentHead)">
                </When>
                <When Expression="Assigned(Specification) and not Specification.DoesMatchSpecification(Item)">
                  <!--<rep:Reporter.Information Text="'Did not match'" Target="Info"/>-->
                </When>
                <When Expression="(Item is TPassiveSpec)">
                  <Block Condition="TPassiveSpec(Item).GetValue(Value)">
                    <Task.Assert Expression="CompatibleUnits(Value.UnitS, TargetUnit)" FailMessage="'Units do not match'"/>
                    <rep:Reporter.Information Text="UiDecimalQuantityToStr(Value)" Markup="BulletList" Target="Info"/>
                    <Execute Statement="Values.AddSerieValue(Value)"/>
                  </Block>
                </When>
              </Choose>
            </lil:LinkedList.Iterate>
          </Try>
          <Finally>
            <Execute Statement="Values.EndUpdate"/>
          </Finally>
        </TryFinally>
        <Task.MarkHandled/>
      </Block>
    </Task>

    <Task Identifier="ComponentCombination.Stock">
      <Variables>
        <Variable Identifier="CombinationInfo" Type="TCombinationInfo" Init="Task.InstanceObject as TCombinationInfo"/>
        <Variable Identifier="ConfigurationInfo" Type="T4CompConfigEnumInfo" Init="CombinationInfo.ConfigurationInfo"/>
        <Variable Identifier="ConfigurationKind" Type="T4CompConfig" Init="ConfigurationInfo.Enum"/>
      </Variables>
      <Init>
        <Task.Description Expression="Format(sCombineTargetMatchingsStockMatching, ConfigurationKind + 1, ConfigurationInfo.Description)"/>
        <Task.AddDependency Task="ElectronicsTasks.ComponentCombination" InstanceObject="CombinationInfo" Result="ComponentCombination" ResultType="TCombinationResult"/>
        <Task.AddDependency Task="CombineTargetMatching.Stock.Source" Result="StockSource" ResultType="TAvailableValuesSource"/>
        <Task.AddDependency Task="GlobalConfig"/>
      </Init>
      <Block>
        <Variable Identifier="Value" Type="DecimalQuantity"/>
        <Variable Identifier="ComponentSpecAsString" Type="string"/>
        <Variable Identifier="CountS" Type="string"/>
        <Variable Identifier="ReportLine" Type="string"/>
        <Variable Identifier="ComponentCategory" Type="TComponentCategory" Init="StockSource.ComponentCategory"/>
        <Variable Identifier="FilterSpecification" Type="TComponentSpec" Init="StockSource.SpecificationTemplate"/>
        <Variable Identifier="MatchSpecification" Type="TComponentSpec" Init="ComponentCategory.CreateSpecification"/>
        <Execute Statement="MatchSpecification.Template:= FilterSpecification"/>
        <Execute Statement="MatchSpecification.ApplyTemplate"/>
        <Objects.Use>
          <Object Identifier="SpecReportContext" Type="TSpecReportContext" Expression="TSpecReportContext.Create"/>
          <Object Identifier="ColumnManager" Type="TTextColumnManager" Expression="TTextColumnManager.Create"/>
          <Block>
            <Execute Statement="SpecReportContext.ColumnManager:= ColumnManager"/>
            <Execute Statement="SpecReportContext.ColumnOffset:= 1"/>
            <Execute Statement="ColumnManager.RequestColumnWidth(0, 1, 2)"/>
            <ForLoop Indexer="Im" From="0" To="1">
              <Execute Statement="SpecReportContext.Measure:= Im = 0"/>
              <ForLoop Indexer="I" From="0" To="ComponentCombination.InputCount - 1">
                <!--<rep:Reporter.LabelValue Label="ListValue(I, '', 'A', 'B', 'C', 'D')" Value="DQToStr(ComponentCombination.InputValues[I], True)" Target="Info" Condition="not SpecReportContext.Measure"/>-->
                <Execute Statement="TPassiveSpec(MatchSpecification).SetValue(ComponentCombination.InputValues[I])" Condition="MatchSpecification is TPassiveSpec"/>
                <Execute Statement="ComponentSpecAsString:= MatchSpecification.SpecificationAsString(TSpecFormatType.Fixed, SpecReportContext)"/>
                <Block Condition="not SpecReportContext.Measure">
                  <!--<rep:Reporter.Information Text="ListValue(I, '', 'A', 'B', 'C', 'D')" Target="Info" Markup="Header3"/>-->
                  <Execute Statement="ReportLine:= Format('  %-*s%-*s%-*s', 
                                          ColumnManager.GetColumnWidth(0, 1), ListValue(I, '', 'A', 'B', 'C', 'D'),
                                          ColumnManager.GetColumnWidth(1, TNamedComponentSpecColumns.Max+2), ComponentSpecAsString,
                                          ColumnManager.GetColumnWidth(TNamedComponentSpecColumns.Max+3, 1), ComponentKindDescription(MatchSpecification.ComponentKind) 
                                          )"/>
                  <rep:Reporter.Information Text="ReportLine" Target="Info" Markup="Header4"/>
                </Block>
                <lil:LinkedList.Iterate Head="ComponentCategory.ComponentSpecHead" ItemType="TComponentSpec" RunningItem="Item" Next="Item.Next">
                  <Choose>
                    <When Expression="not Assigned(Item.StockComponentHead)">
                    </When>
                    <When Expression="not MatchSpecification.DoesMatchSpecification(Item)">
                      <!--<rep:Reporter.Information Text="'Did not match'" Target="Info"/>-->
                    </When>
                    <When Expression="(Item is TPassiveSpec)">
                      <Block Condition="TPassiveSpec(Item).GetValue(Value)">
                        <!--<rep:Reporter.Information Text="UiDecimalQuantityToStr(Value)" Markup="BulletList" Target="Info"/>-->
                        <Execute Statement="ComponentSpecAsString:= Item.SpecificationAsString(TSpecFormatType.Fixed, SpecReportContext)"/>
                        <Variable Identifier="TotCount" Type="UInt32" Init="0"/>
                        <Variable Identifier="StockSep" Type="Boolean" Init="False"/>
                        <Variable Identifier="StockDescriptions" Type="string" Init="''"/>
                        <lil:LinkedList.Iterate Head="Item.StockComponentHead" ItemType="TStockComponent" RunningItem="RunningComponent" Next="RunningComponent.Next">
                          <Execute Statement="StockDescriptions:= StockDescriptions + ', '" Condition="StockSep"/>
                          <Execute Statement="StockDescriptions:= StockDescriptions + Format('%dx #%d @%s', RunningComponent.Amount, RunningComponent.ID, RunningComponent.Location.Name)"/>
                          <Execute Statement="TotCount:= TotCount + RunningComponent.Amount"/>
                          <Execute Statement="StockSep:= True"/>
                          <Execute Statement="RunningComponent:= RunningComponent.Next"/>
                        </lil:LinkedList.Iterate>
                        <Execute Statement="CountS:= Format('%ux ', TotCount)"/>
                        <Execute Statement="ColumnManager.RequestColumnWidth(0, 1, System.Length(CountS))" Condition="SpecReportContext.Measure"/>
                        <Block Condition="not SpecReportContext.Measure">
                          <!--<rep:Reporter.Information Text="ListValue(I, '', 'A', 'B', 'C', 'D')" Target="Info" Markup="Header3"/>-->
                          <Execute Statement="ReportLine:= Format('  %-*s%-*s%-*s %s', 
                                          ColumnManager.GetColumnWidth(0, 1), CountS,
                                          ColumnManager.GetColumnWidth(1, TNamedComponentSpecColumns.Max+2), ComponentSpecAsString,
                                          ColumnManager.GetColumnWidth(TNamedComponentSpecColumns.Max+3, 1), ComponentKindDescription(Item.ComponentKind),
                                          StockDescriptions 
                                          )"/>
                          <rep:Reporter.Information Text="ReportLine" Target="Info"/>
                        </Block>
                      </Block>
                    </When>
                  </Choose>
                </lil:LinkedList.Iterate>
                <rep:Reporter.Information Text="''" Target="Info" Condition="Im = 1"/>
              </ForLoop>
            </ForLoop>
            <Task.MarkHandled/>
          </Block>
        </Objects.Use>
      </Block>
    </Task>

    <Task Identifier="ComponentCombinations.Stock">
      <Variables>
        <Variable Identifier="AvailableInputTask" Type="TTaskRef" Init="Task.InstanceObject as TTaskRef"/>
      </Variables>
      <Init>
        <Task.Description Expression="cCompCombosTaskStock"/>
        <Task.Kind Expression="TTaskKind.tkCategory"/>
        <Variable Identifier="NameRegister" Type="TEnumNameRegister" Init="FourCompConfigEnumManager.NameRegister"/>
        <ForLoop Indexer="I" From="T4CompConfig.Low" To="T4CompConfig.High">
          <Task.AddDependency Task="ComponentCombination.Stock" InstanceObject="TCombinationInfo.Create(NameRegister.Objects[I], AvailableInputTask)"/>
        </ForLoop>
      </Init>
    </Task>

    <Task Identifier="UtilityTasks">
      <Variables>
        <Variable Identifier="InstanceObject" Type="TRootTaskInfo" Init="Task.InstanceObject as TRootTaskInfo"/>
        <Variable Identifier="Unattended" Type="Boolean" Init="InstanceObject.Unattended"/>
        <Variable Identifier="TaskSelectionFlags" Type="TFlags" Init="InstanceObject.TaskSelectionFlags"/>
        <Variable Identifier="AvailableInputTask" Type="TTaskRef" Init="ObjNil"/>
      </Variables>
      <Init>
        <Task.Description Expression="sUtilityTasks"/>
        <Task.Kind Expression="TTaskKind.tkCategory"/>
        <Variable Identifier="UseStock" Type="TUseStock" Init="TUseStock.SourceAndMatch"/>
        <Object.Use Identifier="Ini" Type="TScienceIniHelper" Expression="TScienceIniHelper.Create(ConfigInifile, True)" Condition="not Assigned(AvailableInputTask)">
          <Execute Statement="Ini.Section('ComponentCombinations.Stock')"/>
          <Execute Statement="UseStock:= Ini.ReadEnum('UseStock', UseStock, UseStockEnumManager.NameRegister)"/>
          <Case Expression="UseStock">
            <On Select="TUseStock.Source, TUseStock.SourceAndMatch">
              <Task.AcquireTaskReference Task="CombineTargetMatching.Stock.AvailableValues" RefObj="TTaskRef.Create" ReleaseObj="AvailableInputTask"/>
            </On>
          </Case>
        </Object.Use>
        <Case Expression="UseStock">
          <On Select="TUseStock.SourceAndMatch">
            <Task.AddDependency Task="ComponentCombinations.Stock" Condition="InFlags(TUnattendedTask.ComponentCombinations, TaskSelectionFlags)" InstanceObject="AvailableInputTask" IgnoreFailure="True"/>
          </On>
          <Otherwise>
            <Task.AddDependency Task="ElectronicsTasks.ComponentCombinations" Condition="InFlags(TUnattendedTask.ComponentCombinations, TaskSelectionFlags)" InstanceObject="AvailableInputTask" IgnoreFailure="True"/>
          </Otherwise>
        </Case>
        <Task.AddDependency Task="Report.Stock" Condition="InFlags(TUnattendedTask.Stock, TaskSelectionFlags)" IgnoreFailure="True"/>
        <Task.AddDependency Task="Report.StorageLocations" Condition="InFlags(TUnattendedTask.StorageLocations, TaskSelectionFlags)" IgnoreFailure="True"/>
        <Task.AddDependency Task="Report.PartKeeprProjects" Condition="InFlags(TUnattendedTask.PartKeeprProjects, TaskSelectionFlags)" IgnoreFailure="True"/>
        <Task.AddDependency Task="UpdateDB.MatchUnmatchedSchemaComponentsToCategories" Condition="not Unattended" IgnoreFailure="True"/>
        <Task.AddDependency Task="UpdateDB.ChangeProjectParts" Condition="not Unattended" IgnoreFailure="True"/>
        <Task.AddDependency Task="UpdateDB.ChangePartNames" Condition="not Unattended" IgnoreFailure="True"/>
        <Task.AddDependency Task="UpdateDB.ChangePartDescriptions" Condition="not Unattended" IgnoreFailure="True"/>
      </Init>
    </Task>

  </Procedures>

  <Block>
    <Variable Identifier="StartCounter" Type="CycleQ"/>
    <Variable Identifier="EndCounter" Type="CycleQ"/>
    <Variable Identifier="TimeBetweenCounters" Type="Time"/>
    <Variable Identifier="TimeBetweenCountersS" Type="string"/>
    <Variable Identifier="Unattended" Type="Boolean" Init="False"/>
    <Variable Identifier="TaskSelectionFlags" Type="TFlags" Init="RangeFlags(TUnattendedTask.Low, TUnattendedTask.High)"/>
    <Variable Identifier="UnattendedTask" Type="TUnattendedTask"/>
    <Variable Identifier="UnattendedS" Type="string"/>
    <rep:Reporter.DefaultTarget Identifier="Info"/>
    <rep:Reporter.Information Text="sScriptLog" Markup="Header1"/>
    <rep:Reporter.LabelValue Label="sTime" Value="FormatDateTime('', Now)"/>
    <rep:Reporter.LabelValue Label="sInterpreterVersion" Value="GetVersionInfo('%d.%d.%d')"/>
    <rep:Reporter.LabelValue Label="sScriptVersion" Value="ScriptVersion"/>
    <rep:Reporter.LabelValue Label="sFilename" Value="ScriptFilename"/>
    <rep:Reporter.Information Text="''"/>
    <Choose>
      <When Expression="PauseRequest">
      </When>
      <When Expression="CommandlineVariables.GetValue('Unattended', UnattendedS)">
        <Raise Expression="Exception.Create(sUnsupportedUnattendedTask)" Condition="not UnattendedTaskNameRegister.GetFlags(UnattendedS, TaskSelectionFlags)"/>
        <Execute Statement="Unattended:= True"/>
      </When>
    </Choose>
    <sts:Status.Block Text="sTasksAreBeingCreated" LeaveText="sTasksAreExecuted">
      <sts:Status.Block>
        <ExecuteTasks Unattended="Unattended">
          <Task Identifier="Report.BOM" Condition="InFlags(TUnattendedTask.Bom, TaskSelectionFlags)" IgnoreFailure="True"/>
          <Task Identifier="Report.Bom.EEVBlog" Condition="InFlags(TUnattendedTask.BomEEVBlog, TaskSelectionFlags)" IgnoreFailure="True"/>
          <Task Identifier="Report.Bom.DokuWiki" Condition="InFlags(TUnattendedTask.BomDokuWiki, TaskSelectionFlags)" IgnoreFailure="True"/>
          <Task Identifier="Report.BomDesignators" Condition="InFlags(TUnattendedTask.BomDesignators, TaskSelectionFlags)" IgnoreFailure="True"/>
          <Task Identifier="Report.BomOrderPicking" Condition="InFlags(TUnattendedTask.BomOrderPicking, TaskSelectionFlags)" IgnoreFailure="True"/>
          <Task Identifier="UtilityTasks" InstanceObject="TRootTaskInfo.Create(Unattended, TaskSelectionFlags)"/>
          <BeforeInitTask Identifier="Task">
            <sts:Status Text="Format(sTaskIsBeingInitialized, Task.Description)" Depth="1"/>
          </BeforeInitTask>
          <AfterInit>
            <sts:Status Text="sTasksAreCreated" Depth="2"/>
            <sts:Status Text="sSelectTasks" Depth="1"/>
          </AfterInit>
          <SelectionSuspend>
            <Resume.ResumeRequest/>
            <Resume.BreakRequest/>
          </SelectionSuspend>
          <BeforeExecuteTask Identifier="Task">
            <Block  Condition="Task.Kind &lt;&gt; TTaskKind.tkCategory">
              <rep:Reporter.Information Text="Task.Description" Markup="Header2" Target="Info"/>
              <rep:Reporter.Information Text="Task.Hint" Condition="IsNonEmptyString(Task.Hint)" Markup="Comment" Target="Info"/>
              <sts:Status Text="Format(sTaskIsBeingExecuted, Task.Description)" Depth="1"/>
              <Execute Statement="StartCounter:= QueryPerformanceCounter ~ ⌠cycle⌡ ± 1.0⌠cycle⌡"/>
            </Block>
          </BeforeExecuteTask>
          <AfterExecuteTask Identifier="Task">
            <ExitOnAbortRequest/>
            <Block Condition="Task.Kind &lt;&gt; TTaskKind.tkCategory">
              <Execute Statement="EndCounter:= QueryPerformanceCounter ~ ⌠cycle⌡ ± 1.0⌠cycle⌡"/>
              <Execute Statement="TimeBetweenCounters:= (EndCounter - StartCounter) / PerfFreq"/>
              <Execute Statement="TimeBetweenCountersS:= ' (' + DQToStr(TimeBetweenCounters, False) + ')'"/>
              <Case Expression="Task.Status">
                <On Select="TTaskStatus.tsHandled">
                  <rep:Reporter.Information Text="Format(sTaskIsExecutedEx, Task.Description, TaskStatusDescription(Task)) + TimeBetweenCountersS" Target="Info"/>
                </On>
                <Otherwise>
                  <rep:Reporter.Error Text="Format(sTaskIsExecutedEx, Task.Description, TaskStatusDescription(Task)) + TimeBetweenCountersS" Target="Info"/>
                </Otherwise>
              </Case>
              <rep:Reporter.Information Text="''" Target="Info"/>
            </Block>
          </AfterExecuteTask>
        </ExecuteTasks>
      </sts:Status.Block>
    </sts:Status.Block>
    <rep:Reporter.DefaultTarget Identifier="Info"/>
    <rep:Reporter.Information Text="sScriptDone" Markup="Header2"/>
    <rep:Reporter.LabelValue Label="sTime" Value="FormatDateTime('', Now)"/>
  </Block>
</pkg:Program>