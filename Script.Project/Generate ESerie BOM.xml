<?xml version="1.0" encoding="utf-8"?>
<pkg:Program xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xmlns="urn:schemas-www-wisware.nl-xmlscripting"
            xmlns:msx="urn:schemas-www-wisware.nl-xmlscripting-xml"
            xmlns:pkg="urn:schemas-www-wisware.nl-scriptingpackages"
            xmlns:fil="urn:schemas-www-wisware.nl-xmlscripting-filemanagement"
            xmlns:syu="urn:schemas-www-wisware.nl-xmlscripting-sysutils"
            xmlns:reg="urn:schemas-www-wisware.nl-xmlscripting-registry"
            xmlns:indx="urn:schemas-www-wisware.nl-xmlscripting-index"
            xmlns:rep="urn:schemas-www-wisware.nl-xmlscripting-report"
            xmlns:sts="urn:schemas-www-wisware.nl-xmlscripting-showstatus"
            xmlns:ado="urn:schemas-www-wisware.nl-xmlscripting-ado"
            xmlns:sys="urn:schemas-www-wisware.nl-xmlscripting"
            xmlns:lil="urn:schemas-www-wisware.nl-xmlscripting-linkedlist"
            xsi:schemaLocation="urn:schemas-www-wisware.nl-scriptingpackages ../XmlSchemas.Common.XmlScript/XMLScripting.Packages.xsd">
  <pkg:ReportTargets>
    <pkg:Target Identifier="Resistors" Description="Resistors"/>
    <pkg:Target Identifier="Capacitors" Description="Capacitors"/>
    <pkg:Target Identifier="Zenerdiodes" Description="Zener diodes"/>
  </pkg:ReportTargets>
  <pkg:Config xml:space="preserve">[Settings]
BomFilename=F:\Software development\XmlScripts\Projects\ElectronicsCalculations\Resources.Project\ESeriesBOM.xml
  </pkg:Config>
  <Imports>
    <Import Identifier="ElectronicUtils" Filename="..\Script.Common.Electronics\ElectronicUtils.xml"/>
  </Imports>
  <Uses>
    <Use Identifier="ElectronicUtils"/>
  </Uses>

  <Type>
    <DataClass Identifier="TSerieBOM">
      <Field Identifier="XmlDoc" Type="IXMLDomDocument"/>
      <Field Identifier="TitleXE" Type="IXmlDomElement"/>
      <Field Identifier="ComponentsXE" Type="IXmlDomElement"/>
      <Field Identifier="ResistorCount" Type="Integer"/>
      <Field Identifier="CapacitorCount" Type="Integer"/>
      <Field Identifier="ZenderDiodeCount" Type="Integer"/>
    </DataClass>
  </Type>
  
  <Variables>
    <Variable Identifier="ResistorResistanceConv" Type="TUnitConvertor" Init="GetUnitConvertor(TConvertorKind.MicroOhm)"/>
    <Variable Identifier="ZenerDiodeZenerVoltageConv" Type="TUnitConvertor" Init="GetUnitConvertor(TConvertorKind.PicoVolt)"/>
    <Variable Identifier="CapacitorCapacitanceConv" Type="TUnitConvertor" Init="GetUnitConvertor(TConvertorKind.FemtoFarad)"/>
  </Variables>

  <Procedures>
    <Procedure Identifier="TSerieBOM.InitStructure">
      <Block>
        <Variable Identifier="ExportXE" Type="IXmlDomElement"/>
        <Variable Identifier="DesignXE" Type="IXmlDomElement"/>
        <Variable Identifier="SheetXE" Type="IXmlDomElement"/>
        <Variable Identifier="TitleBlockXE" Type="IXmlDomElement"/>
        <Variable Identifier="TitleXE" Type="IXmlDomElement"/>
        <Variable Identifier="ComponentsXE" Type="IXmlDomElement"/>
        <msx:Document.CreateElement Element="ExportXE" Document="XmlDoc" Name="export" ParentElement="XmlDoc" />
        <msx:Document.CreateElement Element="DesignXE" Document="XmlDoc" Name="design" ParentElement="ExportXE" />
        <msx:Document.CreateElement Element="SheetXE" Document="XmlDoc" Name="sheet" ParentElement="DesignXE" />
        <msx:Document.CreateElement Element="TitleBlockXE" Document="XmlDoc" Name="title_block" ParentElement="SheetXE" />
        <msx:Document.CreateElement Element="TitleXE" Document="XmlDoc" Name="title" ParentElement="TitleBlockXE" />
        <Execute Statement="Self.TitleXE:= TitleXE"/>
        <msx:Document.CreateElement Element="ComponentsXE" Document="XmlDoc" Name="components" ParentElement="ExportXE" />
        <Execute Statement="Self.ComponentsXE:= ComponentsXE"/>
      </Block>
    </Procedure>

    <Procedure Identifier="TSerieBOM.CreateResistors">
      <Parameters>
        <Parameter Identifier="Serie" Type="TSerie"/>
        <Parameter Identifier="FirstValue" Type="string"/>
      </Parameters>
      <Block>
        <Variable Identifier="Value" Type="string"/>
        <Variable Identifier="FirstValueInt" Type="Int64"/>
        <Variable Identifier="ComponentXE" Type="IXmlDomElement"/>
        <Variable Identifier="ValueXE" Type="IXmlDomElement"/>
        <Variable Identifier="LibSourceXE" Type="IXmlDomElement"/>
        <Raise Expression="Exception.Create('Invalid value: ' + FirstValue)" Condition="not ResistorResistanceConv.StrToIntValue(FirstValue, FirstValueInt)"/>
        <Variable Identifier="Factor" Type="Int64" Init="FirstValueInt div Serie.Head.Value"/>
        <lil:LinkedList.Iterate Head="Serie.Head" RunningItem="RunningNode" ItemType="TSerieNode" Next="RunningNode.Next">
          <msx:Document.CreateElement Element="ComponentXE" Document="XmlDoc" Name="comp" ParentElement="ComponentsXE" />
          <msx:Element.SetAttribute Element="ComponentXE" Name="ref" Value="Format('R%d', ResistorCount)"/>
          <msx:Document.CreateElement Element="ValueXE" Document="XmlDoc" Name="value" ParentElement="ComponentXE" />
          <Execute Statement="Value:= ResistorResistanceConv.IntValueToStr(Factor * RunningNode.Value)"/>
          <Execute Statement="ValueXE.Text:= Value"/>
          <rep:Reporter.Information Text="Value" Target="Resistors"/>
          <msx:Document.CreateElement Element="LibSourceXE" Document="XmlDoc" Name="libsource" ParentElement="ComponentXE" />
          <msx:Element.SetAttribute Element="LibSourceXE" Name="lib" Value="'Device'"/>
          <msx:Element.SetAttribute Element="LibSourceXE" Name="part" Value="'R'"/>
          <msx:Element.SetAttribute Element="LibSourceXE" Name="description" Value="'Resistor'"/>
          <Execute Statement="ResistorCount:= ResistorCount + 1"/>
        </lil:LinkedList.Iterate>
      </Block>
    </Procedure>

    <Procedure Identifier="TSerieBOM.CreateZenerDiodes">
      <Parameters>
        <Parameter Identifier="Serie" Type="TSerie"/>
        <Parameter Identifier="FirstValue" Type="string"/>
      </Parameters>
      <Block>
        <Variable Identifier="Value" Type="string"/>
        <Variable Identifier="FirstValueInt" Type="Int64"/>
        <Variable Identifier="ComponentXE" Type="IXmlDomElement"/>
        <Variable Identifier="ValueXE" Type="IXmlDomElement"/>
        <Variable Identifier="LibSourceXE" Type="IXmlDomElement"/>
        <Raise Expression="Exception.Create('Invalid value: ' + FirstValue)" Condition="not ZenerDiodeZenerVoltageConv.StrToIntValue(FirstValue, FirstValueInt)"/>
        <Variable Identifier="Factor" Type="Int64" Init="FirstValueInt div Serie.Head.Value"/>
        <lil:LinkedList.Iterate Head="Serie.Head" RunningItem="RunningNode" ItemType="TSerieNode" Next="RunningNode.Next">
          <msx:Document.CreateElement Element="ComponentXE" Document="XmlDoc" Name="comp" ParentElement="ComponentsXE" />
          <msx:Element.SetAttribute Element="ComponentXE" Name="ref" Value="Format('D%d', ZenderDiodeCount)"/>
          <msx:Document.CreateElement Element="ValueXE" Document="XmlDoc" Name="value" ParentElement="ComponentXE" />
          <Execute Statement="Value:= ZenerDiodeZenerVoltageConv.IntValueToStr(Factor * RunningNode.Value)"/>
          <Execute Statement="ValueXE.Text:= Value"/>
          <rep:Reporter.Information Text="Value" Target="Zenerdiodes"/>
          <msx:Document.CreateElement Element="LibSourceXE" Document="XmlDoc" Name="libsource" ParentElement="ComponentXE" />
          <msx:Element.SetAttribute Element="LibSourceXE" Name="lib" Value="'Device'"/>
          <msx:Element.SetAttribute Element="LibSourceXE" Name="part" Value="'D_Zener'"/>
          <msx:Element.SetAttribute Element="LibSourceXE" Name="description" Value="'Zenerdiode'"/>
          <Execute Statement="ZenderDiodeCount:= ZenderDiodeCount + 1"/>
        </lil:LinkedList.Iterate>
      </Block>
    </Procedure>

    <Procedure Identifier="TSerieBOM.CreateCapacitors">
      <Parameters>
        <Parameter Identifier="Serie" Type="TSerie"/>
        <Parameter Identifier="FirstValue" Type="string"/>
        <Parameter Identifier="Part" Type="string"/>
      </Parameters>
      <Block>
        <Variable Identifier="Value" Type="string"/>
        <Variable Identifier="FirstValueInt" Type="Int64"/>
        <Variable Identifier="ComponentXE" Type="IXmlDomElement"/>
        <Variable Identifier="ValueXE" Type="IXmlDomElement"/>
        <Variable Identifier="LibSourceXE" Type="IXmlDomElement"/>
        <Raise Expression="Exception.Create('Invalid value: ' + FirstValue)" Condition="not CapacitorCapacitanceConv.StrToIntValue(FirstValue, FirstValueInt)"/>
        <Variable Identifier="Factor" Type="Int64" Init="FirstValueInt div Serie.Head.Value"/>
        <lil:LinkedList.Iterate Head="Serie.Head" RunningItem="RunningNode" ItemType="TSerieNode" Next="RunningNode.Next">
          <msx:Document.CreateElement Element="ComponentXE" Document="XmlDoc" Name="comp" ParentElement="ComponentsXE" />
          <msx:Element.SetAttribute Element="ComponentXE" Name="ref" Value="Format('C%d', CapacitorCount)"/>
          <msx:Document.CreateElement Element="ValueXE" Document="XmlDoc" Name="value" ParentElement="ComponentXE" />
          <Execute Statement="Value:= CapacitorCapacitanceConv.IntValueToStr(Factor * RunningNode.Value)"/>
          <Execute Statement="ValueXE.Text:= Value"/>
          <rep:Reporter.Information Text="Value" Target="Capacitors"/>
          <msx:Document.CreateElement Element="LibSourceXE" Document="XmlDoc" Name="libsource" ParentElement="ComponentXE" />
          <msx:Element.SetAttribute Element="LibSourceXE" Name="lib" Value="'Device'"/>
          <msx:Element.SetAttribute Element="LibSourceXE" Name="part" Value="Part"/>
          <msx:Element.SetAttribute Element="LibSourceXE" Name="description" Value="'Capacitor'"/>
          <Execute Statement="CapacitorCount:= CapacitorCount + 1"/>
        </lil:LinkedList.Iterate>
      </Block>
    </Procedure>

    <Procedure Identifier="TSerieBOM.CreateContent">
      <Variables>
        <Variable Identifier="Serie" Type="TSerie" Init="GetESerie(TESerie.E24)"/>
      </Variables>
      <Block>
        <Execute Statement="TitleXE.Text:= 'ESeries'"/>
        <Execute Statement="CreateResistors(Serie, '1Ω')"/>
        <Execute Statement="CreateResistors(Serie, '10Ω')"/>
        <Execute Statement="CreateResistors(Serie, '100Ω')"/>
        <Execute Statement="CreateResistors(Serie, '1kΩ')"/>
        <Execute Statement="CreateResistors(Serie, '10kΩ')"/>
        <Execute Statement="CreateResistors(Serie, '100kΩ')"/>
        <Execute Statement="CreateResistors(Serie, '1MΩ')"/>
        <Execute Statement="CreateResistors(Serie, '10MΩ')"/>
        <Execute Statement="CreateResistors(Serie, '100MΩ')"/>
        <Execute Statement="Serie:= GetESerie(TESerie.E6)"/>
        <Execute Statement="CreateCapacitors(Serie, '1nF', 'C')"/>
        <Execute Statement="CreateCapacitors(Serie, '10nF', 'C')"/>
        <Execute Statement="CreateCapacitors(Serie, '100nF', 'C')"/>
        <Execute Statement="CreateCapacitors(Serie, '1uF', 'CP')"/>
        <Execute Statement="CreateCapacitors(Serie, '10uF', 'CP')"/>
        <Execute Statement="CreateCapacitors(Serie, '100uF', 'CP')"/>
        <Execute Statement="CreateCapacitors(Serie, '1000uF', 'CP')"/>
        <Execute Statement="Serie:= GetESerie(TESerie.E12)"/>
        <Execute Statement="CreateZenerDiodes(Serie, '1V')"/>
        <Execute Statement="CreateZenerDiodes(Serie, '10V')"/>
      </Block>
    </Procedure>

    <Procedure Identifier="TSerieBOM.Generate">
      <Parameters>
        <Parameter Identifier="Filename" Type="string"/>
      </Parameters>
      <Block>
        <Execute Statement="XmlDoc:= CoDOMDocument60.Create"/>
        <Execute Statement="InitStructure"/>
        <Execute Statement="CreateContent"/>
        <Variable Identifier="WriteStream" Type="TSequentialFileWriteStream" Init="TSequentialFileWriteStream.Create(Filename)"/>
        <Variable Identifier="Stream" Type="IStream" Init="WriteStream as IStream"/>
        <Variable Identifier="MXWriter" Type="IMXWriter" Init="CoMXXMLWriter60.Create"/>
        <Execute Statement="MXWriter.Output:= Stream"/>
        <Execute Statement="MXWriter.Indent:= True"/>
        <Execute Statement="MXWriter.encoding:= 'utf-8'"/>
        <Variable Identifier="Output" Type="Variant" Init="MXWriter"/>
        <Variable Identifier="XMLReader" Type="ISAXXMLReader" Init="CoSAXXMLReader60.Create"/>
        <Execute Statement="XMLReader.putContentHandler(MXWriter as ISAXContentHandler)"/>
        <Execute Statement="XMLReader.Parse(XmlDoc)"/>
      </Block>
    </Procedure>
  </Procedures>

  <Constants>
    <Constant Identifier="secSettings" Type="string" Expression="'Settings'"/>
    <Constant Identifier="keyBomFilename" Type="string" Expression="'BomFilename'"/>
  </Constants>

  <Variables>
    <Variable Identifier="BomFilename" Type="string" Init="''"/>
  </Variables>

  <Block>
    <Execute Statement="BomFilename:= ConfigInifile.ReadString(secSettings, keyBomFilename, BomFilename)"/>
    <Object.Use Identifier="SerieBOM" Type="TSerieBOM" Expression="TSerieBOM.Create">
      <Execute Statement="SerieBOM.Generate(BomFilename)"/>
    </Object.Use>
  </Block>
</pkg:Program>