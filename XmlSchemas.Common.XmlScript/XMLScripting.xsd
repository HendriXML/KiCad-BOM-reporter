<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns="urn:schemas-www-wisware.nl-xmlscripting"
           xmlns:xs="http://www.w3.org/2001/XMLSchema" targetNamespace="urn:schemas-www-wisware.nl-xmlscripting" elementFormDefault="qualified">
  <xs:simpleType name="expression">
    <xs:restriction base="xs:string"/>
  </xs:simpleType>
  <xs:simpleType name="constexpression">
    <xs:restriction base="xs:string"/>
  </xs:simpleType>
  <xs:simpleType name="caseselectexpression">
    <xs:restriction base="xs:string"/>
  </xs:simpleType>
  <xs:simpleType name="dataclassconst">
    <xs:restriction base="xs:string"/>
  </xs:simpleType>
  <xs:simpleType name="unitidentifier">
    <xs:restriction base="xs:string"/>
  </xs:simpleType>
  <xs:simpleType name="fieldidentifier">
    <xs:restriction base="xs:string"/>
  </xs:simpleType>
  <xs:simpleType name="virtualmethodidentifier">
    <xs:restriction base="xs:string"/>
  </xs:simpleType>
  <xs:simpleType name="fielddatatype">
    <xs:restriction base="xs:string">
      <xs:enumeration value="boolean"/>
      <xs:enumeration value="pointer"/>
      <xs:enumeration value="uint32"/>
      <xs:enumeration value="uint64"/>
      <xs:enumeration value="int32"/>
      <xs:enumeration value="int64"/>
      <xs:enumeration value="currency"/>
      <xs:enumeration value="extended"/>
      <xs:enumeration value="ansistring"/>
      <xs:enumeration value="unicodestring"/>
      <xs:enumeration value="class"/>
      <xs:enumeration value="object"/>
      <xs:enumeration value="variant"/>
      <xs:enumeration value="interface"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="caseoptimalisation">
    <xs:restriction base="xs:string">
      <xs:enumeration value="btree"/>
      <xs:enumeration value="integermapping"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="caseordinaltype">
    <xs:restriction base="xs:string">
      <xs:enumeration value="integer"/>
      <xs:enumeration value="widechar"/>
      <xs:enumeration value="ansichar"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="defaultconstructortype">
    <xs:restriction base="xs:string">
      <xs:enumeration value="none"/>
      <xs:enumeration value="createonly"/>
      <xs:enumeration value="createandsetfields"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="valuestatuschecktype">
    <xs:restriction base="xs:string">
      <xs:enumeration value="empty"/>
      <xs:enumeration value="dataloss"/>
      <xs:enumeration value="error"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="valuestatuschecks">
    <xs:list itemType="valuestatuschecktype"></xs:list>
  </xs:simpleType>
  <xs:simpleType name="typeidentifier">
    <xs:restriction base="xs:string"/>
  </xs:simpleType>
  <xs:simpleType name="dataobjecttypeidentifier">
    <xs:restriction base="xs:string"/>
  </xs:simpleType>
  <xs:simpleType name="enumtypeelementlist">
    <xs:restriction base="xs:string"/>
  </xs:simpleType>
  <xs:simpleType name="identifier">
    <xs:restriction base="xs:string"/>
  </xs:simpleType>
  <xs:simpleType name="identifierref">
    <xs:restriction base="xs:string"/>
  </xs:simpleType>
  <xs:simpleType name="tagidentifier">
    <xs:restriction base="xs:string"/>
  </xs:simpleType>
  <xs:simpleType name="tagidentifierlist">
    <xs:restriction base="xs:string"/>
  </xs:simpleType>
  <xs:simpleType name="maskstring">
    <xs:restriction base="xs:string"/>
  </xs:simpleType>
  <xs:simpleType name="taskidentifier">
    <xs:restriction base="xs:string"/>
  </xs:simpleType>
  <xs:simpleType name="taskcategoryidentifier">
    <xs:restriction base="xs:string"/>
  </xs:simpleType>
  <xs:simpleType name="taskidentifier.declare">
    <xs:restriction base="xs:string"/>
  </xs:simpleType>
  <xs:simpleType name="procedureidentifier">
    <xs:restriction base="xs:string"/>
  </xs:simpleType>
  <xs:simpleType name="propertyidentifier">
    <xs:restriction base="xs:string"/>
  </xs:simpleType>
  <xs:simpleType name="eventhandleridentifier">
    <xs:restriction base="xs:string"/>
  </xs:simpleType>
  <xs:simpleType name="statement">
    <xs:restriction base="xs:string"/>
  </xs:simpleType>
  <xs:simpleType name="functionidentifier">
    <xs:restriction base="xs:string"/>
  </xs:simpleType>
  <xs:simpleType name="reporttargetidentifier">
    <xs:restriction base="xs:string"/>
  </xs:simpleType>
  <xs:simpleType name="procedureimplementationidentifier">
    <xs:restriction base="xs:string"/>
  </xs:simpleType>
  <xs:simpleType name="parameteridentifier">
    <xs:restriction base="xs:string"/>
  </xs:simpleType>
  <xs:simpleType name="taskstatus">
    <xs:restriction base="xs:string">
      <xs:enumeration value="Skipped"/>
      <xs:enumeration value="Handled"/>
      <xs:enumeration value="Unhandled"/>
      <xs:enumeration value="Failed"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="newtaskbehaviour">
    <xs:restriction base="xs:string">
      <xs:enumeration value="Skip"/>
      <xs:enumeration value="AddHidden"/>
      <xs:enumeration value="AddToRoot"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="taskstatusflags">
    <xs:list itemType="taskstatus"></xs:list>
  </xs:simpleType>

  <xs:complexType name="T_WhileLoop">
    <xs:complexContent>
      <xs:extension base="T_AbstractProcessItem">
        <xs:sequence minOccurs="0" maxOccurs="unbounded">
          <xs:element ref="AbstractProcessItem"/>
        </xs:sequence>
        <xs:attribute name="Expression" type="expression" use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="T_TryFinally">
    <xs:complexContent>
      <xs:extension base="T_AbstractProcessItem">
        <xs:sequence>
          <xs:element name="Try" type="T_Block"/>
          <xs:element name="Finally" type="T_Block"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="T_TryExcept">
    <xs:complexContent>
      <xs:extension base="T_AbstractProcessItem">
        <xs:sequence>
          <xs:element name="Try" type="T_Block"/>
          <xs:element name="Except" type="T_Except"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="T_Block">
    <xs:sequence minOccurs="0" maxOccurs="unbounded">
      <xs:element ref="AbstractProcessItem"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="T_Except">
    <xs:sequence>
      <xs:element name="On" type="T_OnBlock" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="Otherwise" type="T_Block"  minOccurs="0" maxOccurs="1"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="T_OnBlock">
    <xs:complexContent>
      <xs:extension base="T_Block">
        <xs:attribute name="Identifier" type="identifier" use="required"/>
        <xs:attribute name="ClassType" type="identifier" use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="T_TaskBlock">
    <xs:complexContent>
      <xs:extension base="T_Block">
        <xs:attribute name="Identifier" type="identifier" use="optional"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="T_Raise">
    <xs:complexContent>
      <xs:extension base="T_AbstractConditionalProcessItem">
        <xs:attribute name="Expression" type="expression" use="optional"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="T_Exit">
    <xs:complexContent>
      <xs:extension base="T_AbstractConditionalProcessItem">
        <xs:attribute name="Result" type="expression" use="optional"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="T_FormalParameter">
    <xs:attribute name="Identifier" type="parameteridentifier" use="required"/>
    <xs:attribute name="Direction" use="optional">
      <xs:simpleType>
        <xs:restriction base="xs:string">
          <xs:enumeration value="Input"/>
          <xs:enumeration value="Output"/>
          <xs:enumeration value="InputOutput"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="Type" type="typeidentifier" use="optional"/>
    <xs:attribute name="DisabledChecks" type="valuestatuschecks" use="optional"/>
  </xs:complexType>
  <xs:complexType name="T_PropertyParameter">
    <xs:attribute name="Identifier" type="parameteridentifier" use="required"/>
    <xs:attribute name="Type" type="typeidentifier" use="optional"/>
  </xs:complexType>
  <xs:complexType name="T_FormalFunctionReturnParameter">
    <xs:attribute name="Identifier" type="parameteridentifier" use="required"/>
  </xs:complexType>
  <xs:complexType name="T_Parameter">
    <xs:attribute name="Identifier" type="parameteridentifier"/>
    <xs:attribute name="Expression" type="expression"/>
    <xs:attribute name="Type">
      <xs:simpleType>
        <xs:restriction base="xs:string">
          <xs:enumeration value="Input"/>
          <xs:enumeration value="Output"/>
          <xs:enumeration value="InputOutput"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="TExecute">
    <xs:complexContent>
      <xs:extension base="T_AbstractConditionalProcessItem">
        <xs:attribute name="Statement" type="statement" use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="T_RepeatUntilLoop">
    <xs:complexContent>
      <xs:extension base="T_AbstractProcessItem">
        <xs:sequence minOccurs="0" maxOccurs="unbounded">
          <xs:element ref="AbstractProcessItem"/>
        </xs:sequence>
        <xs:attribute name="Expression" type="expression" use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="TVariable">
    <xs:complexContent>
      <xs:extension base="T_AbstractConditionalProcessItem">
        <xs:attribute name="Identifier" type="identifier" use="required"/>
        <xs:attribute name="Type" type="typeidentifier" use="optional"/>
        <xs:attribute name="Init" type="expression" use="optional"/>
        <xs:attribute name="DisabledChecks" type="valuestatuschecks" use="optional"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="T_Variable">
    <xs:attribute name="Identifier" type="identifier" use="required"/>
    <xs:attribute name="Type" type="typeidentifier" use="optional"/>
    <xs:attribute name="Init" type="expression" use="optional"/>
    <xs:attribute name="DisabledChecks" type="valuestatuschecks" use="optional"/>
  </xs:complexType>

  <xs:complexType name="T_Variables">
    <xs:sequence>
      <xs:element name="Variable" type="T_Variable" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="T_Constant">
    <xs:attribute name="Identifier" type="identifier" use="required"/>
    <xs:attribute name="Type" type="typeidentifier" use="optional"/>
    <xs:attribute name="Expression" type="expression" use="required"/>
  </xs:complexType>

  <xs:complexType name="T_Constants">
    <xs:sequence>
      <xs:element name="Constant" type="T_Constant" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="T_TaskCategoryUsage">
    <xs:attribute name="Identifier" type="taskidentifier" use="required"/>
  </xs:complexType>

  <xs:complexType name="T_Task">
    <xs:sequence>
      <xs:element name="Category" type="T_TaskCategoryUsage" minOccurs="0" maxOccurs="unbounded"/>
      <xs:group ref="G_TaskImplementation"/>
      <xs:sequence minOccurs="0" maxOccurs="1">
        <xs:element name="Init" type="T_Block" minOccurs="1"/>
        <xs:group ref="G_ConstantsAndVarables"/>
      </xs:sequence>
      <xs:sequence minOccurs="0" maxOccurs="1">
        <xs:element name="AfterInit" type="T_Block" minOccurs="1"/>
        <xs:group ref="G_ConstantsAndVarables"/>
      </xs:sequence>
      <xs:element name="Block" type="T_Block" minOccurs="0"/>
      <xs:element name="Finalization" type="T_Block" minOccurs="0"/>
    </xs:sequence>
    <xs:attribute name="Identifier" type="taskidentifier.declare" use="required"/>
    <xs:attribute name="Task" type="identifier" use="optional"/>
    <xs:attribute name="SelfType" type="typeidentifier" use="optional"/>
    <xs:attribute name="SelfConstruction" type="expression" use="optional"/>
  </xs:complexType>

  <xs:complexType name="T_Tasks">
    <xs:sequence>
      <xs:element name="Task" type="T_Task" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="T_ProcedureParameters">
    <xs:sequence>
      <xs:element name="Parameter" maxOccurs="unbounded">
        <xs:complexType>
          <xs:complexContent>
            <xs:extension base="T_FormalParameter"/>
          </xs:complexContent>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="T_PropertyParameters">
    <xs:sequence>
      <!--xs:element name="ReturnParameter" type="T_FormalFunctionReturnParameter" minOccurs="0" maxOccurs="1"/-->
      <xs:element name="Parameter" type="T_PropertyParameter" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>

  <xs:group name="G_ProcedureHeader">
    <xs:sequence>
      <xs:element name="Parameters" type="T_ProcedureParameters" minOccurs="0"/>
    </xs:sequence>
  </xs:group>

  <xs:group name="G_FunctionHeader">
    <xs:sequence>
      <xs:element name="Parameters" type="T_FunctionParameters" minOccurs="0"/>
    </xs:sequence>
  </xs:group>

  <xs:complexType name="T_Procedures">
    <xs:choice minOccurs="1" maxOccurs="unbounded">
      <xs:element name="Procedure" type="T_Procedure" minOccurs="0" maxOccurs="1"/>
      <xs:element name="Property" type="T_Property" minOccurs="0" maxOccurs="1"/>
      <xs:element name="ProcedureHeader" type="T_ProcedureHeader" minOccurs="0" maxOccurs="1"/>
      <xs:element name="Function" type="T_Function" minOccurs="0" maxOccurs="1"/>
      <xs:element name="FunctionHeader" type="T_FunctionHeader" minOccurs="0" maxOccurs="1"/>
      <xs:element name="Constructor" type="T_Constructor" minOccurs="0" maxOccurs="1"/>
      <xs:element name="ConstructorHeader" type="T_ConstructorHeader" minOccurs="0" maxOccurs="1"/>
      <xs:element name="Implementation" type="T_Implementation" minOccurs="0" maxOccurs="1"/>
      <xs:element name="Task" type="T_Task" minOccurs="0" maxOccurs="1"/>
      <xs:element name="EventHandler" type="T_EventHandler" minOccurs="0" maxOccurs="1"/>
    </xs:choice>
  </xs:complexType>

  <xs:complexType name="T_TaskCategoryTask">
    <xs:sequence>
      <xs:element name="Task" type="T_TaskCategoryTask" minOccurs="0"/>
    </xs:sequence>
    <xs:attribute name="Identifier" type="taskidentifier" use="required"/>
    <xs:attribute name="IgnoreFailure" type="xs:boolean" use="optional"/>
  </xs:complexType>

  <xs:complexType name="T_TaskCategoryReference">
    <xs:attribute name="Identifier" type="taskcategoryidentifier" use="required"/>
  </xs:complexType>

  <xs:complexType name="T_TaskCategory">
    <xs:sequence>
      <xs:element name="Import" type="T_TaskCategoryReference" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="Task" type="T_TaskCategoryTask" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
    <xs:attribute name="Identifier" type="taskcategoryidentifier" use="required"/>
    <xs:attribute name="Description" type="xs:string" use="optional"/>
  </xs:complexType>

  <xs:complexType name="T_TaskCategories">
    <xs:sequence minOccurs="1" maxOccurs="1">
      <xs:element name="Category" type="T_TaskCategory" minOccurs="1" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>

  <xs:group name="G_Implementation">
    <xs:sequence>
      <xs:element name="TaskCategories" type="T_TaskCategories" minOccurs="0"/>
      <xs:group ref="G_ConstantsAndVarables"/>
      <xs:sequence minOccurs="0" maxOccurs="1">
        <xs:element name="Procedures" type="T_Procedures" minOccurs="1"/>
        <xs:group ref="G_ConstantsAndVarables"/>
      </xs:sequence>
    </xs:sequence>
  </xs:group>

  <xs:group name="G_TaskImplementation">
    <xs:sequence>
      <xs:element name="TaskCategories" type="T_TaskCategories" minOccurs="0"/>
      <xs:group ref="G_Constants"/>
      <xs:sequence minOccurs="0" maxOccurs="1">
        <xs:element name="Procedures" type="T_Procedures" minOccurs="1"/>
        <xs:group ref="G_Constants"/>
      </xs:sequence>
      <xs:element name="Variables" type="T_Variables" minOccurs="0"/>
    </xs:sequence>
  </xs:group>

  <xs:complexType name="T_Import">
    <xs:attribute name="Identifier" type="unitidentifier" use="required"/>
    <xs:attribute name="Filename" type="xs:string" use="required"/>
    <xs:attribute name="CheckMultipleFileOccurrences" type="xs:boolean" use="optional">
      <xs:annotation>
        <xs:documentation>
          Default: true
          On some file systems (see GetFileInformationByHandle) CheckMultipleFileOccurrences:false might be needed to discard file uniqueness checking
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <xs:complexType name="T_Imports">
    <xs:sequence>
      <xs:element name="Import" type="T_Import" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="T_Use">
    <xs:attribute name="Identifier" type="unitidentifier" use="required"/>
  </xs:complexType>

  <xs:complexType name="T_Uses">
    <xs:sequence>
      <xs:element name="Use" type="T_Use" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="T_Field">
    <xs:attribute name="Identifier" type="fieldidentifier" use="required"/>
    <xs:attribute name="DataType" type="fielddatatype" use="optional"/>
    <xs:attribute name="Type" type="typeidentifier" use="optional"/>
  </xs:complexType>

  <xs:complexType name="T_VirtualMethod">
    <xs:attribute name="Identifier" type="virtualmethodidentifier" use="required"/>
    <xs:attribute name="Override" type="xs:boolean" use="optional"/>
    <xs:attribute name="IsFinalizer" type="xs:boolean" use="optional"/>
  </xs:complexType>

  <xs:complexType name="T_DataClass">
    <xs:sequence>
      <xs:element name="VirtualMethod" type="T_VirtualMethod" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="Field" type="T_Field" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
    <xs:attribute name="Identifier" type="typeidentifier" use="required"/>
    <xs:attribute name="Inherit" type="dataobjecttypeidentifier" use="optional"/>
    <xs:attribute name="DefaultConstructor" type="defaultconstructortype" use="optional"/>
  </xs:complexType>

  <xs:complexType name="T_Enumeration">
    <xs:attribute name="Identifier" type="typeidentifier" use="required"/>
    <xs:attribute name="Elements" type="enumtypeelementlist" use="required"/>
    <xs:attribute name="LowAlias" type="identifier" use="optional"/>
    <xs:attribute name="HighAlias" type="identifier" use="optional"/>
  </xs:complexType>

  <xs:complexType name="T_Type">
    <xs:sequence>
      <xs:element name="DataClass.Forwarded" minOccurs="0" maxOccurs="unbounded">
        <xs:complexType>
          <xs:annotation>
            <xs:documentation>
              Pseudo object. Is aan te maken met &lt;Identifier&gt;.Create([Field, ..])
            </xs:documentation>
          </xs:annotation>
          <xs:attribute name="Identifier" type="typeidentifier" use="required"/>
        </xs:complexType>
      </xs:element>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element name="DataClass" type="T_DataClass" minOccurs="0" maxOccurs="1">
          <xs:annotation>
            <xs:documentation>
              Pseudo object. Is aan te maken met &lt;Identifier&gt;.Create([Field, ..])
            </xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="Enumeration" type="T_Enumeration" minOccurs="0" maxOccurs="1">
          <xs:annotation>
            <xs:documentation>
            </xs:documentation>
          </xs:annotation>
        </xs:element>
      </xs:choice>
    </xs:sequence>
  </xs:complexType>

  <xs:group name="G_ConstantsAndVarables">
    <xs:sequence>
      <xs:element name="Type" type="T_Type" minOccurs="0"/>
      <xs:element name="Constants" type="T_Constants" minOccurs="0"/>
      <xs:element name="Variables" type="T_Variables" minOccurs="0"/>
    </xs:sequence>
  </xs:group>

  <xs:group name="G_Constants">
    <xs:sequence>
      <xs:element name="Type" type="T_Type" minOccurs="0"/>
      <xs:element name="Constants" type="T_Constants" minOccurs="0"/>
    </xs:sequence>
  </xs:group>

  <xs:group name="G_Program">
    <xs:sequence>
      <xs:element name="Imports" type="T_Imports" minOccurs="0"/>
      <xs:element name="Uses" type="T_Uses" minOccurs="0"/>
      <xs:element name="TaskCategories" type="T_TaskCategories" minOccurs="0"/>
      <xs:group ref="G_ConstantsAndVarables"/>
      <xs:sequence minOccurs="0" maxOccurs="1">
        <xs:element name="Procedures" type="T_Procedures" minOccurs="1"/>
        <xs:group ref="G_ConstantsAndVarables"/>
      </xs:sequence>
      <xs:element ref="Block"/>
    </xs:sequence>
  </xs:group>

  <xs:group name="G_Library">
    <xs:sequence>
      <xs:element name="Uses" type="T_Uses" minOccurs="0"/>
      <xs:element name="TaskCategories" type="T_TaskCategories" minOccurs="0"/>
      <xs:group ref="G_ConstantsAndVarables"/>
      <xs:sequence minOccurs="0" maxOccurs="1">
        <xs:element name="Procedures" type="T_Procedures" minOccurs="1"/>
        <xs:group ref="G_ConstantsAndVarables"/>
      </xs:sequence>
      <xs:element name="Initialization" type="T_Block" minOccurs="0"/>
      <xs:element name="Finalization" type="T_Block" minOccurs="0"/>
    </xs:sequence>
  </xs:group>

  <xs:complexType name="T_AbstractProcessItem" abstract="1"/>

  <xs:complexType name="T_ForLoop">
    <xs:complexContent>
      <xs:extension base="T_AbstractProcessItem">
        <xs:sequence minOccurs="0" maxOccurs="unbounded">
          <xs:element ref="AbstractProcessItem"/>
        </xs:sequence>
        <xs:attribute name="Indexer" type="identifier" use="required"/>
        <xs:attribute name="From" type="expression" use="required"/>
        <xs:attribute name="To" type="expression" use="required"/>
        <xs:attribute name="Reverse" type="xs:boolean" use="optional"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="T_StringLoop">
    <xs:complexContent>
      <xs:extension base="T_AbstractProcessItem">
        <xs:sequence minOccurs="0" maxOccurs="unbounded">
          <xs:element ref="AbstractProcessItem"/>
        </xs:sequence>
        <xs:attribute name="StringValue" type="expression" use="required"/>
        <xs:attribute name="CharacterIdentifier" type="identifier" use="optional"/>
        <xs:attribute name="OrdinalIdentifier" type="identifier" use="optional"/>
        <xs:attribute name="Ansi" type="xs:boolean" use="optional"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="T_AbstractBlockProcessItem">
    <xs:complexContent>
      <xs:extension base="T_AbstractProcessItem">
        <xs:sequence minOccurs="0" maxOccurs="unbounded">
          <xs:element ref="AbstractProcessItem"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="T_AbstractConditionalBlockProcessItem">
    <xs:complexContent>
      <xs:extension base="T_AbstractConditionalProcessItem">
        <xs:sequence minOccurs="0" maxOccurs="unbounded">
          <xs:element ref="AbstractProcessItem"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="T_AbstractConditionalProcessItem">
    <xs:complexContent>
      <xs:extension base="T_AbstractProcessItem">
        <xs:attribute name="Condition" type="expression" use="optional"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="T_TaskStatus">
    <xs:complexContent>
      <xs:extension base="T_AbstractConditionalProcessItem">
        <xs:attribute name="Task" type="expression" use="optional"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="T_Task.Mark">
    <xs:complexContent>
      <xs:extension base="T_TaskStatus">
        <xs:attribute name="Success" type="expression" use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="T_Task.Assert">
    <xs:complexContent>
      <xs:extension base="T_AbstractConditionalProcessItem">
        <xs:attribute name="Expression" type="expression" use="required"/>
        <xs:attribute name="FailMessage" type="expression" use="optional"/>
        <xs:attribute name="FailTarget" type="reporttargetidentifier" use="optional"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="T_ConditionalBlock">
    <xs:complexContent>
      <xs:extension base="T_AbstractBlockProcessItem">
        <xs:attribute name="Expression" type="expression" use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="T_BlockProcessItem">
    <xs:complexContent>
      <xs:extension base="T_AbstractBlockProcessItem">
        <xs:attribute name="Condition" type="expression" use="optional"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="T_Choose">
    <xs:complexContent>
      <xs:extension base="T_AbstractProcessItem">
        <xs:sequence>
          <xs:element name="When" type="T_ConditionalBlock" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element name="Otherwise" type="T_Block" minOccurs="0"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>


  <xs:complexType name="T_CaseSelectBlock">
    <xs:complexContent>
      <xs:extension base="T_Block">
        <xs:attribute name="Select" type="caseselectexpression" use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="T_Case">
    <xs:complexContent>
      <xs:extension base="T_AbstractProcessItem">
        <xs:sequence>
          <xs:element name="On" type="T_CaseSelectBlock" minOccurs="0" maxOccurs="unbounded"/>
          <xs:element name="Otherwise" type="T_Block" minOccurs="0"/>
        </xs:sequence>
        <xs:attribute name="Expression" type="expression" use="required"/>
        <xs:attribute name="Optimalisation" type="caseoptimalisation" use="optional"/>
        <xs:attribute name="OrdinalType" type="caseordinaltype" use="optional"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="T_Procedure">
    <xs:sequence>
      <xs:group ref="G_ProcedureHeader"/>
      <xs:group ref="G_Implementation"/>
      <xs:element name="Block" type="T_Block"/>
    </xs:sequence>
    <xs:attribute name="Identifier" type="procedureidentifier" use="required"/>
    <xs:attribute name="VirtualMethod" type="virtualmethodidentifier" use="optional"/>
  </xs:complexType>

  <!--<xs:complexType name="T_PropertyGetter">
    <xs:complexContent>
      <xs:extension base="T_Block">
        <xs:attribute name="Expression" type="expression" use="optional"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>-->

  <xs:complexType name="T_PropertySetter">
    <xs:complexContent>
      <xs:extension base="T_Block">
        <xs:attribute name="Value" type="identifier" use="optional"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="T_Property">
    <xs:sequence>
      <xs:element name="Parameters" type="T_PropertyParameters" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="Getter" type="T_Block" minOccurs="0" maxOccurs="1"/>
      <xs:element name="Setter" type="T_PropertySetter" minOccurs="0" maxOccurs="1"/>
    </xs:sequence>
    <xs:attribute name="Identifier" type="propertyidentifier" use="required"/>
    <xs:attribute name="Type" type="typeidentifier" use="optional"/>
    <xs:attribute name="IsDefault" type="xs:boolean" use="optional"/>
  </xs:complexType>

  <xs:complexType name="T_ProcessBlock">
    <xs:sequence>
      <xs:group ref="G_ProcedureHeader"/>
      <xs:group ref="G_Implementation"/>
      <xs:element name="Block" type="T_Block"/>
    </xs:sequence>
    <xs:attribute name="Identifier" type="procedureidentifier" use="required"/>
  </xs:complexType>

  <xs:complexType name="T_Function">
    <xs:sequence>
      <xs:group ref="G_ProcedureHeader"/>
      <xs:group ref="G_Implementation"/>
      <xs:element name="Block" type="T_Block"/>
    </xs:sequence>
    <xs:attribute name="Identifier" type="procedureidentifier" use="required"/>
    <xs:attribute name="VirtualMethod" type="virtualmethodidentifier" use="optional"/>
    <xs:attribute name="Type" type="typeidentifier" use="optional"/>
    <xs:attribute name="IsDeterministic" type="xs:boolean" use="optional"/>
  </xs:complexType>

  <xs:complexType name="T_Constructor">
    <xs:sequence>
      <xs:group ref="G_ProcedureHeader"/>
      <xs:group ref="G_Implementation"/>
      <xs:element name="Block" type="T_Block"/>
    </xs:sequence>
    <xs:attribute name="Identifier" type="procedureidentifier" use="required"/>
    <xs:attribute name="VirtualMethod" type="virtualmethodidentifier" use="optional"/>
  </xs:complexType>



  <xs:complexType name="T_Implementation">
    <xs:sequence>
      <xs:group ref="G_Implementation"/>
      <xs:element name="Block" type="T_Block"/>
    </xs:sequence>
    <xs:attribute name="Identifier" type="procedureimplementationidentifier" use="required"/>
  </xs:complexType>

  <xs:complexType name="T_EventHandler">
    <xs:sequence>
      <xs:group ref="G_Implementation"/>
      <xs:element name="Block" type="T_Block"/>
    </xs:sequence>
    <xs:attribute name="Identifier" type="eventhandleridentifier" use="required"/>
    <xs:attribute name="ContextClass" type="typeidentifier" use="required"/>
  </xs:complexType>

  <xs:complexType name="T_ProcedureHeader">
    <xs:sequence>
      <xs:group ref="G_ProcedureHeader"/>
    </xs:sequence>
    <xs:attribute name="VirtualMethod" type="virtualmethodidentifier" use="optional"/>
    <xs:attribute name="Identifier" type="procedureidentifier" use="required"/>
    <xs:attribute name="ImplementationIdentifier" type="procedureimplementationidentifier" use="optional"/>
  </xs:complexType>

  <xs:complexType name="T_FunctionHeader">
    <xs:sequence>
      <xs:group ref="G_ProcedureHeader"/>
    </xs:sequence>
    <xs:attribute name="VirtualMethod" type="virtualmethodidentifier" use="optional"/>
    <xs:attribute name="Identifier" type="procedureidentifier" use="required"/>
    <xs:attribute name="Type" type="typeidentifier" use="optional"/>
    <xs:attribute name="IsDeterministic" type="xs:boolean" use="optional"/>
    <xs:attribute name="ImplementationIdentifier" type="procedureimplementationidentifier" use="optional"/>
  </xs:complexType>

  <xs:complexType name="T_ConstructorHeader">
    <xs:sequence>
      <xs:group ref="G_ProcedureHeader"/>
    </xs:sequence>
    <xs:attribute name="Identifier" type="procedureidentifier" use="required"/>
    <xs:attribute name="Type" type="typeidentifier" use="optional"/>
    <xs:attribute name="IsDeterministic" type="xs:boolean" use="optional"/>
    <xs:attribute name="ImplementationIdentifier" type="procedureimplementationidentifier" use="optional"/>
  </xs:complexType>

  <xs:complexType name="T_Task.Description">
    <xs:complexContent>
      <xs:extension base="T_AbstractConditionalProcessItem">
        <xs:attribute name="Expression" type="expression"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="T_Task.Hint">
    <xs:complexContent>
      <xs:extension base="T_AbstractConditionalProcessItem">
        <xs:attribute name="Expression" type="expression"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="T_Task.Kind">
    <xs:complexContent>
      <xs:extension base="T_AbstractConditionalProcessItem">
        <xs:attribute name="Expression" type="expression"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="T_Task.SuccessfulExecuteTime">
    <xs:complexContent>
      <xs:extension base="T_AbstractConditionalProcessItem">
        <xs:attribute name="Task" type="expression" use="optional"/>
        <xs:attribute name="Expression" type="expression"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="T_Task.AddDependency">
    <xs:complexContent>
      <xs:extension base="T_AbstractConditionalProcessItem">
        <xs:attribute name="Task" type="taskidentifier"/>
        <xs:attribute name="InstanceObject" type="expression"/>
        <xs:attribute name="Result" type="identifier"/>
        <xs:attribute name="ResultType" type="typeidentifier"/>
        <xs:attribute name="TaskInfo" type="identifier"/>
        <xs:attribute name="IgnoreFailure" type="expression"/>
        <xs:attribute name="DelayFinalization" type="expression"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="T_Task.CreateDependency">
    <xs:complexContent>
      <xs:extension base="T_AbstractConditionalProcessItem">
        <xs:attribute name="Task" type="taskidentifier"/>
        <xs:attribute name="RequiredTask" type="taskidentifier"/>
        <xs:attribute name="IgnoreFailure" type="expression"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="T_Pause">
    <xs:complexContent>
      <xs:extension base="T_AbstractConditionalProcessItem">
        <xs:attribute name="ExitCondition" type="expression"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="T_ExecuteTasks">
    <xs:complexContent>
      <xs:extension base="T_AbstractConditionalProcessItem">
        <xs:sequence>
          <xs:choice minOccurs="1" maxOccurs="unbounded">
            <xs:element name="Task" minOccurs="0" maxOccurs="1">
              <xs:complexType>
                <xs:attribute name="Identifier" type="taskidentifier"/>
                <xs:attribute name="InstanceObject" type="expression"/>
                <xs:attribute name="IgnoreFailure" type="expression"/>
                <xs:attribute name="Condition" type="expression"/>
              </xs:complexType>
            </xs:element>
            <xs:element name="TaskCategory" minOccurs="0" maxOccurs="1">
              <xs:complexType>
                <xs:attribute name="Identifier" type="taskcategoryidentifier"/>
                <xs:attribute name="IgnoreFailure" type="expression"/>
                <xs:attribute name="Condition" type="expression"/>
              </xs:complexType>
            </xs:element>
            <xs:element name="ExcludeTask" minOccurs="0" maxOccurs="1">
              <xs:complexType>
                <xs:attribute name="Identifier" type="taskidentifier"/>
                <xs:attribute name="InstanceObject" type="expression"/>
                <xs:attribute name="Condition" type="expression"/>
              </xs:complexType>
            </xs:element>
            <xs:element name="ExcludeTaskCategory" minOccurs="0" maxOccurs="1">
              <xs:complexType>
                <xs:attribute name="Identifier" type="taskcategoryidentifier"/>
                <xs:attribute name="Condition" type="expression"/>
              </xs:complexType>
            </xs:element>
          </xs:choice>
          <xs:element name="SelectionRules" minOccurs="0" maxOccurs="1">
            <xs:complexType>
              <xs:choice minOccurs="1" maxOccurs="unbounded">
                <xs:element name="PropagateSelection">
                  <xs:complexType>
                    <xs:attribute name="Condition" type="expression" use="optional"/>
                    <xs:attribute name="Category" type="taskcategoryidentifier" use="required"/>
                    <xs:attribute name="FollowingCategory" type="taskcategoryidentifier" use="required"/>
                    <xs:attribute name="NewTaskBehaviour" type="newtaskbehaviour" use="optional"/>
                  </xs:complexType>
                </xs:element>
              </xs:choice>
            </xs:complexType>
          </xs:element>
          <xs:element name="BeforeInit" type="T_Block" minOccurs="0"/>
          <xs:element name="BeforeInitTask" type="T_TaskBlock" minOccurs="0"/>
          <xs:element name="AfterInitTask" type="T_TaskBlock" minOccurs="0"/>
          <xs:element name="BeforeAfterInitTask" type="T_TaskBlock" minOccurs="0"/>
          <xs:element name="AfterAfterInitTask" type="T_TaskBlock" minOccurs="0"/>
          <xs:element name="AfterInit" type="T_Block" minOccurs="0"/>
          <xs:element name="SelectionSuspend" type="T_Suspend" minOccurs="0"/>
          <xs:element name="BeforeExecute" type="T_Block" minOccurs="0"/>
          <xs:element name="BeforeExecuteTask" type="T_TaskBlock" minOccurs="0"/>
          <xs:element name="AfterExecuteTask" type="T_TaskBlock" minOccurs="0"/>
          <xs:element name="BeforeFinalizationTask" type="T_TaskBlock" minOccurs="0"/>
          <xs:element name="AfterFinalizationTask" type="T_TaskBlock" minOccurs="0"/>
          <xs:element name="AfterExecute" type="T_Block" minOccurs="0"/>
        </xs:sequence>
        <xs:attribute name="ExecutableTasksInSelectionOnly" type="expression" use="optional"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="T_EnumerateTasks">
    <xs:complexContent>
      <xs:extension base="T_AbstractConditionalBlockProcessItem">
        <xs:attribute name="Identifier" type="identifier" use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="T_Task.Iterate.DependOnTasks">
    <xs:complexContent>
      <xs:extension base="T_AbstractConditionalBlockProcessItem">
        <xs:attribute name="Task" type="expression" use="required"/>
        <xs:attribute name="DependsOnTask" type="identifier" use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="T_Task.Iterate.NeededForTasks">
    <xs:complexContent>
      <xs:extension base="T_AbstractConditionalBlockProcessItem">
        <xs:attribute name="Task" type="expression" use="required"/>
        <xs:attribute name="NeededForTask" type="identifier" use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="T_BaseResume" abstract="true">
    <xs:complexContent>
      <xs:extension base="T_AbstractConditionalBlockProcessItem">
        <xs:attribute name="Condition" type="expression"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="TResume.ResumeRequest">
    <xs:complexContent>
      <xs:extension base="T_BaseResume">
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="TResume.BreakRequest">
    <xs:complexContent>
      <xs:extension base="T_BaseResume">
        <xs:attribute name="IssueExit" type="expression" use="optional"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="TResume.Timed">
    <xs:complexContent>
      <xs:extension base="T_BaseResume">
        <xs:attribute name="Duration" type="expression" use="optional"/>
        <!--100 nanosecond -->
        <xs:attribute name="AbosoluteTime" type="expression" use="optional"/>
        <!--100 nanosecond filetime-->
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="TResume.EventHandle">
    <xs:complexContent>
      <xs:extension base="T_BaseResume">
        <xs:attribute name="Handle" type="expression" use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="TResume.DirectoryChange">
    <xs:complexContent>
      <xs:extension base="T_BaseResume">
        <xs:attribute name="HandleObject" type="expression" use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="T_CreateDirectoryChangeObject">
    <xs:complexContent>
      <xs:extension base="T_AbstractProcessItem">
        <xs:attribute name="HandleObjectIdentifier" type="identifier" use="required"/>
        <xs:attribute name="Directory" type="expression" use="required"/>
        <xs:attribute name="WatchSubTree" type="expression" use="required"/>
        <xs:attribute name="NotifyFilter" type="expression" use="required"/>
        <!--
        FILE_NOTIFY_CHANGE_FILE_NAME
        FILE_NOTIFY_CHANGE_DIR_NAME
        FILE_NOTIFY_CHANGE_ATTRIBUTES
        FILE_NOTIFY_CHANGE_SIZE
        FILE_NOTIFY_CHANGE_LAST_WRITE
        FILE_NOTIFY_CHANGE_SECURITY
-->
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="T_Suspend">
    <xs:complexContent>
      <xs:extension base="T_AbstractConditionalProcessItem">
        <xs:sequence minOccurs="1" maxOccurs="unbounded">
          <xs:choice minOccurs="1" maxOccurs="1">
            <xs:element name="Resume.ResumeRequest" type="TResume.ResumeRequest"/>
            <xs:element name="Resume.BreakRequest" type="TResume.BreakRequest"/>
            <xs:element name="Resume.Timed" type="TResume.Timed"/>
            <xs:element name="Resume.EventHandle" type="TResume.EventHandle"/>
            <xs:element name="Resume.DirectoryChange" type="TResume.DirectoryChange"/>
          </xs:choice>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="T_Free">
    <xs:complexContent>
      <xs:extension base="T_AbstractConditionalProcessItem">
        <xs:attribute name="Expression" type="expression" use="optional"/>
        <xs:attribute name="Identifier" type="identifier" use="optional"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="T_Object.Use">
    <xs:complexContent>
      <xs:extension base="T_AbstractConditionalBlockProcessItem">
        <xs:attribute name="Identifier" type="identifier" use="required"/>
        <xs:attribute name="LocalVariable" type="xs:boolean" use="optional"/>
        <xs:attribute name="Type" type="typeidentifier" use="required"/>
        <xs:attribute name="Expression" type="expression" use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="T_DataObject.Create">
    <xs:complexContent>
      <xs:extension base="T_AbstractConditionalProcessItem">
        <xs:attribute name="Identifier" type="identifier" use="required"/>
        <xs:attribute name="DataClass" type="dataclassconst" use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="T_DataObject.SetField">
    <xs:complexContent>
      <xs:extension base="T_AbstractConditionalProcessItem">
        <xs:attribute name="DataObject" type="expression" use="required"/>
        <xs:attribute name="Identifier" type="fieldidentifier" use="required"/>
        <xs:attribute name="Value" type="expression" use="required"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:element name="AbstractProcessItem" type="T_AbstractProcessItem" abstract="true"/>
  <xs:element name="AbstractConditionalProcessItem" type="T_AbstractConditionalProcessItem" substitutionGroup="AbstractProcessItem" abstract="true"/>
  <xs:element name="AbstractBlockProcessItem" type="T_AbstractBlockProcessItem" substitutionGroup="AbstractProcessItem" abstract="true"/>
  <xs:element name="AbstractConditionalBlockProcessItem" type="T_AbstractConditionalBlockProcessItem" substitutionGroup="AbstractProcessItem" abstract="true"/>
  <xs:element name="ProcessBlock" type="T_ProcessBlock"/>
  <xs:element name="WhileLoop" type="T_WhileLoop" substitutionGroup="AbstractProcessItem"/>
  <xs:element name="TryFinally" type="T_TryFinally" substitutionGroup="AbstractProcessItem"/>
  <xs:element name="TryExcept" type="T_TryExcept" substitutionGroup="AbstractProcessItem"/>
  <xs:element name="ConditionalBlock" type="T_ConditionalBlock" substitutionGroup="AbstractProcessItem"/>
  <xs:element name="Block" type="T_BlockProcessItem" substitutionGroup="AbstractProcessItem"/>
  <xs:element name="Choose" type="T_Choose" substitutionGroup="AbstractProcessItem"/>
  <xs:element name="Case" type="T_Case" substitutionGroup="AbstractProcessItem"/>
  <xs:element name="Raise" type="T_Raise" substitutionGroup="AbstractProcessItem"/>
  <xs:element name="Breakpoint" type="T_AbstractConditionalProcessItem" substitutionGroup="AbstractProcessItem"/>
  <xs:element name="RepeatUntilLoop" type="T_RepeatUntilLoop" substitutionGroup="AbstractProcessItem"/>
  <xs:element name="ForLoop" type="T_ForLoop" substitutionGroup="AbstractProcessItem"/>
  <xs:element name="StringLoop" type="T_StringLoop" substitutionGroup="AbstractProcessItem"/>
  <xs:element name="Execute" type="TExecute" substitutionGroup="AbstractProcessItem"/>
  <xs:element name="Variable" type="TVariable" substitutionGroup="AbstractProcessItem"/>
  <xs:element name="Break" type="T_AbstractConditionalProcessItem" substitutionGroup="AbstractProcessItem"/>
  <xs:element name="Continue" type="T_AbstractConditionalProcessItem" substitutionGroup="AbstractProcessItem"/>
  <xs:element name="Exit" type="T_Exit" substitutionGroup="AbstractProcessItem"/>
  <xs:element name="Task.Description" type="T_Task.Description" substitutionGroup="AbstractProcessItem"/>
  <xs:element name="Task.Hint" type="T_Task.Hint" substitutionGroup="AbstractProcessItem"/>
  <xs:element name="Task.Kind" type="T_Task.Kind" substitutionGroup="AbstractProcessItem"/>
  <xs:element name="Task.SuccessfulExecuteTime" type="T_Task.SuccessfulExecuteTime" substitutionGroup="AbstractProcessItem"/>
  <xs:element name="Task.AddDependency" type="T_Task.AddDependency" substitutionGroup="AbstractProcessItem"/>
  <xs:element name="Task.CreateDependency" type="T_Task.CreateDependency" substitutionGroup="AbstractProcessItem"/>
  <xs:element name="Task.Iterate.DependOnTasks" type="T_Task.Iterate.DependOnTasks" substitutionGroup="AbstractProcessItem"/>
  <xs:element name="Task.Iterate.NeededForTasks" type="T_Task.Iterate.NeededForTasks" substitutionGroup="AbstractProcessItem"/>
  <xs:element name="Task.MarkUnhandled" type="T_TaskStatus" substitutionGroup="AbstractProcessItem"/>
  <xs:element name="Task.MarkHandled" type="T_TaskStatus" substitutionGroup="AbstractProcessItem"/>
  <xs:element name="Task.MarkFailed" type="T_TaskStatus" substitutionGroup="AbstractProcessItem"/>
  <xs:element name="Task.Mark" type="T_Task.Mark" substitutionGroup="AbstractProcessItem"/>
  <xs:element name="Task.Assert" type="T_Task.Assert" substitutionGroup="AbstractProcessItem"/>
  <xs:element name="ExecuteTasks" type="T_ExecuteTasks" substitutionGroup="AbstractProcessItem"/>
  <xs:element name="Pause" type="T_Pause" substitutionGroup="AbstractProcessItem"/>
  <xs:element name="EnumerateTasks" type="T_EnumerateTasks" substitutionGroup="AbstractProcessItem"/>
  <xs:element name="Suspend" type="T_Suspend" substitutionGroup="AbstractProcessItem"/>
  <xs:element name="Free" type="T_Free" substitutionGroup="AbstractProcessItem"/>
  <xs:element name="Object.Use" type="T_Object.Use" substitutionGroup="AbstractProcessItem"/>
  <xs:element name="DataObject.Create" type="T_DataObject.Create" substitutionGroup="AbstractProcessItem"/>
  <xs:element name="DataObject.SetField" type="T_DataObject.SetField" substitutionGroup="AbstractProcessItem"/>
  <xs:element name="ExitOnAbortRequest" type="T_AbstractConditionalProcessItem" substitutionGroup="AbstractProcessItem"/>
  <xs:element name="CreateDirectoryChangeObject" type="T_CreateDirectoryChangeObject" substitutionGroup="AbstractProcessItem"/>

</xs:schema>
